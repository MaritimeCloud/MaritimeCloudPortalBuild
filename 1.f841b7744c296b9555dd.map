{"version":3,"file":"1.7fe90e13d3078abc0ce2.chunk.js","sources":["webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts?e7eb","webpack:///./src/app/backend-api/identity-registry/autogen/model/Service.ts?20ea","webpack:///./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts?44cc","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts?bae2","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.html?592e","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts?1460","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.html?849b","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts?40e7","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.html?97ee","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts?f58f","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.html?6f0f","webpack:///./src/app/pages/org-identity-registry/services/services.component.ts?8cf9","webpack:///./src/app/pages/org-identity-registry/services/services.module.ts?9265","webpack:///./src/app/pages/org-identity-registry/services/services.routing.ts?6297","webpack:///./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts?73cd","webpack:///./src/app/pages/org-service-registry/designs/components/design-details/design-details.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-details/design-details.html","webpack:///./src/app/pages/org-service-registry/designs/components/design-list/design-list.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-list/design-list.html","webpack:///./src/app/pages/org-service-registry/designs/components/design-new/design-new.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-new/design-new.html","webpack:///./src/app/pages/org-service-registry/designs/components/design-update/design-update.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-update/design-update.html","webpack:///./src/app/pages/org-service-registry/designs/designs.component.ts","webpack:///./src/app/pages/org-service-registry/designs/designs.module.ts","webpack:///./src/app/pages/org-service-registry/designs/designs.routing.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html","webpack:///./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html","webpack:///./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html","webpack:///./src/app/pages/org-service-registry/instances/components/instance-update/instance-update.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-update/instance-update.html","webpack:///./src/app/pages/org-service-registry/instances/instances.component.ts","webpack:///./src/app/pages/org-service-registry/instances/instances.module.ts","webpack:///./src/app/pages/org-service-registry/instances/instances.routing.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.component.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.module.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.routing.ts","webpack:///./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts?51f0","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts?f923","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-update/specification-update.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-update/specification-update.html","webpack:///./src/app/pages/org-service-registry/specifications/specifications.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/specifications.module.ts","webpack:///./src/app/pages/org-service-registry/specifications/specifications.routing.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.component.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.module.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.routing.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts?34e7","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html?9ab8","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts?4ec2","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html?6ce5","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts?7f64","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html?947c","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss?89ae","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts?c517","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html?4ed3","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts?2512","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html?a249","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts?af65","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html?c375","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts?2a4e","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html?0ef1","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.component.ts?ff71","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.html?e0c6","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts?c1a4","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.html?4ed3","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.scss?370b","webpack:///./src/app/pages/shared/components/services-table/services-table.component.ts?dc51","webpack:///./src/app/pages/shared/components/services-table/services-table.html?441e","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts?6ac4","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html?334b","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts?5d8c","webpack:///./src/app/pages/shared/services/vessel-helper.ts?bb02","webpack:///./src/app/pages/shared/shared.module.ts?42d6"],"sourcesContent":["/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Organization {\n    address: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    country: string;\n\n    createdAt?: Date;\n\n    email: string;\n\n    /**\n     * Type of identity federation used by organization\n     */\n    federationType?: Organization.FederationTypeEnum;\n\n    id?: number;\n\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    /**\n     * The name of the organization\n     */\n    name: string;\n\n    updatedAt?: Date;\n\n    url: string;\n\n}\nexport namespace Organization {\n    export enum FederationTypeEnum {\n        TestIdp = <any> 'test-idp',\n        OwnIdp = <any> 'own-idp',\n        ExternalIdp = <any> 'external-idp'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Service {\n    /**\n     * The domain name the service will be available on. Used in the issued certificates for the service.\n     */\n    certDomainName?: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    createdAt?: Date;\n\n    id?: number;\n\n    /**\n     * The version of this service instance.\n     */\n    instanceVersion: string;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    name: string;\n\n    /**\n     * Access type of the OpenId Connect client\n     */\n    oidcAccessType?: Service.OidcAccessTypeEnum;\n\n    /**\n     * The client id of the service in MCP. Will be generated.\n     */\n    oidcClientId?: string;\n\n    /**\n     * The client secret of the service in MCP. Will be generated.\n     */\n    oidcClientSecret?: string;\n\n    /**\n     * The OpenId Connect redirect uri of service.\n     */\n    oidcRedirectUri?: string;\n\n    /**\n     * Permissions as assigned from the organization\n     */\n    permissions?: string;\n\n    updatedAt?: Date;\n\n    /**\n     * The vessel that is linked to this service.\n     */\n    vessel?: models.Vessel;\n\n}\nexport namespace Service {\n    export enum OidcAccessTypeEnum {\n        Public = <any> 'public',\n        BearerOnly = <any> 'bearer-only',\n        Confidential = <any> 'confidential'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Service.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface VesselAttribute {\n    /**\n     * Vessel attribute name\n     */\n    attributeName: VesselAttribute.AttributeNameEnum;\n\n    /**\n     * Vessel attribute value\n     */\n    attributeValue: string;\n\n    createdAt?: Date;\n\n    end?: Date;\n\n    start?: Date;\n\n    updatedAt?: Date;\n\n}\nexport namespace VesselAttribute {\n    export enum AttributeNameEnum {\n        ImoNumber = <any> 'imo-number',\n        MmsiNumber = <any> 'mmsi-number',\n        Callsign = <any> 'callsign',\n        Flagstate = <any> 'flagstate',\n        AisClass = <any> 'ais-class',\n        PortOfRegister = <any> 'port-of-register'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'service-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details.html'),\n  styles: []\n})\nexport class ServiceDetailsComponent {\n\tpublic title:string;\n\tpublic isLoading:boolean;\n\tpublic service:Service;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tconstructor(private route: ActivatedRoute, private servicesService: IdServicesService, private router:Router, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.loadService();\n\t}\n\n\tprivate loadService() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tlet version = this.route.snapshot.queryParams['serviceVersion'];\n\t\tthis.servicesService.getIdService(mrn, version).subscribe(\n\t\t\tservice => {\n\t\t\t\tthis.service = service;\n\t\t\t\tthis.title = service.name;\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateIdService(this.service.mrn, this.service.instanceVersion);\n\t}\n\n\tpublic delete() {\n\t\tthis.modalDescription = 'Are you sure you want to delete the service?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoading = true;\n\t\tthis.showModal = false;\n\t\tthis.servicesService.deleteIdService(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <service-details-view [shouldShowDelete]=\\\"true\\\" (updateAction)=\\\"update()\\\" (deleteAction)=\\\"delete()\\\" [isLoading]=\\\"isLoading\\\" [title]=\\\"title\\\" [service]=\\\"service\\\"></service-details-view>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module chunks = 0 1","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { EntityImageModel } from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Observable } from \"rxjs\";\nimport { Service } from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { IdServicesService } from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../../shared/app.constants\";\n\n@Component({\n  selector: 'service-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-list.html'),\n  styles: []\n})\nexport class ServiceListComponent implements OnInit {\n\tprivate KEY_NEW = 'KEY_NEW_SERVICE';\n\tprivate services:Array<Service>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public organization: Organization;\n  public isLoading: boolean;\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private servicesService: IdServicesService, private orgService: OrganizationsService, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadMyOrganization();\n\t  this.loadServices();\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadServices() {\n\t\tthis.servicesService.getIdServices().subscribe(\n\t\t\tpageService => {\n\t\t\t\tthis.services = pageService.content;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get services', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (entityModel.entityId === this.KEY_NEW) {\n\t\t\tthis.navigationHelper.navigateToCreateIdService();\n\t\t} else {\n\t\t\tlet serviceMrnAndVersion = entityModel.entityId.split(TOKEN_DELIMITER);\n\t\t\tthis.navigationHelper.navigateToService(serviceMrnAndVersion[0], serviceMrnAndVersion[1]);\n\t\t}\n\t}\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.services) {\n\t\t  this.services.forEach(service => {\n\t\t  \tif (service.instanceVersion) {\n\t\t\t      this.entityImageList.push({imageSourceObservable:this.createImgObservable(service), entityId:service.mrn + TOKEN_DELIMITER + service.instanceVersion, title:service.name});\n\t\t\t  }\n\t\t  });\n\t  }\n\t  if (this.authService.authState.hasPermission(AuthPermission.ServiceAdmin)) {\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new Service', isAdd:true});\n\t  }\n  }\n\n\tprivate createImgObservable(service:Service):Observable<string> {\n\t\tlet imageSrc = 'assets/img/no_service.svg';\n\t\treturn Observable.create(observer => {\n\t\t\tobserver.next(imageSrc);\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Services for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {VesselHelper} from \"../../../../shared/services/vessel-helper\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\n\n\n@Component({\n  selector: 'service-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-new.html'),\n  styles: []\n})\nexport class ServiceNewComponent implements OnInit {\n  public organization: Organization;\n  private isPrefilled = false;\n\tprivate mrn: string;\n\tprivate name: string;\n\tprivate instanceVersion: string;\n\tprivate mrnMask:string;\n\tprivate mrnPattern:string;\n\tprivate mrnPatternError:string;\n\tpublic onRegister: Function;\n\tprivate vessel: Vessel;\n\tprivate vessels: Array<Vessel>;\n\t// McForm params\n\tprivate useOIDCRedirect:boolean = true;\n\tprivate useOIDC:boolean = false;\n\tprivate oidcAccessType:OidcAccessTypeEnum = null;\n\tprivate linkToVessel: boolean = false;\n\tpublic isLoading = true;\n\tpublic isRegistering = false;\n\tpublic registerTitle = \"Register Service\";\n\tpublic registerButtonClass = \"btn btn-danger btn-raised\";\n\tpublic registerForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService, private vesselsService: VesselsService) {\n\t\tthis.mrnMask = mrnHelper.mrnMaskForInstance();\n\t\tthis.mrnPattern = mrnHelper.mrnPattern();\n\t\tthis.mrnPatternError = mrnHelper.mrnPatternError();\n\t\tthis.mrn = this.mrnMask;\n\t}\n\n\tngOnInit() {\n\t\tthis.onRegister = this.register.bind(this);\n\t\tthis.isRegistering = false;\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.activatedRoute.snapshot.queryParams['mrn'];\n\t\tlet name = this.activatedRoute.snapshot.queryParams['name'];\n\t\tlet instanceVersion = this.activatedRoute.snapshot.queryParams['instanceVersion'];\n\t\tif (name && mrn && instanceVersion) {\n\t\t\tthis.isPrefilled = true;\n\t\t\tthis.mrn = mrn;\n\t\t\tthis.name = name;\n\t\t\tthis.instanceVersion = instanceVersion;\n\t\t}\n\t\tthis.loadMyOrganization();\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.cancelCreateService();\n\t}\n\n\tpublic register() {\n\t\tthis.isRegistering = true;\n\t\tlet service:Service = {\n\t\t\tmrn: this.mrn,\n\t\t\tname: this.registerForm.value.name,\n\t\t\tinstanceVersion: this.registerForm.value.instanceVersion,\n\t\t\tpermissions: this.registerForm.value.permissions,\n\t\t\tcertDomainName: this.registerForm.value.certDomainName\n\t\t};\n\t\tif (this.useOIDC) {\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tservice.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;\n\t\t\t} else {\n\t\t\t\tservice.oidcRedirectUri = '';\n\t\t\t}\n\n\t\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\n\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\n\t\t\t\tservice.oidcAccessType = oidcAccessType;\n\t\t\t}\n\t\t} else {\n\t\t\tservice.oidcAccessType = null;\n\t\t\tservice.oidcRedirectUri = null;\n\t\t}\n\n\t\tif (this.linkToVessel) {\n\t\t\tservice.vessel = this.vessel;\n\t\t}\n\t\tthis.createService(service);\n\t}\n\n\tprivate createService(service:Service) {\n\t\tthis.servicesService.createIdService(service).subscribe(\n\t\t\tservice => {\n\t\t\t\tif (this.isPrefilled) {\n\t\t\t\t\tthis.cancel();\n\t\t\t\t} else {\n\t\t\t\t\tthis.navigationService.navigateToService(service.mrn, service.instanceVersion);\n\t\t\t\t}\n\t\t\t\tthis.isRegistering = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isRegistering = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to create service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.loadVessels();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(pageVessel => {\n\t\t\tthis.vessels = pageVessel.content;\n\t\t\tthis.generateForm();\n\t\t\tthis.isLoading = false;\n\t\t},error => {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', MCNotificationType.Error, error);\n\t\t\tthis.cancel()\n\t\t});\n\t}\n\n\tprivate shouldLinkToVessel(linkToVessel: boolean) {\n\t\tthis.linkToVessel = linkToVessel;\n\t\tthis.generateForm();\n\t}\n\n\tprivate shouldUseOIDCRedirect(value:OidcAccessTypeEnum) {\n\t\tif (value && this.oidcAccessType != value) {\n\t\t\tthis.oidcAccessType = value;\n\t\t\tthis.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;\n\t\t\tthis.generateForm();\n\t\t}\n\t}\n\n\tprivate shouldUseOIDC(useOIDC:boolean) {\n\t\tthis.useOIDC = useOIDC;\n\t\tthis.generateForm();\n\t}\n\n\tprivate generateMRN(idValue:string) {\n\t\tvar mrn = (idValue?idValue:'');\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\n\t}\n\n\tpublic isFormValid() {\n\t\tvar oidcTypeValid = true;\n\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\n\t\tif (this.useOIDC && (!oidcAccessType || oidcAccessType.toLowerCase().indexOf('undefined') >= 0)) {\n\t\t\toidcTypeValid = false;\n\t\t}\n\t\treturn this.registerForm.valid && oidcTypeValid;\n\t}\n\n\tprivate generateForm() {\n\t\tvar oldForm = this.registerForm;\n\t\tthis.registerForm = this.formBuilder.group({});\n\t\tif (!oldForm) {\n\t\t\toldForm = this.registerForm;\n\t\t}\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tif (!this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'serviceId', controlType: McFormControlType.Text, labelName: 'Service ID', placeholder: 'Enter Service ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\n\t\t\tformControl = new FormControl(oldForm.value.serviceId, formControlModel.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.generateMRN(param));\n\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModel);\n\t\t}\n\n\t\tif (this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\n\t\t\tformControl = new FormControl(this.name, formControlModel.validator);\n\t\t} else {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t\t\tformControl = new FormControl(oldForm.value.name, formControlModel.validator);\n\t\t}\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tif (this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'instanceVersion', controlType: McFormControlType.Text, labelName: 'Version', placeholder: '', isDisabled: true};\n\t\t\tformControl = new FormControl(this.instanceVersion, formControlModel.validator);\n\t\t} else {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'instanceVersion', controlType: McFormControlType.Text, labelName: 'Version', placeholder: 'Version is required', validator:Validators.required};\n\t\t\tformControl = new FormControl(oldForm.value.instanceVersion, formControlModel.validator);\n\t\t}\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(oldForm.value.permissions, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\n\t\tformControl = new FormControl(oldForm.value.certDomainName, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\n\t\tformControl = new FormControl({value: formControlModelCheckbox.state, disabled: false}, formControlModelCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\n\t\tthis.registerForm.addControl(formControlModelCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelCheckbox);\n\n\t\tif (this.useOIDC) {\n\t\t\tlet selectValues = this.selectValues();\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate, showCheckmark:true};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDCRedirect(param));\n\t\t\tthis.registerForm.addControl(formControlModelSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.required, errorText:'URI is required'};\n\t\t\t\tformControl = new FormControl(oldForm.value.oidcRedirectUri, formControlModel.validator);\n\t\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\t\t\tthis.formControlModels.push(formControlModel);\n\t\t\t}\n\t\t}\n\n\t\tlet linkToVesselCheckbox:McFormControlModelCheckbox = {state: this.linkToVessel, formGroup: this.registerForm, elementId: 'linkToVessel', controlType: McFormControlType.Checkbox, labelName: 'Link to a vessel'};\n\t\tformControl = new FormControl({value: linkToVesselCheckbox.state, disabled: false}, linkToVesselCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldLinkToVessel(param));\n\t\tthis.registerForm.addControl(linkToVesselCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(linkToVesselCheckbox);\n\n\t\tif (this.linkToVessel) {\n\t\t\tlet selectValues = this.vesselSelectValues();\n\t\t\tlet vesselSelect:McFormControlModelSelect = {selectValues: selectValues, formGroup: this.registerForm, elementId: 'vesselSelect', controlType: McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), vesselSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => {\n\t\t\t\tif (param) {\n\t\t\t\t\tthis.vessel = param;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.registerForm.addControl(vesselSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(vesselSelect);\n\t\t}\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.oidcAccessType == null});\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\n\t\tallOidcTypes.forEach(oidcType => {\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.oidcAccessType];\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\n\t\t});\n\t\treturn selectValues;\n\t}\n\n\tprivate vesselSelectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tvar defaultSelected = true;\n\t\tif (this.vessels && this.vessels.length > 0) {\n\t\t\tthis.vessels.forEach(vessel => {\n\t\t\t\tlet isSelected = false;\n\t\t\t\tif (this.vessel) {\n\t\t\t\t\tisSelected = this.vessel.mrn === vessel.mrn;\n\t\t\t\t} else {\n\t\t\t\t\tisSelected = defaultSelected;\n\t\t\t\t\tdefaultSelected = false;\n\t\t\t\t}\n\t\t\t\tselectValues.push({value: vessel, label: VesselHelper.labelForSelect(vessel), isSelected: isSelected});\n\t\t\t});\n\t\t}\n\t\treturn selectValues;\n\t}\n\n\tprivate selectedValue(selectValues:Array<SelectModel>):any {\n\t\tfor(let selectModel of selectValues) {\n\t\t\tif (selectModel.isSelected) {\n\t\t\t\treturn selectModel.value;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Service for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [hideButtons]=\\\"true\\\" [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\"></mc-form>\\n\\n      <ul *ngIf=\\\"registerForm\\\" class=\\\"btn-list clearfix\\\">\\n        <li>\\n          <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid()\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\n        </li>\\n        <li>\\n          <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {isNullOrUndefined} from \"util\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport {VesselHelper} from \"../../../../shared/services/vessel-helper\";\n\n\n@Component({\n  selector: 'service-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-update.html'),\n  styles: []\n})\nexport class ServiceUpdateComponent implements OnInit {\n\n\tpublic idService:Service;\n\tpublic showModal:boolean = false;\n\tpublic showModalVesselAtt:boolean = false;\n\tpublic modalDescription:string;\n\tprivate vessel: Vessel;\n\tprivate vessels: Array<Vessel>;\n\t// McForm params\n\tprivate useOIDC:boolean = false;\n\tprivate useOIDCRedirect:boolean = true;\n\tprivate linkToVessel:boolean = false;\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\t// Changed fields\n\tprivate permissions:string;\n\tprivate certDomainName:string;\n\tprivate oidcRedirectUri:string;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService, private vesselsService: VesselsService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadIdService();\n\t}\n\n\tprivate loadIdService() {\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\n\t\tlet version = this.activatedRoute.snapshot.queryParams['instanceVersion'];\n\t\tthis.servicesService.getIdService(mrn, version).subscribe(\n\t\t\tidService => {\n\t\t\t\tthis.idService = idService;\n\t\t\t\tthis.useOIDC = this.idService.oidcAccessType != undefined;\n\t\t\t\tthis.useOIDCRedirect = (this.idService.oidcAccessType && this.idService.oidcAccessType != OidcAccessTypeEnum.BearerOnly);\n\t\t\t\tthis.linkToVessel = !isNullOrUndefined(this.idService.vessel);\n\t\t\t\tthis.permissions = this.idService.permissions;\n\t\t\t\tthis.certDomainName = this.idService.certDomainName;\n\t\t\t\tthis.oidcRedirectUri = this.idService.oidcRedirectUri;\n\t\t\t\tif (this.linkToVessel) {\n\t\t\t\t\tthis.vessel = this.idService.vessel;\n\t\t\t\t}\n\t\t\t\tthis.loadVessels();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\n\t\t\t\tthis.navigationService.navigateToService(mrn, version);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(pageVessel => {\n\t\t\tthis.vessels = pageVessel.content;\n\t\t\tthis.generateForm();\n\t\t\tthis.isLoading = false;\n\t\t},error => {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', MCNotificationType.Error, error);\n\t\t\tthis.navigationService.navigateToService(this.idService.mrn, this.idService.instanceVersion);\n\t\t});\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.gobackFromUpdateService();\n\t}\n\n\tpublic update() {\n\t\tif (this.hasActiveCertificate()){\n\t\t\tthis.modalDescription = \"<b>Certificates</b> will be <b>invalid</b> if you update the service.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?\";\n\t\t\tthis.showModal = true;\n\t\t} else {\n\t\t\tthis.showVesselAttWarning();\n\t\t}\n\t}\n\n\tpublic showVesselAttWarning() {\n\t\tif (this.linkToVessel && this.isNewVessel()) {\n\t\t\tthis.showModal = false;\n\t\t\tthis.modalDescription = \"The linked Vessel has changed. You should change the IMO and MMSI in the Instance XML as well.<br><br>Would you still like to update?\";\n\t\t\tthis.showModalVesselAtt = true;\n\t\t} else {\n\t\t\tthis.updateForSure();\n\t\t}\n\t}\n\n\tprivate isNewVessel() : boolean {\n\t\tif (this.vessel && this.idService.vessel) {\n\t\t\treturn this.vessel.mrn !== this.idService.vessel.mrn;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate hasActiveCertificate() : boolean {\n\t\tif (this.idService.certificates && this.idService.certificates.length > 0) {\n\t\t\tfor(let certificate of this.idService.certificates) {\n\t\t\t\tif (!certificate.revoked) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t\tthis.showModalVesselAtt = false;\n\t}\n\n\tpublic updateForSure() {\n\t\tthis.isUpdating = true;\n\t\tthis.updateValues(true);\n\t\tthis.updateIdService(this.idService);\n\t}\n\n\tprivate updateValues(overwriteOidc: boolean) {\n\t\tthis.idService.name = this.updateForm.value.name;\n\t\tthis.idService.permissions = this.updateForm.value.permissions;\n\t\tthis.idService.certDomainName = this.updateForm.value.certDomainName;\n\n\t\tif (this.linkToVessel) {\n\t\t\tthis.idService.vessel = this.updateForm.value.vesselSelect;\n\t\t} else {\n\t\t\tthis.idService.vessel = null;\n\t\t}\n\n\t\tif (overwriteOidc) {\n\t\t\tif (this.useOIDC) {\n\t\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\t\tthis.idService.oidcRedirectUri = this.updateForm.value.oidcRedirectUri;\n\t\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcRedirectUri = '';\n\t\t\t\t}\n\t\t\t\tlet oidcAccessType = this.updateForm.value.oidcAccessType;\n\t\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\n\t\t\t\t\tthis.idService.oidcAccessType = oidcAccessType;\n\t\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcAccessType = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcAccessType = null;\n\t\t\t\t\tthis.idService.oidcRedirectUri = null;\n\t\t\t\t\tthis.idService.oidcClientId = null;\n\t\t\t\t\tthis.idService.oidcClientSecret = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateIdService(service:Service) {\n\t\tthis.servicesService.updateIdService(service).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.gobackFromUpdateService();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate shouldUseOIDCRedirect(value:OidcAccessTypeEnum) {\n\t\tif (value && this.idService.oidcAccessType != value) {\n\t\t\tthis.idService.oidcAccessType = value;\n\t\t\tthis.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;\n\t\t\tthis.generateForm();\n\t\t}\n\t}\n\n\tprivate shouldUseOIDC(useOIDC:boolean) {\n\t\tthis.useOIDC = useOIDC;\n\t\tthis.updateValues(false);\n\t\tthis.generateForm();\n\t}\n\n\tprivate shouldLinkToVessel(linkToVessel: boolean) {\n\t\tthis.linkToVessel = linkToVessel;\n\t\tthis.generateForm();\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.idService.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\n\t\tformControl = new FormControl(this.idService.name, formControlModel.validator);\n\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(this.permissions, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.permissions = param);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\n\t\tformControl = new FormControl(this.certDomainName, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.certDomainName = param);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.updateForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\n\t\tformControl = new FormControl({value: \"\\\"\" + formControlModelCheckbox.state + \"\\\"\", disabled: false}, formControlModelCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\n\t\tthis.updateForm.addControl(formControlModelCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelCheckbox);\n\n\t\tif (this.useOIDC) {\n\t\t\tlet selectValues = this.selectValues();\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.updateForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate, showCheckmark:true};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDCRedirect(param));\n\t\t\tthis.updateForm.addControl(formControlModelSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tformControlModel = {formGroup: this.updateForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.required, errorText:'URI is required'};\n\t\t\t\tformControl = new FormControl(this.oidcRedirectUri, formControlModel.validator);\n\t\t\t\tformControl.valueChanges.subscribe(param => this.oidcRedirectUri = param);\n\t\t\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\t\t\tthis.formControlModels.push(formControlModel);\n\t\t\t}\n\n\t\t}\n\n    let linkToVesselCheckbox:McFormControlModelCheckbox = {state: this.linkToVessel, formGroup: this.updateForm, elementId: 'linkToVessel', controlType: McFormControlType.Checkbox, labelName: 'Link to a vessel'};\n    formControl = new FormControl({value: linkToVesselCheckbox.state, disabled: false}, linkToVesselCheckbox.validator);\n    formControl.valueChanges.subscribe(param => this.shouldLinkToVessel(param));\n    this.updateForm.addControl(linkToVesselCheckbox.elementId, formControl);\n    this.formControlModels.push(linkToVesselCheckbox);\n\n    if (this.linkToVessel) {\n        let selectValues = this.vesselSelectValues();\n        let vesselSelect:McFormControlModelSelect = {selectValues: selectValues, formGroup: this.updateForm, elementId: 'vesselSelect', controlType: McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false};\n        formControl = new FormControl(this.selectedValue(selectValues));\n        formControl.valueChanges.subscribe(param => {\n            if (param) {\n                this.vessel = param;\n            }\n        });\n        this.updateForm.addControl(vesselSelect.elementId, formControl);\n        this.formControlModels.push(vesselSelect);\n    }\n\t}\n\n\tprivate selectedValue(selectValues:Array<SelectModel>):string {\n\t\tfor(let selectModel of selectValues) {\n\t\t\tif (selectModel.isSelected) {\n\t\t\t\treturn selectModel.value;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.idService.oidcAccessType == null});\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\n\t\tallOidcTypes.forEach(oidcType => {\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.idService.oidcAccessType];\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\n\t\t});\n\t\treturn selectValues;\n\t}\n\n\tprivate vesselSelectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tvar defaultSelected = true;\n\t\tif (this.vessels && this.vessels.length > 0) {\n\t\t\tthis.vessels.forEach(vessel => {\n\t\t\t\tlet isSelected = false;\n\t\t\t\tif (this.vessel) {\n\t\t\t\t\tisSelected = this.vessel.mrn === vessel.mrn;\n\t\t\t\t} else {\n\t\t\t\t\tisSelected = defaultSelected;\n\t\t\t\t\tdefaultSelected = false;\n\t\t\t\t}\n\t\t\t\tselectValues.push({value: vessel, label: VesselHelper.labelForSelect(vessel), isSelected: isSelected});\n\t\t\t});\n\t\t}\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update - {{idService?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"showVesselAttWarning()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModalVesselAtt\\\" [title]=\\\"'Update service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module chunks = 0 1","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'services',\n  template: `<router-outlet></router-outlet>`\n})\nexport class ServicesComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './services.routing';\nimport {ServicesComponent} from \"./services.component\";\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    ServicesComponent,\n    ServiceDetailsComponent,\n    ServiceListComponent,\n\t  ServiceNewComponent,\n\t  ServiceUpdateComponent\n  ],\n\texports: [\n\t\tServiceNewComponent,\n\t\tServiceUpdateComponent\n\t]\n})\nexport default class ServicesModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {ServicesComponent} from \"./services.component\";\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'services',\n    component: ServicesComponent,\n    data:{breadcrumb: 'Services'},\n    children: [\n      {\n        path: '',\n        component: ServiceListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: ServiceNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n      {\n        path: ':id',\n        component: ServiceDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: ServiceUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.routing.ts","import {EnumsHelper} from \"../../../../shared/enums-helper\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\n\nexport interface OidcAccessTypeViewModel {\n\tvalue?:string;\n\tlabel?:string;\n}\n\nexport class ServiceViewModel {\n\n\n\tpublic static getAllOidcAccessTypes(): Array<OidcAccessTypeViewModel> {\n\t\tlet models:Array<OidcAccessTypeViewModel> = [];\n\n\t\tlet keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);\n\t\tkeysAndValues.forEach(enumKeyAndValue => {\n\t\t\tlet model:OidcAccessTypeViewModel = {};\n\t\t\tmodel.value = enumKeyAndValue.value;\n\t\t\tmodel.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);\n\t\t\tmodels.push(model);\n\t\t});\n\t\treturn models;\n\t}\n\n\n\tpublic static getLabelForEnum(oidcAccessTypeEnum:OidcAccessTypeEnum):string {\n\t\tif (!oidcAccessTypeEnum) {\n\t\t\treturn '';\n\t\t}\n\t\tvar text = '';\n\t\tswitch (oidcAccessTypeEnum) {\n\t\t\tcase OidcAccessTypeEnum.BearerOnly: {\n\t\t\t\ttext = 'Bearer only';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Confidential: {\n\t\t\t\ttext = 'Confidential';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Public: {\n\t\t\t\ttext = 'Public';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault : {\n\t\t\t\ttext = OidcAccessTypeEnum[oidcAccessTypeEnum];\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = ''+ oidcAccessTypeEnum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { FileHelperService } from \"../../../../../shared/file-helper.service\";\nimport { Design } from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport { DesignsService } from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { SpecificationsService } from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport { Instance } from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\nimport { InstancesService } from \"../../../../../backend-api/service-registry/services/instances.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { SrViewModelService } from \"../../../shared/services/sr-view-model.service\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ServiceRegistrySearchRequest } from \"../../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\nimport { SrSearchRequestsService } from \"../../../shared/services/sr-search-requests.service\";\nimport { EndorsementsService } from \"../../../../../backend-api/endorsements/services/endorsements.service\";\nimport { SHOW_ENDORSEMENTS } from \"../../../../../shared/app.constants\";\nimport { Endorsement } from \"../../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport { Observable } from \"rxjs/Observable\";\n\nconst SEARCH_KEY = 'DesignDetailsComponent';\n\n@Component({\n  selector: 'design-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./design-details.html'),\n  styles: []\n})\nexport class DesignDetailsComponent {\n  public design: Design;\n  public instances: Array<Instance>;\n  public title:string;\n  public labelValues:Array<LabelValueModel>;\n  public isLoadingInstances: boolean;\n  public isLoadingDesign: boolean;\n  public onCreate: Function;\n  public onGotoSpec: Function;\n  public onGotoInstance: Function;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tpublic showModalNoDelete:boolean = false;\n\tpublic modalDescriptionNoDelete:string;\n\n\t// Endorsements\n\tpublic isLoadingEndorsements:boolean;\n\tpublic isEndorsing:boolean;\n\tpublic showEndorsements:boolean;\n\tpublic isEndorsedByMyOrg:boolean;\n\tpublic endorsements:Array<Endorsement> = [];\n\tpublic endorseMainSwitch = SHOW_ENDORSEMENTS;\n\n\t// Search\n\tpublic isSearchingInstances = false;\n\tpublic searchKey = SEARCH_KEY;\n\tprivate initialSearchRequest: ServiceRegistrySearchRequest;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private endorsementsService:EndorsementsService, private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private instancesService: InstancesService, private specificationsService: SpecificationsService, private notifications: MCNotificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService, private orgsService: OrganizationsService) {\n\n  }\n\n  ngOnInit() {\n    this.onCreate = this.createInstance.bind(this);\n    this.onGotoSpec = this.gotoSpecification.bind(this);\n    this.onGotoInstance = this.gotoInstance.bind(this);\n    this.isLoadingDesign = true;\n    this.isLoadingInstances = true;\n    this.title = 'Loading ...';\n\t  let designId = this.route.snapshot.params['id'];\n\t  let version = this.route.snapshot.queryParams['designVersion'];\n    this.loadDesign(designId, version);\n\t  if (SHOW_ENDORSEMENTS) {\n\t\t  this.loadEndorsements(designId, version);\n\t  }\n  }\n\n  public downloadXml() {\n    this.fileHelperService.downloadXml(this.design.designAsXml);\n  }\n\n  public downloadDoc() {\n    this.fileHelperService.downloadDoc(this.design.designAsDoc);\n  }\n\n  private loadDesign(designId:string, version:string) {\n    this.designsService.getDesign(designId, version).subscribe(\n      design => {\n        this.title = design.name;\n        this.design = design;\n\t      this.loadOrganizationName();\n        this.loadInstances();\n      },\n      err => {\n        // TODO: make this as a general component\n        if (err.status == 404) {\n          this.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\n        }\n        this.title = 'Error while loading';\n        this.isLoadingDesign = false;\n        this.isLoadingInstances = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n\n\tprivate loadOrganizationName() {\n\t\tthis.orgsService.getOrganizationName(this.design.organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForDesign(this.design, organizationName);\n\t\t\t\tthis.generateLabelValuesForSpecification();\n\t\t\t\tthis.isLoadingDesign = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.design, '');\n\t\t\t\tthis.generateLabelValuesForSpecification();\n\t\t\t\tthis.isLoadingDesign = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private loadInstances() {\n\t  let searchRequest = this.searchRequestsService.getSearchRequest(SEARCH_KEY);\n\t  this.initialSearchRequest = searchRequest;\n\t  this.searchDesigns(searchRequest);\n  }\n\n  private generateLabelValuesForSpecification() {\n    if (this.design.specifications && this.design.specifications.length > 0) {\n      let plur = (this.design.specifications.length > 1 ? 's' : '');\n      var label = 'Implemented specification' + plur;\n      this.design.specifications.forEach((specification) => {\n        this.labelValues.push({label: label, valueHtml: specification.name + \" - \" + specification.version, linkFunction: this.onGotoSpec, linkValue: [specification.specificationId,specification.version]});\n        label = \"\";\n      });\n    }\n  }\n\n  private createInstance() {\n    this.navigationHelperService.navigateToCreateInstance(this.design.designId, this.design.version);\n  }\n\n  private gotoSpecification(linkValue: any) {\n    try {\n      this.navigationHelperService.navigateToOrgSpecification(linkValue[0], linkValue[1]);\n    } catch ( error ) {\n      this.notifications.generateNotification('Error', 'Error when trying to go to specification', MCNotificationType.Error, error);\n    }\n  }\n\n  private gotoInstance(index:number) {\n    this.navigationHelperService.navigateToOrgInstance(this.instances[index].instanceId, this.instances[index].version);\n  }\n\tprivate isMyOrg():boolean {\n\t\treturn this.design.organizationId === this.authService.authState.orgMrn;\n\t}\n\n\tpublic shouldDisplayDelete():boolean {\n\t\treturn this.isServiceAdminForOrg() && !this.isLoadingInstances;\n\t}\n\n\tprivate hasInstances():boolean {\n\t\treturn this.instances && this.instances.length > 0;\n\t}\n\n\tprivate delete() {\n\t\tif (this.hasInstances()) {\n\t\t\tthis.modalDescriptionNoDelete = \"Design can't be deleted with active Instances.<br><br>You must first delete the Instances.\";\n\t\t\tthis.showModalNoDelete = true;\n\t\t} else {\n\t\t\tthis.modalDescription = 'Do you want to delete the design?';\n\t\t\tthis.showModal = true;\n\t\t}\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t\tthis.showModalNoDelete = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoadingDesign = true;\n\t\tthis.showModal = false;\n\t\tthis.designsService.deleteDesign(this.design).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.deleteEndorsements();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingDesign = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete design', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate isEndorseAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n\n\tprivate isServiceAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate isServiceAdminForOrg():boolean {\n\t\treturn (this.authService.authState.hasPermission(AuthPermission.ServiceAdmin) && this.isMyOrg()) || this.authService.authState.hasPermission(AuthPermission.SiteAdmin);\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.isServiceAdminForOrg();\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelperService.navigateToUpdateDesign(this.design.designId, this.design.version);\n\t}\n\n\t// Endorsements\n\tprivate deleteEndorsements() {\n\t\tif (this.endorsements && this.endorsements.length > 0) {\n\t\t\tthis.endorsementsService.removeAllEndorsementsOfDesign(this.design.designId).subscribe(\n\t\t\t\t() => {\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgDesign('', '');\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete endorsements of design', MCNotificationType.Error, err);\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgDesign('', '');\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.navigationHelperService.navigateToOrgDesign('', '');\n\t\t}\n\t}\n\n\tprivate loadEndorsements(designId:string, designVersion) {\n\t\tthis.isLoadingEndorsements = true;\n\t\tlet parallelObservables = [];\n\n\t\tparallelObservables.push(this.endorsementsService.isDesignEndorsedByMyOrg(designId,designVersion).take(1));\n\t\tparallelObservables.push(this.endorsementsService.getEndorsementsForDesign(designId,designVersion).take(1));\n\n\t\treturn Observable.forkJoin(parallelObservables).subscribe(\n\t\t\tresultArray => {\n\t\t\t\tlet isEndorsedByMyOrg:any = resultArray[0];\n\t\t\t\tlet pageEndorsement: any = resultArray[1];\n\t\t\t\tthis.endorsements = pageEndorsement.content;\n\t\t\t\tthis.isEndorsedByMyOrg = isEndorsedByMyOrg;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.showEndorsements = true;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.showEndorsements = false;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get endorsements for design', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic endorseToggle() {\n\t\tif (this.isEndorsedByMyOrg) {\n\t\t\tthis.removeEndorse();\n\t\t} else {\n\t\t\tthis.endorse();\n\t\t}\n\t}\n\n\tprivate endorse() {\n\t\tthis.isEndorsing = true;\n\t\tvar specificationId = '';\n\t\tvar specificationVersion = '';\n\t\tif (this.design.specifications && this.design.specifications.length > 0) {\n\t\t\t// TODO handle more specifications when endorse api has the functionality\n\t\t\tspecificationId = this.design.specifications[0].specificationId;\n\t\t\tspecificationVersion = this.design.specifications[0].version;\n\t\t}\n\t\tthis.endorsementsService.endorseDesign(this.design.designId, this.design.version, specificationId, specificationVersion).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = true;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.design.designId, this.design.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to endorse design', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate removeEndorse() {\n\t\tthis.isEndorsing = true;\n\t\tthis.endorsementsService.removeEndorsementOfDesign(this.design.designId, this.design.version).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = false;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.design.designId, this.design.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to remove endorse of design', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic shouldDisplayEndorsementButton():boolean {\n\t\treturn SHOW_ENDORSEMENTS && this.isEndorseAdmin() && this.showEndorsements;\n\t}\n\n\t// Search\n\tpublic search(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.isSearchingInstances = true;\n\t\tthis.searchDesigns(searchRequest);\n\t}\n\n\tpublic searchDesigns(searchRequest:ServiceRegistrySearchRequest) {\n\t\tthis.instancesService.searchInstancesForDesign(searchRequest, this.design.designId, this.design.version).subscribe(\n\t\t\tinstances => {\n\t\t\t\tthis.instances = instances;\n\t\t\t\tthis.isLoadingInstances = false;\n\t\t\t\tthis.isSearchingInstances = false;\n\t\t\t\tthis.initialSearchRequest = searchRequest;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.searchRequestsService.addSearchRequest(SEARCH_KEY, this.initialSearchRequest);\n\t\t\t\tthis.isLoadingInstances = false;\n\t\t\t\tthis.isSearchingInstances = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to search instances', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-details/design-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-label-value-table [isLoading]=\\\"isLoadingDesign\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"design && !isLoadingDesign\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"design.designAsDoc\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\n        </li>\\n        <li *ngIf=\\\"design.designAsXml\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\n        </li>\\n        <li *ngIf=\\\"showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Design</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Design</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayEndorsementButton() && !isLoadingInstances\\\">\\n          <mc-endorse-button [isEndorsedByMyOrg]=\\\"isEndorsedByMyOrg\\\" [isEndorsing]=\\\"isEndorsing\\\"[title]=\\\"'Design'\\\" (onEndorse)=\\\"endorseToggle()\\\"></mc-endorse-button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"endorseMainSwitch\\\">\\n      <endorsed-by-list [title]=\\\"'Organizations endorsing the Design (' + title + ')'\\\" [endorsements]=\\\"endorsements\\\" [isLoading]=\\\"isLoadingEndorsements\\\"></endorsed-by-list>\\n    </div>\\n\\n    <ba-card title=\\\"Instances implementing the Design ({{design?.name}})\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <div *ngIf=\\\"!isLoadingInstances\\\">\\n        <service-registry-search [showKeywords]=\\\"false\\\" [searchTitle]=\\\"'Instance search filters'\\\" [searchKey]=\\\"searchKey\\\" [isSearching]=\\\"isSearchingInstances\\\" [showEndorsement]=\\\"true\\\" [preFilterMyOrg]=\\\"false\\\" (onSearch)=\\\"search($event)\\\"></service-registry-search>\\n\\n        <div class=\\\"separator\\\"></div>\\n      </div>\\n      <div class=\\\"create-loading-wrapper\\\">\\n        <mc-create-button [isAdmin]=\\\"isServiceAdmin()\\\" *ngIf=\\\"!isLoadingInstances\\\" title=\\\"Register new Instance\\\" [onClick]=\\\"onCreate\\\" ></mc-create-button>\\n        <sk-fading-circle-small class=\\\"create-loading\\\" [isRunning]=\\\"isSearchingInstances\\\"></sk-fading-circle-small>\\n      </div>\\n      <instances-table [instances]=\\\"instances\\\" [isLoading]=\\\"isLoadingInstances\\\" [onRowClick]=\\\"onGotoInstance\\\"></instances-table>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete Design'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n<mc-modal (onOk)=\\\"cancelModal()\\\" [show]=\\\"showModalNoDelete\\\" [title]=\\\"'Delete Design'\\\" [description]=\\\"modalDescriptionNoDelete\\\" [okClass]=\\\"'btn btn-default btn-raised'\\\" [okTitle]=\\\"'OK'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-details/design-details.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-details/design-details.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport {ServiceRegistrySearchRequest} from \"../../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\nimport {SrSearchRequestsService} from \"../../../shared/services/sr-search-requests.service\";\n\nconst SEARCH_KEY = 'DesignListComponent';\n\n@Component({\n  selector: 'design-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./design-list.html'),\n  styles: []\n})\nexport class DesignListComponent implements OnInit {\n\tpublic searchKey = SEARCH_KEY;\n\tprivate initialSearchRequest: ServiceRegistrySearchRequest;\n\tpublic isSearching = false;\n  public organization: Organization;\n  public designs: Array<Design>;\n  public isLoading: boolean;\n  public onGotoDesign: Function;\n\tpublic cardTitle:string;\n  constructor(private searchRequestsService:SrSearchRequestsService, private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private designsService: DesignsService) {\n  }\n\n  ngOnInit() {\n\t  this.cardTitle = 'Technical Designs';\n    this.onGotoDesign = this.gotoDesign.bind(this);\n\n    this.isLoading = true;\n    this.loadMyOrganization();\n    this.loadDesigns();\n  }\n\n\tpublic search(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.isSearching = true;\n\t\tthis.searchDesigns(searchRequest);\n\t}\n\n\tprivate searchDesigns(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.designsService.searchDesigns(searchRequest).subscribe(\n\t\t\tdesigns => {\n\t\t\t\tthis.designs = designs;\n\t\t\t\tthis.isSearching = false;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.initialSearchRequest = searchRequest;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.searchRequestsService.addSearchRequest(SEARCH_KEY, this.initialSearchRequest);\n\t\t\t\tthis.isSearching = false;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to search designs', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private loadDesigns() {\n\t  let searchRequest = this.searchRequestsService.getSearchRequest(SEARCH_KEY);\n\t  this.initialSearchRequest = searchRequest;\n\t  if (searchRequest) {\n\t\t  this.searchDesigns(searchRequest);\n\t  } else {\n\t\t  this.designsService.getDesignsForMyOrg().subscribe(\n\t\t\t  designs => {\n\t\t\t\t  this.designs = designs;\n\t\t\t\t  this.isLoading = false;\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  this.isLoading = false;\n\t\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get designs', MCNotificationType.Error, err);\n\t\t\t  }\n\t\t  );\n\t  }\n  }\n\n  private loadMyOrganization() {\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n      },\n      err => {\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private gotoDesign(index:number) {\n    this.router.navigate([this.designs[index].designId], {queryParams: { designVersion: this.designs[index].version}, relativeTo: this.route })\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-list/design-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <service-registry-search [searchTitle]=\\\"'Search filters'\\\" [searchKey]=\\\"searchKey\\\" [isSearching]=\\\"isSearching\\\" [showEndorsement]=\\\"true\\\" [preFilterMyOrg]=\\\"true\\\" (onSearch)=\\\"search($event)\\\"></service-registry-search>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <designs-table [designs]=\\\"designs\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoDesign\\\"></designs-table>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-list/design-list.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-list/design-list.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {XmlParserService} from \"../../../../../shared/xml-parser.service\";\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {DesignXmlParser} from \"../../../shared/services/design-xml-parser.service\";\n\n@Component({\n  selector: 'design-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./design-new.html'),\n  styles: []\n})\nexport class DesignNewComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\n\tpublic labelValuesParsed:Array<LabelValueModel>;\n\tprivate parsedDesign:Design;\n\n\tpublic hasError: boolean = false;\n\tpublic errorText: string;\n\n  public organization: Organization;\n  public labelValuesSpecification:Array<LabelValueModel>;\n  public captionXml = 'Upload Design XML file';\n  public captionDoc = 'Upload Design Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public requiredTextXml = 'You need to upload XML file';\n  public requiredTextDoc = 'You need to upload a DOCX, ODT or PDF file';\n  public isFormValid = false;\n  public isLoading = true;\n\n  public isRegistering = false;\n  public registerTitle = \"Register Design\";\n  public registerButtonClass = \"btn btn-danger btn-raised\";\n  public onRegister: Function;\n\n  private specification:Specification;\n  private xml:Xml;\n  private doc:Doc;\n\n  constructor(private xmlParser: DesignXmlParser, private mrnHelper: MrnHelperService, private activatedRoute: ActivatedRoute, private xmlParserService: XmlParserService, private viewModelService: SrViewModelService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private designsService: DesignsService, private orgService: OrganizationsService, private specificationsService: SpecificationsService) {\n  }\n\n  ngOnInit() {\n    this.onRegister = this.register.bind(this);\n    this.isRegistering = false;\n    this.isLoading = true;\n    this.loadMyOrganization();\n    this.loadSpecification();\n\t  this.updateUI();\n  }\n\n  public calculateFormValid() {\n    this.isFormValid = this.xml != null;\n  }\n\n  public onUploadDoc(file: Doc) {\n    this.doc = file;\n    this.calculateFormValid();\n  }\n\n  public onUploadXml(file: Xml) {\n\t  if (file && this.isXmlValid(file)) {\n\t\t  this.xml = file;\n\t  } else {\n\t\t  this.resetXmlFile();\n\t  }\n    this.calculateFormValid();\n\t  this.updateUI();\n  }\n\n\tprivate isXmlValid(file: Xml) : boolean {\n\t\ttry {\n\t\t\tlet mrn = this.xmlParser.getMrn(file);\n\t\t\tlet isValid = this.mrnHelper.checkMrnForDesign(mrn);\n\t\t\tif (!isValid) {\n\t\t\t\tthis.errorText = \"The ID in the XML-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\n\t\t\t\t\t+ this.mrnHelper.mrnMaskForDesign() + \"'ID'<BR>\"\n\t\t\t\t\t+ \"'ID'=\" + this.mrnHelper.mrnPatternError();\n\t\t\t} else {\n\t\t\t\tlet specificationMrn = this.xmlParser.getMrnForSpecificationInDesign(file);\n\t\t\t\tlet specificationVersion = this.xmlParser.getVersionForSpecificationInDesign(file);\n\t\t\t\tisValid = (specificationMrn === this.specification.specificationId) && (specificationVersion === this.specification.version);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tthis.errorText  = \"The MRN and/or version referencing the Specification in the XML, doesn't match the MRN and/or version of the chosen Specification.<BR><BR>\"\n\t\t\t\t\t\t+ \"Chosen Specification: \" + this.specification.specificationId + \", version: \" + this.specification.version + \"<BR>\"\n\t\t\t\t\t\t+ \"Xml-parsed Specification: \" + specificationMrn + \", version: \" + specificationVersion + \"<BR>\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.hasError = !isValid;\n\t\t\treturn isValid;\n\t\t} catch ( error ) {\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n  public cancel() {\n    this.navigationService.cancelCreateDesign();\n  }\n\n  public register() {\n    this.isRegistering = true;\n\n\t  this.createDesign(this.parsedDesign);\n  }\n\n  private createDesign(design:Design) {\n    this.designsService.createDesign(design).subscribe(\n      design => {\n        this.navigationService.navigateToOrgDesign(design.designId, design.version);\n        this.isRegistering = false;\n      },\n      err => {\n        this.isRegistering = false;\n        this.notifications.generateNotification('Error', 'Error when trying to create design', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private loadMyOrganization() {\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n        this.calculateFormValid();\n      },\n      err => {\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private loadSpecification() {\n    let specificationId = this.activatedRoute.snapshot.queryParams['specificationId'];\n    let version = this.activatedRoute.snapshot.queryParams['specificationVersion'];\n    this.specificationsService.getSpecification(specificationId, version).subscribe(\n      specification => {\n        this.specification = specification;\n        this.loadOrganizationName();\n      },\n      err => {\n        this.isLoading = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get specification', MCNotificationType.Error, err);\n      }\n    );\n  }\n\tprivate loadOrganizationName() {\n\t\tthis.orgService.getOrganizationName(this.specification.organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tthis.labelValuesSpecification = this.viewModelService.generateLabelValuesForSpecification(this.specification, organizationName);\n\t\t\t\tthis.calculateFormValid();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.labelValuesSpecification = this.viewModelService.generateLabelValuesForSpecification(this.specification, '');\n\t\t\t\tthis.calculateFormValid();\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate resetXmlFile(){\n\t\tthis.xml = null;\n\t\tthis.fileUploadXml.resetFileSelection();\n\t}\n\n\tprivate updateUI() {\n\t\tif (this.xml) {\n\t\t\tthis.parseDesign();\n\t\t} else {\n\t\t\tthis.parsedDesign = null;\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate parseDesign() {\n\t\tthis.parsedDesign = null;\n\t\ttry {\n\t\t\tvar design:Design = {};\n\t\t\tdesign.designAsXml = this.xml;\n\t\t\tdesign.designAsDoc = this.doc;\n\t\t\tdesign.name = this.xmlParser.getName(this.xml);\n\t\t\tdesign.description = this.xmlParser.getDescription(this.xml);\n\t\t\tdesign.designId = this.xmlParser.getMrn(this.xml);\n\t\t\tdesign.status = this.xmlParser.getStatus(this.xml);\n\t\t\tdesign.organizationId = this.organization.mrn;\n\t\t\tdesign.version = this.xmlParser.getVersion(this.xml);\n\n\t\t\tdesign.specifications = [this.specification];\n\n\t\t\tthis.parsedDesign = design;\n\t\t} catch ( error ) {\n\t\t\tthis.isRegistering = false;\n\t\t\tthis.resetXmlFile();\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t} finally {\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate setupLableValuesParsed() {\n\t\tthis.labelValuesParsed = [];\n\t\tthis.labelValuesParsed.push({label: 'Upload XML', valueHtml: ''});\n\t\tif (this.organization && this.parsedDesign) {\n\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForDesign(this.parsedDesign, this.organization.name);\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-new/design-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Design for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5 *ngIf=\\\"specification\\\">Registering a design for this specification</h5>\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValuesSpecification\\\"></mc-label-value-table>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <div *ngIf=\\\"specification\\\">\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" [requiredText]=\\\"requiredTextDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"errorText | undefined | sanitizeHtml\\\"></div>\\n          <ul class=\\\"btn-list clearfix\\\">\\n            <li>\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\n            </li>\\n            <li>\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n            </li>\\n          </ul>\\n        </form>\\n\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValuesParsed\\\"></mc-label-value-table>\\n      </div>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!specification && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-new/design-new.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-new/design-new.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n    McFormControlModel, McFormControlModelSelect,\n    McFormControlType, SelectModel\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {FormGroup, FormControl, FormBuilder} from \"@angular/forms\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {Observable} from \"rxjs\";\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport {DesignXmlParser} from \"../../../shared/services/design-xml-parser.service\";\n\n@Component({\n  selector: 'design-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./design-update.html'),\n  styles: []\n})\nexport class DesignUpdateComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\tpublic hasError: boolean = false;\n\tpublic errorText: string;\n\n\tpublic labelValuesParsed:Array<LabelValueModel>;\n\tprivate parsedDesign:Design;\n\n  public design: Design;\n\n  public labelValues:Array<LabelValueModel>;\n  public captionXml = 'Upload Design XML file';\n  public captionDoc = 'Upload Design Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public isLoading = true;\n\n  public isUpdating = false;\n  public updateTitle = \"Update Design\";\n  public isFormChanged = false;\n  private xml:Xml;\n  private doc:Doc;\n\n\tprivate designIdFromRoute:string;\n\tprivate versionFromRoute:string;\n\tprivate status:string = '';\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private orgsService:OrganizationsService, private viewModelService: SrViewModelService, private formBuilder: FormBuilder, private xmlParser: DesignXmlParser, private mrnHelper: MrnHelperService, private router: Router, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService, private designService: DesignsService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadDesign();\n\t\tthis.updateUI();\n\t}\n\n\tpublic setFormChanged() {\n\t\tvar changed = false;\n\t\tif (this.xml || this.doc) {\n\t\t\tchanged = true;\n\t\t} else if (this.status != this.design.status) {\n\t\t\tchanged = true;\n\t\t}\n\t\tthis.isFormChanged = changed;\n\t}\n\n\tpublic onUploadDoc(file: Doc) {\n\t\tthis.doc = file;\n\t\tthis.hasError = false;\n\t\tthis.setFormChanged();\n\t\tthis.generateForm();\n\t}\n\n\tpublic onUploadXml(file: Xml) {\n\t\tthis.hasError = false;\n\t\tif (file) {\n\t\t\tthis.isXmlValid(file).subscribe(isValid => {\n\t\t\t\tthis.hasError = !isValid;\n\t\t\t\tif (isValid) {\n\t\t\t\t\tthis.xml = file;\n\t\t\t\t} else {\n\t\t\t\t\tthis.resetXmlFile();\n\t\t\t\t}\n\t\t\t\tthis.setFormChanged();\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.updateUI();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.hasError = false;\n\t\t\tthis.resetXmlFile();\n\t\t\tthis.setFormChanged();\n\t\t\tthis.generateForm();\n\t\t\tthis.updateUI();\n\t\t}\n\t}\n\n\tprivate resetXmlFile() {\n\t\tthis.status = this.design.status;\n\t\tthis.xml = null;\n\t\tthis.fileUploadXml.resetFileSelection();\n\t\tthis.updateUI();\n\t}\n\n\tprivate updateUI() {\n\t\tif (this.xml) {\n\t\t\tthis.parseDesign();\n\t\t} else {\n\t\t\tthis.parsedDesign = null;\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate isXmlValid(file: Xml) : Observable<boolean> {\n\t\ttry {\n\t\t\tlet specificationMrn = this.xmlParser.getMrnForSpecificationInDesign(file);\n\t\t\tlet specificationVersion = this.xmlParser.getVersionForSpecificationInDesign(file);\n\t\t\tlet isSpecificationTheSame = this.isSpecificationSameAsBefore(specificationMrn, specificationVersion);\n\t\t\tif (isSpecificationTheSame) {\n\t\t\t\tlet parseValid = this.parseDisplayValues(file);\n\t\t\t\treturn Observable.of(parseValid);\n\t\t\t} else {\n\t\t\t\treturn Observable.create(observer => {\n\t\t\t\t\tthis.specificationsService.getSpecification(specificationMrn,specificationVersion).subscribe(\n\t\t\t\t\t\tspecification => {\n\t\t\t\t\t\t\tthis.design.specifications = [specification];\n\t\t\t\t\t\t\tlet parseValid = this.parseDisplayValues(file);\n\t\t\t\t\t\t\tobserver.next(parseValid);\n\t\t\t\t\t\t},\n\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t\t\t\tthis.errorText  = \"The MRN and version referencing the Specification in the XML, doesn't match any Specifications in Service Registry<BR><BR>\"\n\t\t\t\t\t\t\t\t\t+ \"Xml-parsed Specification: \" + specificationMrn + \", version: \" + specificationVersion + \"<BR>\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.errorText  = \"Error when trying to validate implemented specification.<BR>\";\n\t\t\t\t\t\t\t\t// If error isn't \"Not found\" then another error occured and we can't proceed\n\t\t\t\t\t\t\t\tthis.notifications.generateNotification('Error when trying to validate implemented specification: ', err.message, MCNotificationType.Error, err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tobserver.next(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.errorText  = \"Error in XML.<BR>\";\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\treturn Observable.of(false);\n\t\t}\n\t}\n\n\tprivate parseDesign() {\n\t\tthis.parsedDesign = null;\n\t\ttry {\n\t\t\tif (this.xml) {\n\t\t\t\tvar design:Design = _.cloneDeep(this.design);\n\t\t\t\t// Already contains an XML, so just update the values and not the ID\n\t\t\t\tdesign.designAsXml.content = this.xml.content;\n\t\t\t\tdesign.designAsXml.contentContentType = this.xml.contentContentType;\n\t\t\t\tdesign.designAsXml.name = this.xml.name;\n\t\t\t\tdesign.name = this.xmlParser.getName(this.xml);\n\t\t\t\tdesign.description = this.xmlParser.getDescription(this.xml);\n\t\t\t\tdesign.status = this.xmlParser.getStatus(this.xml);\n\t\t\t\tdesign.version = this.xmlParser.getVersion(this.xml);\n\t\t\t\tthis.parsedDesign = design;\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.isUpdating = false;\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\tthis.resetXmlFile();\n\t\t} finally {\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate parseDisplayValues(file:Xml):boolean {\n\t\tthis.status = this.xmlParser.getStatus(file);\n\t\tlet parsedMrn = this.xmlParser.getMrn(file);\n\t\tlet parsedVersion = this.xmlParser.getVersion(file);\n\t\tif (parsedMrn != this.design.designId || parsedVersion != this.design.version) {\n\t\t\tthis.errorText  = \"The MRN and Version in the XML are not the same as the MRN and Version of this Design. If the MRN or Version needs to be changed, please create a NEW Design instead of updating an existing.<BR><BR>\"\n\t\t\t\t+ \"Xml-parsed MRN: \" + parsedMrn + \"<BR>\"\n\t\t\t\t+ \"Xml-parsed Version: \" + parsedVersion + \"<BR>\";\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate setupLableValuesParsed() {\n\t\tthis.labelValuesParsed = [];\n\t\tthis.labelValuesParsed.push({label: 'Upload XML', valueHtml: ''});\n\t\tif (this.parsedDesign) {\n\t\t\tthis.orgsService.getOrganizationName(this.design.organizationId).subscribe(\n\t\t\t\torganizationName => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForDesign(this.parsedDesign, organizationName);\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForDesign(this.parsedDesign, '');\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate isSpecificationSameAsBefore(specificationMrn:string, specificationVersion:string) : boolean {\n\t\ttry {\n\t\t\tlet specificationMrnFromDesign = this.xmlParser.getMrnForSpecificationInDesign(this.design.designAsXml);\n\t\t\tlet specificationVersionFromDesign = this.xmlParser.getVersionForSpecificationInDesign(this.design.designAsXml);\n\t\t\tlet isSameMrn = specificationMrnFromDesign === specificationMrn;\n\t\t\tlet isSameVersion = specificationVersionFromDesign === specificationVersion;\n\t\t\treturn isSameMrn && isSameVersion;\n\t\t} catch ( error ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.navigateToOrgDesign(this.designIdFromRoute, this.versionFromRoute);\n\t}\n\n\tpublic update() {\n\t\tthis.isUpdating = true;\n\t\tif (this.xml || this.doc) {\n\t\t\tif (this.xml) {\n\t\t\t\tthis.design = this.parsedDesign;\n\t\t\t}\n\t\t\tif (this.doc) {\n\t\t\t\tif (this.design.designAsDoc) { // Already contains a Doc, so just update the values and not the ID\n\t\t\t\t\tthis.design.designAsDoc.filecontent = this.doc.filecontent;\n\t\t\t\t\tthis.design.designAsDoc.filecontentContentType = this.doc.filecontentContentType;\n\t\t\t\t\tthis.design.designAsDoc.name = this.doc.name;\n\t\t\t\t} else {\n\t\t\t\t\tthis.design.designAsDoc = this.doc;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateDesign();\n\t\t} else {\n\t\t\tthis.status = this.updateForm.value.status;\n\t\t\tthis.updateStatus();\n\t\t}\n\t}\n\n\tprivate updateStatus() {\n\t\tthis.designService.updateStatus(this.design, this.status).subscribe(_ => {\n\t\t\t\tthis.navigationService.navigateToOrgDesign(this.design.designId, this.design.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update status of design', MCNotificationType.Error, err);\n\t\t\t});\n\t}\n\n\tprivate updateDesign() {\n\t\tlet updateDoc = this.doc != null;\n\t\tlet updateXml = this.xml != null;\n\t\tthis.designService.updateDesign(this.design, updateDoc, updateXml).subscribe(_ => {\n\t\t\t\tthis.navigationService.navigateToOrgDesign(this.design.designId, this.design.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update design', MCNotificationType.Error, err);\n\t\t\t});\n\t}\n\n\tprivate loadDesign() {\n\t\tthis.designIdFromRoute = this.activatedRoute.snapshot.params['id'];\n\t\tthis.versionFromRoute = this.activatedRoute.snapshot.queryParams['designVersion'];\n\t\tthis.designService.getDesign(this.designIdFromRoute, this.versionFromRoute).subscribe(\n\t\t\tdesign => {\n\t\t\t\tthis.design = design;\n\t\t\t\tthis.status = this.design.status;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// TODO: make this as a general component\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.router.navigate(['/error404'], {relativeTo: this.activatedRoute, replaceUrl: true })\n\t\t\t\t}\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.design.designId});\n\t\tthis.labelValues.push({label: 'Name', valueHtml: this.design.name});\n\t\tthis.labelValues.push({label: 'Version', valueHtml: this.design.version});\n\t}\n\n\tprivate setStatus(status:string) {\n\t\tthis.status = status;\n\t\tthis.setFormChanged();\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModelSelect;\n\t\tlet disableStatus = this.xml != null || this.doc != null;\n\t\t// TODO Get dynamically from XSD\n\t\tlet statusSelect:Array<SelectModel> = [{label: \"provisional\", value: \"provisional\", isSelected: false},\n\t\t\t{label: \"released\", value: \"released\", isSelected: false}, {label: \"deprecated\", value: \"deprecated\", isSelected: false},\n\t\t\t{label: \"deleted\", value: \"deleted\", isSelected: false}];\n\t\tstatusSelect.forEach(status => \t{if (status.value === this.status) status.isSelected = true});\n\t\tif (disableStatus) {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: '', isDisabled: disableStatus};\n\t\t} else {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: ''};\n\t\t}\n\t\tvar formControl = new FormControl(this.status, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.setStatus(param));\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-update/design-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Design - {{design?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5>Updating Design</h5>\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <div *ngIf=\\\"design\\\">\\n        <div class=\\\"important-notice-big\\\">\\n          If only the <span>status</span> needs to be updated, leave the <span>XML</span> and <span>Document</span> fields empty.<br>\\n          <br>\\n          If a new XML-file is uploaded the <span>status</span> will be parsed from the XML.\\n        </div>\\n        <div class=\\\"separator\\\"></div>\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"errorText | undefined | sanitizeHtml\\\"></div>\\n          <mc-form [isFormValid]=\\\"isFormChanged\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n        </form>\\n\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValuesParsed\\\"></mc-label-value-table>\\n      </div>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!design && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-update/design-update.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-update/design-update.html\n// module chunks = 1","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'designs',\n  template: `<router-outlet></router-outlet>`\n})\nexport class DesignsComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './designs.routing';\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {DesignsComponent} from \"./designs.component\";\nimport {DesignListComponent} from \"./components/design-list/design-list.component\";\nimport {DesignDetailsComponent} from \"./components/design-details/design-details.component\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {DesignNewComponent} from \"./components/design-new/design-new.component\";\nimport {DesignUpdateComponent} from \"./components/design-update/design-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    DesignsComponent,\n    DesignListComponent,\n    DesignDetailsComponent,\n    DesignNewComponent,\n\t  DesignUpdateComponent\n  ]\n})\nexport default class DesignsModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {DesignsComponent} from \"./designs.component\";\nimport {DesignListComponent} from \"./components/design-list/design-list.component\";\nimport {DesignDetailsComponent} from \"./components/design-details/design-details.component\";\nimport {DesignNewComponent} from \"./components/design-new/design-new.component\";\nimport {DesignUpdateComponent} from \"./components/design-update/design-update.component\";\n\n// noinspection TypeScriptValidateTypes\nexport const designRoutes: Routes = [\n  {\n    path: 'designs',\n    component: DesignsComponent,\n    data:{breadcrumb: 'Designs'},\n    children: [\n      {\n        path: '',\n        component: DesignListComponent\n      },\n      {\n        path: 'register',\n        component: DesignNewComponent,\n        data:{breadcrumb: 'Register'}\n      },\n      {\n        path: ':id',\n        component: DesignDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: DesignUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(designRoutes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.routing.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { FileHelperService } from \"../../../../../shared/file-helper.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { Instance } from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\nimport { InstancesService } from \"../../../../../backend-api/service-registry/services/instances.service\";\nimport { Design } from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport { DesignsService } from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport { SrViewModelService } from \"../../../shared/services/sr-view-model.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Service } from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { MrnHelperService } from \"../../../../../shared/mrn-helper.service\";\nimport { IdServicesService } from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport { DocsService } from \"../../../../../backend-api/service-registry/services/docs.service\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { SHOW_ENDORSEMENTS } from \"../../../../../shared/app.constants\";\nimport { Endorsement } from \"../../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport { EndorsementsService } from \"../../../../../backend-api/endorsements/services/endorsements.service\";\nimport { InstanceXmlParser } from \"../../../shared/services/instance-xml-parser.service\";\nimport { Observable } from \"rxjs/Observable\";\nimport { isNullOrUndefined } from \"util\";\n\n@Component({\n  selector: 'instance-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instance-details.html'),\n  styles: []\n})\nexport class InstanceDetailsComponent {\n  public instance: Instance;\n  public design: Design;\n  public title:string;\n  public labelValues:Array<LabelValueModel>;\n  public isLoadingInstance: boolean;\n  public onGotoDesign: Function;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tpublic WKTs:Array<string>;\n\n\tpublic isLoadingIdService: boolean;\n\tpublic titleIdService:string;\n\tpublic idService:Service;\n\tpublic shouldDisplayIdService:boolean = false;\n\tpublic shouldDisplayCreateButton:boolean = false;\n\tpublic showUpdateIdService:boolean = false;\n\n\t// Endorsements\n\tpublic isLoadingEndorsements:boolean;\n\tpublic isEndorsing:boolean;\n\tpublic showEndorsements:boolean;\n\tpublic isEndorsedByMyOrg:boolean;\n\tpublic endorsements:Array<Endorsement> = [];\n\tpublic endorseMainSwitch = SHOW_ENDORSEMENTS;\n\n  constructor(private servicesService:IdServicesService, private endorsementsService:EndorsementsService, private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private instancesService: InstancesService, private notifications: MCNotificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService, private mrnHelper: MrnHelperService, private docsService: DocsService, private orgsService: OrganizationsService, private xmlParser: InstanceXmlParser) {\n\n  }\n\n  ngOnInit() {\n    this.onGotoDesign = this.gotoDesign.bind(this);\n\t  this.shouldDisplayCreateButton = false;\n\t  this.isLoadingInstance = true;\n\t  this.isLoadingIdService = true;\n    this.title = 'Loading ...';\n\t  this.titleIdService = 'ID information';\n\t  let instanceId = this.route.snapshot.params['id'];\n\t  let version = this.route.snapshot.queryParams['instanceVersion'];\n    this.loadInstance(instanceId, version);\n\t  if (SHOW_ENDORSEMENTS) {\n\t\t  this.loadEndorsements(instanceId, version);\n\t  }\n  }\n\n  public downloadXml() {\n    this.fileHelperService.downloadXml(this.instance.instanceAsXml);\n  }\n\n  public downloadDoc() {\n\t  this.fileHelperService.downloadDoc(this.instance.instanceAsDoc);\n  }\n\n  public createIdService() {\n\t\tthis.navigationHelperService.navigateToCreateIdService(this.instance.instanceId, this.instance.name, this.instance.version);\n  }\n\n  private isMyOrg():boolean {\n\t  return this.instance.organizationId === this.authService.authState.orgMrn;\n  }\n\n\n  private loadInstance(instanceId:string, version:string) {\n    this.instancesService.getInstance(instanceId, version).subscribe(\n      instance => {\n        this.title = instance.name;\n        this.instance = instance;\n        this.loadDesign();\n        this.WKTs = this.xmlParser.getGeometriesAsWKT(this.instance.instanceAsXml);\n      },\n      err => {\n        // TODO: make this as a general component\n        if (err.status == 404) {\n          this.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\n        }\n        this.title = 'Error while loading';\n        this.isLoadingInstance = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get instance', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n\tprivate loadOrganizationName() {\n\t\tthis.orgsService.getOrganizationName(this.instance.organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForInstance(this.instance, organizationName);\n\t\t\t\tthis.finalizeLoading();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForInstance(this.instance, '');\n\t\t\t\tthis.finalizeLoading();\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate finalizeLoading() {\n\t\tthis.generateLabelValueForDesign();\n\t\tthis.isLoadingInstance = false;\n\t\tif (this.isMyOrg() || this.authService.authState.hasPermission(AuthPermission.SiteAdmin)) {\n\t\t\tthis.shouldDisplayIdService = true;\n\t\t\tthis.loadIdService(this.instance.instanceId);\n\t\t}\n\t}\n\n  private loadIdService(mrn:string) {\n\t  this.servicesService.getIdService(mrn, this.instance.version, this.instance.organizationId).subscribe(\n\t\t  service => {\n\t\t  \tservice.name = this.instance.name;\n\t\t\t  this.idService = service;\n\t\t\t  this.showUpdateIdService = (this.isMyOrg() && this.isServiceAdminForOrg()) /* TODO for now only update if my org, because updating another orgs entities is a quite different kind of woopass|| this.authService.authState.isSiteAdmin()*/;\n\t\t\t  this.isLoadingIdService = false;\n\t\t  },\n\t\t  err => {\n\t\t\t  if (err.status == 404) {\n\t\t\t\t  this.shouldDisplayIdService = false;\n\t\t\t\t  this.shouldDisplayCreateButton = this.isServiceAdminForOrg();\n\t\t\t  } else {\n\t\t\t    this.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\n\t\t\t  }\n\t\t\t  this.isLoadingIdService = false;\n\t\t  }\n\t  );\n  }\n\n  private loadDesign() {\n    this.designsService.getDesignForInstance(this.instance).subscribe(\n      design => {\n        this.design = design;\n\t      this.loadOrganizationName();\n      },\n      err => {\n        this.isLoadingInstance = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private generateLabelValueForDesign() {\n    if (this.design) {\n      var label = 'Implemented design';\n\t    this.labelValues.push({label: label, valueHtml: this.design.name + \" - \" + this.design.version, linkFunction: this.onGotoDesign, linkValue: [this.design.designId, this.design.version]});\n    }\n  }\n\n\tpublic updateIdService() {\n\t\tthis.navigationHelperService.navigateToUpdateIdService(this.idService.mrn, this.instance.version);\n\t}\n\n  private gotoDesign(linkValue:any) {\n    try {\n      this.navigationHelperService.navigateToOrgDesign(linkValue[0], linkValue[1]);\n    } catch ( error ) {\n      this.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\n    }\n  }\n\n\tprivate isServiceAdminForOrg():boolean {\n\t\treturn (this.authService.authState.hasPermission(AuthPermission.ServiceAdmin) && this.isMyOrg()) || this.authService.authState.hasPermission(AuthPermission.SiteAdmin);\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.isServiceAdminForOrg();\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.isServiceAdminForOrg();\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelperService.navigateToUpdateInstance(this.instance.instanceId, this.instance.version);\n\t}\n\n\tpublic delete() {\n\t\tthis.modalDescription = 'Do you want to delete the instance?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoadingInstance = true;\n\t\tthis.showModal = false;\n\t\tthis.instancesService.deleteInstance(this.instance).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.deleteEndorsements();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete instance', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate deleteIdService() {\n  \tif (this.idService) {\n\t\t\tthis.servicesService.deleteIdService(this.idService.mrn, this.instance.version).subscribe(\n\t\t\t\t() => {\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgInstance('', '');\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete ID', MCNotificationType.Error, err);\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgInstance('', '');\n\t\t\t\t}\n\t\t\t);\n\t  } else {\n\t\t  this.navigationHelperService.navigateToOrgInstance('', '');\n\t  }\n\t}\n\n\tprivate isAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate isEndorseAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n\n\t// Endorsements\n\tprivate deleteEndorsements() {\n\t\tif (this.endorsements && this.endorsements.length > 0) {\n\t\t\tthis.endorsementsService.removeAllEndorsementsOfInstance(this.instance.instanceId).subscribe(\n\t\t\t\t() => {\n\t\t\t\t\tthis.deleteIdService();\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete endorsements of instance', MCNotificationType.Error, err);\n\t\t\t\t\tthis.deleteIdService();\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.deleteIdService();\n\t\t}\n\t}\n\n\tprivate loadEndorsements(instanceId:string, instanceVersion:string) {\n\t\tthis.isLoadingEndorsements = true;\n\t\tlet parallelObservables = [];\n\n\t\tparallelObservables.push(this.endorsementsService.isInstanceEndorsedByMyOrg(instanceId, instanceVersion).take(1));\n\t\tparallelObservables.push(this.endorsementsService.getEndorsementsForInstance(instanceId, instanceVersion).take(1));\n\n\t\treturn Observable.forkJoin(parallelObservables).subscribe(\n\t\t\tresultArray => {\n\t\t\t\tlet isEndorsedByMyOrg:any = resultArray[0];\n\t\t\t\tlet pageEndorsement: any = resultArray[1];\n\t\t\t\tthis.endorsements = pageEndorsement.content;\n\t\t\t\tthis.isEndorsedByMyOrg = isEndorsedByMyOrg;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.showEndorsements = true;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.showEndorsements = false;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get endorsements for instance', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic endorseToggle() {\n\t\tif (this.isEndorsedByMyOrg) {\n\t\t\tthis.removeEndorse();\n\t\t} else {\n\t\t\tthis.endorse();\n\t\t}\n\t}\n\n\tprivate endorse() {\n\t\tthis.isEndorsing = true;\n\n\t\tthis.endorsementsService.endorseInstance(this.instance.instanceId, this.instance.version, this.design.designId, this.design.version).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = true;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.instance.instanceId, this.instance.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to endorse instance', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate removeEndorse() {\n\t\tthis.isEndorsing = true;\n\t\tthis.endorsementsService.removeEndorsementOfInstance(this.instance.instanceId, this.instance.version).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = false;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.instance.instanceId, this.instance.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to remove endorse of instance', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic shouldDisplayEndorsementButton():boolean {\n\t\treturn SHOW_ENDORSEMENTS && this.isEndorseAdmin() && this.showEndorsements && !isNullOrUndefined(this.design);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-label-value-table [isLoading]=\\\"isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"instance && !isLoadingInstance\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"instance.instanceAsDoc\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\n        </li>\\n        <li *ngIf=\\\"instance.instanceAsXml\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\n        </li>\\n        <li *ngIf=\\\"showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Instance</button>\\n        </li>\\n        <li *ngIf=\\\"showDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Instance</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayEndorsementButton() && !isLoadingInstance\\\">\\n          <mc-endorse-button [isEndorsedByMyOrg]=\\\"isEndorsedByMyOrg\\\" [isEndorsing]=\\\"isEndorsing\\\" [title]=\\\"'Instance'\\\" (onEndorse)=\\\"endorseToggle()\\\"></mc-endorse-button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <ba-card *ngIf=\\\"WKTs\\\" title=\\\"Coverage Area of {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-coverage-map [WKTs]=\\\"WKTs\\\" [isLoading]=\\\"isLoadingInstance\\\">Loading...</mc-coverage-map>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"shouldDisplayIdService\\\">\\n      <service-details-view [shouldShowUpdate]=\\\"showUpdateIdService\\\" (updateAction)=\\\"updateIdService()\\\" [shouldShowLinkToInstance]=\\\"false\\\" [shouldShowDelete]=\\\"false\\\" [isLoading]=\\\"isLoadingIdService\\\" [title]=\\\"titleIdService\\\" [service]=\\\"idService\\\"></service-details-view>\\n    </div>\\n\\n    <div *ngIf=\\\"shouldDisplayCreateButton\\\">\\n      <ba-card title=\\\"{{titleIdService}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <ul class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"createIdService()\\\">Create ID Service</button>\\n          </li>\\n        </ul>\\n      </ba-card>\\n    </div>\\n\\n    <div *ngIf=\\\"endorseMainSwitch\\\">\\n      <endorsed-by-list [title]=\\\"'Organizations endorsing the Instance (' + title + ')'\\\" [endorsements]=\\\"endorsements\\\" [isLoading]=\\\"isLoadingEndorsements\\\"></endorsed-by-list>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete instance'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\nimport {SrSearchRequestsService} from \"../../../shared/services/sr-search-requests.service\";\nimport {ServiceRegistrySearchRequest} from \"../../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\n\nconst SEARCH_KEY = 'InstanceListComponent';\n@Component({\n  selector: 'instance-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instance-list.html'),\n  styles: []\n})\nexport class InstanceListComponent implements OnInit {\n\tpublic searchKey = SEARCH_KEY;\n\tpublic isSearching = false;\n\tprivate initialSearchRequest: ServiceRegistrySearchRequest;\n  public organization: Organization;\n  public instances: Array<Instance>;\n  public isLoading: boolean;\n  public onGotoInstance: Function;\n\tpublic cardTitle:string;\n  constructor(private searchRequestsService:SrSearchRequestsService, private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private instancesService: InstancesService) {\n  }\n\n  ngOnInit() {\n\t  this.cardTitle = 'Instances';\n    this.onGotoInstance = this.gotoInstance.bind(this);\n\n    this.isLoading = true;\n    this.loadMyOrganization();\n    this.loadInstances();\n  }\n\n\tpublic search(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.isSearching = true;\n\t\tthis.searchInstances(searchRequest);\n\t}\n\n\tprivate searchInstances(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.instancesService.searchInstances(searchRequest).subscribe(\n\t\t\tinstances => {\n\t\t\t\tthis.instances = instances;\n\t\t\t\tthis.isSearching = false;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.initialSearchRequest = searchRequest;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.searchRequestsService.addSearchRequest(SEARCH_KEY, this.initialSearchRequest);\n\t\t\t\tthis.isSearching = false;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to search instances', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private loadInstances() {\n\t  let searchRequest = this.searchRequestsService.getSearchRequest(SEARCH_KEY);\n\t  this.initialSearchRequest = searchRequest;\n\t  if (searchRequest) {\n\t\t  this.searchInstances(searchRequest);\n\t  } else {\n\t\t  this.instancesService.getInstancesForMyOrg().subscribe(\n\t\t\t  instances => {\n\t\t\t\t  this.instances = instances;\n\t\t\t\t  this.isLoading = false;\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  this.isLoading = false;\n\t\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get instances', MCNotificationType.Error, err);\n\t\t\t  }\n\t\t  );\n\t  }\n  }\n\n  private loadMyOrganization() {\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n      },\n      err => {\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private gotoInstance(index:number) {\n    this.router.navigate([this.instances[index].instanceId], {queryParams: { instanceVersion: this.instances[index].version}, relativeTo: this.route })\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <service-registry-search [searchTitle]=\\\"'Search filters'\\\" [searchKey]=\\\"searchKey\\\" [isSearching]=\\\"isSearching\\\" [showEndorsement]=\\\"true\\\" [preFilterMyOrg]=\\\"true\\\" (onSearch)=\\\"search($event)\\\"></service-registry-search>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <instances-table [instances]=\\\"instances\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoInstance\\\"></instances-table>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html\n// module chunks = 1","import {Component, OnInit, ViewChild, ViewEncapsulation} from \"@angular/core\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {XmlParserService} from \"../../../../../shared/xml-parser.service\";\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {InstanceXmlParser} from \"../../../shared/services/instance-xml-parser.service\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n\tMcFormControlModel,\n\tMcFormControlModelCheckbox,\n\tMcFormControlModelSelect,\n\tMcFormControlType,\n\tSelectModel\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ServiceViewModel} from \"../../../../org-identity-registry/services/view-models/ServiceViewModel\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselAttribute} from \"../../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\nimport {VesselHelper} from \"../../../../shared/services/vessel-helper\";\n\n@Component({\n  selector: 'instance-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instance-new.html'),\n  styles: []\n})\n\nexport class InstanceNewComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\n\tpublic labelValuesParsed:Array<LabelValueModel>;\n\tprivate parsedInstance:Instance;\n\n\tpublic hasError: boolean = false;\n\tpublic errorText: string;\n\n  public organization: Organization;\n  public labelValuesDesign:Array<LabelValueModel>;\n  public captionXml = 'Upload Instance XML file';\n  public captionDoc = 'Upload Instance Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public requiredTextXml = 'You need to upload XML file';\n  public requiredTextDoc = 'You need to upload a DOCX, ODT or PDF file';\n  public isLoading = true;\n\n  public isRegistering = false;\n  public registerTitle = \"Register Instance\";\n  public registerButtonClass = \"btn btn-danger btn-raised\";\n  public onRegister: Function;\n\n  private design:Design;\n  private xml:Xml;\n  private doc:Doc;\n\n  private oidcAccessType:OidcAccessTypeEnum = null;\n  private useOIDC:boolean = false;\n\tprivate useOIDCRedirect:boolean = true;\n\tpublic registerForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\tpublic WKTs: Array<string>;\n\tprivate linkToVessel: boolean = false;\n\tprivate vessel: Vessel;\n\tprivate vessels: Array<Vessel>;\n\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\n  constructor(private formBuilder: FormBuilder, private xmlParser: InstanceXmlParser, private mrnHelper: MrnHelperService, private activatedRoute: ActivatedRoute, private xmlParserService: XmlParserService, private viewModelService: SrViewModelService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private designsService: DesignsService, private orgService: OrganizationsService, private instancesService: InstancesService, private idServicesService: IdServicesService, private vesselsService: VesselsService) {\n  }\n\n  ngOnInit() {\n    this.onRegister = this.register.bind(this);\n    this.isRegistering = false;\n    this.isLoading = true;\n\t  this.loadVessels();\n    this.generateForm();\n    this.loadMyOrganization();\n    this.loadDesign();\n    this.updateUI();\n  }\n\n  public isFormValid() {\n  \tvar oidcTypeValid = true;\n\t  let oidcAccessType = this.registerForm.value.oidcAccessType;\n\t  if (this.useOIDC && (!oidcAccessType || oidcAccessType.toLowerCase().indexOf('undefined') >= 0)) {\n\t\t  oidcTypeValid = false;\n\t  }\n    return this.xml != null && this.registerForm.valid && oidcTypeValid;\n  }\n\n  public onUploadDoc(file: Doc) {\n    this.doc = file;\n  }\n\n  public onUploadXml(file: Xml) {\n\t  if (file && this.isXmlValid(file)) {\n\t\t  this.xml = file;\n\t\t  try {\n\t\t\t  let urlString = this.xmlParser.getEndpoint(file);\n\t\t\t  let url:URL = new URL(urlString);\n\t\t\t  this.registerForm.patchValue({certDomainName: url.hostname});\n\t\t  }catch (e) {\n\t\t\t  // Failed to construct url. Do nothing\n\t\t  }\n\t  }else {\n\t\t  this.resetXmlFile();\n\t  }\n\t  this.updateUI();\n  }\n\n\tprivate isXmlValid(file: Xml) : boolean {\n\t\ttry {\n\t\t\tlet mrn = this.xmlParser.getMrn(file);\n\t\t\tlet isValid = this.mrnHelper.checkMrnForInstance(mrn);\n\t\t\tif (isValid) {\n\t\t\t\tlet designMrn = this.xmlParser.getMrnForDesignInInstance(file);\n\t\t\t\tlet designVersion = this.xmlParser.getVersionForDesignInInstance(file);\n\n\t\t\t\tisValid = (designMrn === this.design.designId) && (designVersion === this.design.version);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tthis.errorText  = \"The MRN and/or version referencing the Design in the XML, doesn't match the MRN and/or version of the chosen Design.<BR><BR>\"\n\t\t\t\t\t\t+ \"Chosen Design: \" + this.design.designId + \", version: \" + this.design.version + \"<BR>\"\n\t\t\t\t\t\t+ \"Xml-parsed Design: \" + designMrn + \", version: \" + designVersion + \"<BR>\";\n\t\t\t\t}\n\n\t\t\t\tlet isWKTValid;\n\t\t\t\ttry {\n\t\t\t\t\tisWKTValid = this.isWKTValid(file);\n\t\t\t\t\tif (!isWKTValid) {\n\t\t\t\t\t\tlet errorText = \"The WKT(s) for the coverage area(s) of the instance XML is invalid. This can be due to \"\n\t\t\t\t\t\t\t+ \"invalid characters and/or unnecessary whitespaces.<BR>\";\n\t\t\t\t\t\tthis.errorText ? this.errorText += errorText : this.errorText = errorText;\n\t\t\t\t\t\tisValid = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlet errorText = \"The WKTs for the coverage areas cannot be read. This can be due to \"\n\t\t\t\t\t\t+ \"them being missing or being invalid.<BR>\";\n\t\t\t\t\tthis.errorText ? this.errorText += errorText : this.errorText = errorText;\n\t\t\t\t\tisValid = false;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tthis.errorText = \"The ID in the XML-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\n\t\t\t\t\t+ this.mrnHelper.mrnMaskTextForInstance() + \"'ID'<BR>\"\n\t\t\t\t\t+ \"'ID'=\" + this.mrnHelper.mrnPatternError();\n\t\t\t}\n\t\t\tthis.hasError = !isValid;\n\t\t\treturn isValid;\n\t\t} catch ( error ) {\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate isWKTValid(file: Xml): boolean {\n  \tvar parser = new DOMParser();\n\n\t\tlet xmlString = file.content.split('\\+').join(''); // remove +\n\t\tvar xmlData = parser.parseFromString(xmlString, file.contentContentType);\n\n\t\tlet coversAreasRootElement = xmlData.getElementsByTagName('coversAreas');\n\t\tif (coversAreasRootElement.length == 0) {\n\t\t\tlet prefix = xmlData.documentElement.prefix;\n\t\t\tcoversAreasRootElement = xmlData.getElementsByTagName(prefix + \":\" + 'coversAreas');\n\t\t}\n\n\t\tlet coversAreasRoot = coversAreasRootElement[0];\n\n\t\tlet coversAreasElement = coversAreasRoot.getElementsByTagName('coversArea');\n\t\tif (coversAreasElement.length == 0) {\n\t\t\tlet prefix = xmlData.documentElement.prefix;\n\t\t\tcoversAreasElement = coversAreasRoot.getElementsByTagName(prefix + \":\" + 'coversArea');\n\t\t}\n\n\t\t// no coversArea? Then probably using unlocodes, thus we don't show map\n\t\tif (!coversAreasElement || coversAreasElement.length == 0) {\n\t\t\tthis.WKTs = null;\n\t\t\treturn true;\n\t\t}\n\n\t\tlet coversAreas = coversAreasElement;\n\n\t\tlet isValid = true;\n\t\tlet areas = [];\n\n\t\tfor (let i = 0; i < coversAreas.length; i++) {\n\t\t\tlet nodeElement = coversAreasRoot.getElementsByTagName('geometryAsWKT');\n\t\t\tif (nodeElement.length == 0) {\n\t\t\t\tlet prefix = xmlData.documentElement.prefix;\n\t\t\t\tnodeElement = coversAreas[i].getElementsByTagName(prefix + \":\" + 'geometryAsWKT');\n\t\t\t}\n\t\t\tlet area = null;\n\t\t\tif (nodeElement && nodeElement[0]) {\n\t\t\t\tlet node = nodeElement[0].childNodes[0];\n\t\t\t\tif (node) {\n\t\t\t\t\tarea = node.nodeValue.replace(/\\s+\\(\\(/, '\\(\\(');\n\t\t\t\t} else {\n\t\t\t\t\tarea = 'POLYGON((-180 90, 180 90, 180 -90, -180 -90))';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tarea = 'POLYGON((-180 90, 180 90, 180 -90, -180 -90))';\n\t\t\t}\n\n\t\t\tif (area.includes('\\+')) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tareas.push(area);\n\t\t\t}\n\t\t}\n\t\tif (isValid) {\n\t\t\tthis.WKTs = areas;\n\t\t}\n\t\treturn isValid;\n\t}\n\n\tprivate resetXmlFile(){\n\t\tthis.xml = null;\n\t\tthis.WKTs = null;\n\t\tthis.fileUploadXml.resetFileSelection();\n\t}\n\n\tprivate updateUI() {\n\t\tif (this.xml) {\n\t\t\tthis.parseInstance();\n\t\t} else {\n\t\t\tthis.parsedInstance = null;\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\tprivate parseInstance() {\n\t\tthis.parsedInstance = null;\n\t\ttry {\n\t\t\tvar instance:Instance = {};\n\t\t\tinstance.instanceAsXml = this.xml;\n\t\t\tinstance.name = this.xmlParser.getName(this.xml);\n\t\t\tinstance.description = this.xmlParser.getDescription(this.xml);\n\t\t\tinstance.instanceId = this.xmlParser.getMrn(this.xml);\n\t\t\tinstance.keywords = this.xmlParser.getKeywords(this.xml);\n\t\t\tinstance.status = this.xmlParser.getStatus(this.xml);\n\t\t\tinstance.organizationId = this.organization.mrn;\n\t\t\tinstance.version = this.xmlParser.getVersion(this.xml);\n\t\t\tinstance.endpointUri = this.xmlParser.getEndpoint(this.xml);\n\t\t\tinstance.designId = this.design.designId;\n\n\t\t\tthis.parsedInstance = instance;\n\t\t} catch ( error ) {\n\t\t\tthis.isRegistering = false;\n\t\t\tthis.resetXmlFile();\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t} finally {\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate setupLableValuesParsed() {\n\t\tthis.labelValuesParsed = [];\n\t\tthis.labelValuesParsed.push({label: 'Upload XML', valueHtml: ''});\n\t\tif (this.organization && this.parsedInstance) {\n\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForInstance(this.parsedInstance, this.organization.name);\n\t\t}\n\t}\n\n  public cancel() {\n    this.navigationService.cancelCreateInstance();\n  }\n\n  public register() {\n\t\tif (this.showVesselAttNotEqualWarning()) {\n\t\t\tlet imoNumber = this.xmlParser.getImo(this.parsedInstance.instanceAsXml);\n\t\t\tlet mmsiNumber = this.xmlParser.getMmsi(this.parsedInstance.instanceAsXml);\n\t\t\tthis.modalDescription =\n\t\t\t\t\"The IMO and/or the MMSI number from the Xml and the Vessel doesn't match.<br><br>\" +\n\t\t\t\t\"Vessel: IMO:\" + VesselHelper.getIMO(this.vessel) + \", MMSI:\" + VesselHelper.getMMSI(this.vessel) + \"<br>\" +\n\t\t\t\t\"Xml: IMO:\" + imoNumber + \", MMSI:\" + mmsiNumber + \"<br><br>\" +\n\t\t\t\t\"Register Instance anyway?\";\n\t\t\tthis.showModal = true;\n\t\t} else {\n\t\t\tthis.registerForSure();\n\t\t}\n  }\n\n  private showVesselAttNotEqualWarning() : boolean {\n\t  if (this.linkToVessel) {\n\t\t  let imoNumber = this.xmlParser.getImo(this.parsedInstance.instanceAsXml);\n\t\t  let mmsiNumber = this.xmlParser.getMmsi(this.parsedInstance.instanceAsXml);\n\t\t  if (!VesselHelper.isVesselAttEqualTo(this.vessel, imoNumber, mmsiNumber)) {\n\t\t\t  return true;\n\t\t  }\n\t  }\n\t  return false;\n  }\n\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic registerForSure() {\n\t\tthis.isRegistering = true;\n\t\tthis.showModal = false;\n\t\tthis.createInstance(this.parsedInstance);\n\t}\n\n  private createInstance(instance:Instance) {\n    this.instancesService.createInstance(instance, this.doc).subscribe(\n      instanceCreated => {\n        this.registerIdService(instanceCreated);\n      },\n      err => {\n        this.isRegistering = false;\n        this.notifications.generateNotification('Error', 'Error when trying to create instance', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n\tpublic registerIdService(instance:Instance) {\n\t\tlet service:Service = {\n\t\t\tmrn: instance.instanceId,\n\t\t\tname: instance.name,\n\t\t\tinstanceVersion: instance.version,\n\t\t\tpermissions: this.registerForm.value.permissions,\n\t\t\tcertDomainName: this.registerForm.value.certDomainName\n\t\t};\n\t\tif (this.useOIDC) {\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tservice.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;\n\t\t\t} else {\n\t\t\t\tservice.oidcRedirectUri = '';\n\t\t\t}\n\t\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\n\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\n\t\t\t\tservice.oidcAccessType = oidcAccessType;\n\t\t\t}\n\t\t}\n\t\tif (this.linkToVessel) {\n\t\t\tservice.vessel = this.vessel;\n\t\t}\n\t\tthis.createIdService(service, instance);\n\t}\n\n  private createIdService(idService:Service, instance:Instance) {\n    this.idServicesService.createIdService(idService).subscribe(\n      service => {\n\t      this.isRegistering = false;\n\t      this.navigationService.navigateToOrgInstance(instance.instanceId, instance.version);\n      },\n      err => {\n\t      this.isRegistering = false;\n        this.notifications.generateNotification('Error', 'Error when trying to create service instance in Identity Registry', MCNotificationType.Error, err);\n\t      this.navigationService.navigateToOrgInstance(instance.instanceId, instance.version);\n      }\n    );\n  }\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(pageVessel => {\n\t\t\tthis.vessels = pageVessel.content;\n\t\t\tthis.generateForm();\n\t\t\tthis.isLoading = false;\n\t\t},error => {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', MCNotificationType.Error, error);\n\t\t\tthis.cancel();\n\t\t});\n\t}\n\n  private loadMyOrganization() {\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n      },\n      err => {\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private loadDesign() {\n    let designId = this.activatedRoute.snapshot.queryParams['designId'];\n    let version = this.activatedRoute.snapshot.queryParams['designVersion'];\n    this.designsService.getDesign(designId, version).subscribe(\n      design => {\n        this.design = design;\n        this.loadOrganizationName();\n      },\n      err => {\n        this.isLoading = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n\tprivate loadOrganizationName() {\n\t\tthis.orgService.getOrganizationName(this.design.organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tthis.labelValuesDesign = this.viewModelService.generateLabelValuesForDesign(this.design, organizationName);\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.labelValuesDesign = this.viewModelService.generateLabelValuesForDesign(this.design, '');\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate shouldUseOIDCRedirect(value:OidcAccessTypeEnum) {\n  \tif (value && this.oidcAccessType != value) {\n\t\t  this.oidcAccessType = value;\n\t\t  this.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;\n\t\t  this.generateForm();\n\t  }\n\t}\n\n\tprivate shouldUseOIDC(useOIDC:boolean) {\n\t\tthis.useOIDC = useOIDC;\n\t\tthis.generateForm();\n\t}\n\n\tprivate shouldLinkToVessel(linkToVessel: boolean) {\n\t\tthis.linkToVessel = linkToVessel;\n\t\tthis.generateForm();\n\t}\n\n\tprivate generateForm() {\n\t\tvar oldForm = this.registerForm;\n\t\tthis.registerForm = this.formBuilder.group({});\n\t\tif (!oldForm) {\n\t\t\toldForm = this.registerForm;\n\t\t}\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tvar formControl = new FormControl(oldForm.value.permissions, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\n\t\tformControl = new FormControl(oldForm.value.certDomainName, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\n\t\tformControl = new FormControl({value: formControlModelCheckbox.state, disabled: false}, formControlModelCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\n\t\tthis.registerForm.addControl(formControlModelCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelCheckbox);\n\n\t\tif (this.useOIDC) {\n\t\t\tlet selectValues = this.selectValues();\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate, showCheckmark:true};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDCRedirect(param));\n\t\t\tthis.registerForm.addControl(formControlModelSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.required, errorText:'URI is required'};\n\t\t\t\tformControl = new FormControl(oldForm.value.oidcRedirectUri, formControlModel.validator);\n\t\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\t\t\tthis.formControlModels.push(formControlModel);\n\t\t\t}\n\t\t}\n\n\t\tlet linkToVesselCheckbox:McFormControlModelCheckbox = {state: this.linkToVessel, formGroup: this.registerForm, elementId: 'linkToVessel', controlType: McFormControlType.Checkbox, labelName: 'Link to a vessel'};\n\t\tformControl = new FormControl({value: linkToVesselCheckbox.state, disabled: false}, linkToVesselCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldLinkToVessel(param));\n\t\tthis.registerForm.addControl(linkToVesselCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(linkToVesselCheckbox);\n\n\t\tif (this.linkToVessel) {\n\t\t\tlet selectValues = this.vesselSelectValues();\n\t\t\tlet vesselSelect:McFormControlModelSelect = {selectValues: selectValues, formGroup: this.registerForm, elementId: 'vesselSelect', controlType: McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), vesselSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => {\n\t\t\t\tif (param) {\n\t\t\t\t\tthis.vessel = param;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.registerForm.addControl(vesselSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(vesselSelect);\n\t\t}\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.oidcAccessType == null});\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\n\t\tallOidcTypes.forEach(oidcType => {\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.oidcAccessType];\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\n\t\t});\n\t\treturn selectValues;\n\t}\n\n\tprivate vesselSelectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tvar defaultSelected = true;\n\t\tif (this.vessels && this.vessels.length > 0) {\n\t\t\tthis.vessels.forEach(vessel => {\n\t\t\t\tlet isSelected = false;\n\t\t\t\tif (this.vessel) {\n\t\t\t\t\tisSelected = this.vessel.mrn === vessel.mrn;\n\t\t\t\t} else {\n\t\t\t\t\tisSelected = defaultSelected;\n\t\t\t\t\tdefaultSelected = false;\n\t\t\t\t}\n\t\t\t\tselectValues.push({value: vessel, label: VesselHelper.labelForSelect(vessel), isSelected: isSelected});\n\t\t\t});\n\t\t}\n\t\treturn selectValues;\n\t}\n\n\tprivate selectedValue(selectValues:Array<SelectModel>):any {\n\t\tfor(let selectModel of selectValues) {\n\t\t\tif (selectModel.isSelected) {\n\t\t\t\treturn selectModel.value;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Instance for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5 *ngIf=\\\"design\\\">Registering an instance for this design</h5>\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValuesDesign\\\"></mc-label-value-table>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <div *ngIf=\\\"design\\\">\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" [requiredText]=\\\"requiredTextDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"errorText | undefined | sanitizeHtml\\\"></div>\\n\\n          <mc-form [hideButtons]=\\\"true\\\" [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\"></mc-form>\\n\\n          <ul class=\\\"btn-list clearfix\\\">\\n            <li>\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid()\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\n            </li>\\n            <li>\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n            </li>\\n          </ul>\\n        </form>\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValuesParsed\\\"></mc-label-value-table>\\n        <mc-coverage-map *ngIf=\\\"WKTs\\\" [isLoading]=\\\"isLoading\\\" [hideButton]=\\\"true\\\" [WKTs]=\\\"WKTs\\\"></mc-coverage-map>\\n      </div>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!design && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"registerForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Register instance'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Register'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {InstanceXmlParser} from \"../../../shared/services/instance-xml-parser.service\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n    McFormControlModel, McFormControlModelSelect,\n    McFormControlType, SelectModel\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {FormGroup, FormControl, FormBuilder} from \"@angular/forms\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {Observable} from \"rxjs\";\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'instance-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instance-update.html'),\n  styles: []\n})\nexport class InstanceUpdateComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\tpublic hasError: boolean = false;\n\tpublic errorText: string;\n\n\tpublic labelValuesParsed:Array<LabelValueModel>;\n\tprivate parsedInstance:Instance;\n\n  public instance: Instance;\n\n  public labelValues:Array<LabelValueModel>;\n  public captionXml = 'Upload Instance XML file';\n  public captionDoc = 'Upload Instance Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public isLoading = true;\n\n  public isUpdating = false;\n  public updateTitle = \"Update Instance\";\n  public isFormChanged = false;\n  private xml:Xml;\n  private doc:Doc;\n\n\tprivate instanceIdFromRoute:string;\n\tprivate versionFromRoute:string;\n\tprivate status:string = '';\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\tpublic WKTs: Array<string>;\n\n  constructor(private orgsService:OrganizationsService, private viewModelService: SrViewModelService, private formBuilder: FormBuilder, private xmlParser: InstanceXmlParser, private mrnHelper: MrnHelperService, private router: Router, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private instancesService: InstancesService, private designService: DesignsService) {\n  }\n\n  ngOnInit() {\n    this.isUpdating = false;\n    this.isLoading = true;\n    this.loadInstance();\n\t  this.updateUI();\n  }\n\n  public setFormChanged() {\n  \tvar changed = false;\n  \tif (this.xml || this.doc) {\n  \t\tchanged = true;\n\t  } else if (this.status != this.instance.status) {\n  \t\tchanged = true;\n\t  }\n\t  this.isFormChanged = changed;\n  }\n\n  public onUploadDoc(file: Doc) {\n    this.doc = file;\n\t  this.hasError = false;\n\t  this.setFormChanged();\n\t  this.generateForm();\n  }\n\n  public onUploadXml(file: Xml) {\n  \tthis.hasError = false;\n  \tif (file) {\n  \t\tthis.isXmlValid(file).subscribe(isValid => {\n\t\t\t  this.hasError = !isValid;\n  \t\t\tif (isValid) {\n  \t\t\t\tthis.xml = file;\n\t\t\t  } else {\n  \t\t\t\tthis.resetXmlFile();\n\t\t\t  }\n\t\t\t  this.setFormChanged();\n\t\t\t  this.generateForm();\n\t\t\t  this.updateUI();\n\t\t  });\n\t  } else {\n\t\t  this.hasError = false;\n\t\t  this.resetXmlFile();\n\t\t  this.generateForm();\n\t\t  this.updateUI();\n\t  }\n  }\n\n  private resetXmlFile() {\n\t  this.status = this.instance.status;\n\t  this.xml = null;\n\t  this.fileUploadXml.resetFileSelection();\n\t  this.setFormChanged();\n\t  this.updateUI();\n  }\n\n\tprivate updateUI() {\n\t\tif (this.xml) {\n\t\t\tthis.parseInstance();\n\t\t} else {\n\t\t\tthis.parsedInstance = null;\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate isXmlValid(file: Xml) : Observable<boolean> {\n\t\ttry {\n\t\t\tlet designMrn = this.xmlParser.getMrnForDesignInInstance(file);\n\t\t\tlet designVersion = this.xmlParser.getVersionForDesignInInstance(file);\n\t\t\tlet isDesignTheSame = this.isDesignSameAsBefore(designMrn, designVersion);\n\t\t\tif (isDesignTheSame) {\n\t\t\t\tlet parseValid = this.parseDisplayValues(file);\n\t\t\t\treturn Observable.of(parseValid);\n\t\t\t} else {\n\t\t\t\treturn Observable.create(observer => {\n\t\t\t\t\tthis.designService.getDesign(designMrn,designVersion).subscribe(\n\t\t\t\t\t\tdesign => {\n\t\t\t\t\t\t\tlet parseValid = this.parseDisplayValues(file);\n\t\t\t\t\t\t\tobserver.next(parseValid);\n\t\t\t\t\t\t},\n\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t\t\t\tthis.errorText  = \"The MRN and version referencing the Design in the XML, doesn't match any designs in Service Registry<BR><BR>\"\n\t\t\t\t\t\t\t\t\t+ \"Xml-parsed Design: \" + designMrn + \", version: \" + designVersion + \"<BR>\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.errorText  = \"Error when trying to validate implemented design.<BR>\";\n\t\t\t\t\t\t\t\t// If error isn't \"Not found\" then another error occured and we can't proceed\n\t\t\t\t\t\t\t\tthis.notifications.generateNotification('Error when trying to validate implemented design: ', err.message, MCNotificationType.Error, err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tobserver.next(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.errorText  = \"Error in XML.<BR>\";\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\treturn Observable.of(false);\n\t\t}\n\t}\n\n\tprivate parseInstance() {\n\t\tthis.parsedInstance = null;\n\t\ttry {\n\t\t\tif (this.xml) {\n\t\t\t\tvar instance:Instance = _.cloneDeep(this.instance);\n\t\t\t\t// Already contains an XML, so just update the values and not the ID\n\t\t\t\tinstance.instanceAsXml.content = this.xml.content;\n\t\t\t\tinstance.instanceAsXml.contentContentType = this.xml.contentContentType;\n\t\t\t\tinstance.instanceAsXml.name = this.xml.name;\n\t\t\t\tinstance.name = this.xmlParser.getName(this.xml);\n\t\t\t\tinstance.description = this.xmlParser.getDescription(this.xml);\n\t\t\t\tinstance.keywords = this.xmlParser.getKeywords(this.xml);\n\t\t\t\tinstance.status = this.xmlParser.getStatus(this.xml);\n\t\t\t\tinstance.version = this.xmlParser.getVersion(this.xml);\n\t\t\t\tinstance.endpointUri = this.xmlParser.getEndpoint(this.xml);\n\t\t\t\tinstance.designId = this.xmlParser.getMrnForDesignInInstance(this.xml);\n\t\t\t\tthis.parsedInstance = instance;\n\t\t\t\tthis.setupLableValuesParsed();\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.isUpdating = false;\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\tthis.resetXmlFile();\n\t\t} finally {\n\t\t\tthis.WKTs = this.xmlParser.getGeometriesAsWKT(this.xml);\n\t\t}\n\t}\n\n\tprivate parseDisplayValues(file:Xml):boolean {\n\t\tthis.status = this.xmlParser.getStatus(file);\n\t\tlet parsedMrn = this.xmlParser.getMrn(file);\n\t\tlet parsedVersion = this.xmlParser.getVersion(file);\n\t\tif (parsedMrn != this.instance.instanceId || parsedVersion != this.instance.version) {\n\t\t\tthis.errorText  = \"The MRN and Version in the XML are not the same as the MRN and Version of this Instance. If the MRN or Version needs to be changed, please create a NEW Instance instead of updating an existing.<BR><BR>\"\n\t\t\t\t+ \"Xml-parsed MRN: \" + parsedMrn + \"<BR>\"\n\t\t\t\t+ \"Xml-parsed Version: \" + parsedVersion + \"<BR>\";\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate setupLableValuesParsed() {\n\t\tthis.labelValuesParsed = [];\n\t\tthis.labelValuesParsed.push({label: 'Upload XML', valueHtml: ''});\n\t\tif (this.parsedInstance) {\n\t\t\tthis.orgsService.getOrganizationName(this.instance.organizationId).subscribe(\n\t\t\t\torganizationName => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForInstance(this.parsedInstance, organizationName);\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForInstance(this.parsedInstance, '');\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate isDesignSameAsBefore(designMrn:string, designVersion:string) : boolean {\n  \ttry {\n\t\t  let designMrnFromInstance = this.xmlParser.getMrnForDesignInInstance(this.instance.instanceAsXml);\n\t\t  let designVersionFromInstance = this.xmlParser.getVersionForDesignInInstance(this.instance.instanceAsXml);\n\t\t  let isSameMrn = designMrnFromInstance === designMrn;\n\t\t  let isSameVersion = designVersionFromInstance === designVersion;\n\t\t  return isSameMrn && isSameVersion;\n\t  } catch ( error ) {\n  \t\treturn false;\n\t  }\n\t}\n\n  public cancel() {\n    this.navigationService.navigateToOrgInstance(this.instanceIdFromRoute, this.versionFromRoute);\n  }\n\n  public update() {\n    this.isUpdating = true;\n  \tif (this.xml || this.doc) {\n\t\t  if (this.xml) {\n\t\t\t  this.instance = this.parsedInstance;\n\t\t  }\n\t\t  if (this.doc) {\n\t\t\t  if (this.instance.instanceAsDoc) { // Already contains a Doc, so just update the values and not the ID\n\t\t\t\t  this.instance.instanceAsDoc.filecontent = this.doc.filecontent;\n\t\t\t\t  this.instance.instanceAsDoc.filecontentContentType = this.doc.filecontentContentType;\n\t\t\t\t  this.instance.instanceAsDoc.name = this.doc.name;\n\t\t\t  } else {\n\t\t\t\t  this.instance.instanceAsDoc = this.doc;\n\t\t\t  }\n\t\t  }\n\t\t  this.updateInstance();\n\t  } else {\n  \t\tthis.status = this.updateForm.value.status;\n  \t\tthis.updateStatus();\n\t  }\n  }\n\n  private updateStatus() {\n\t  this.instancesService.updateStatus(this.instance, this.status).subscribe(_ => {\n\t\t\t  this.navigationService.navigateToOrgInstance(this.instance.instanceId, this.instance.version);\n\t\t  },\n\t\t  err => {\n\t\t\t  this.isUpdating = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to update status of instance', MCNotificationType.Error, err);\n\t\t  });\n  }\n\n  private updateInstance() {\n\t\tlet updateDoc = this.doc != null;\n\t\tlet updateXml = this.xml != null;\n\t  this.instancesService.updateInstance(this.instance, updateDoc, updateXml).subscribe(_ => {\n\t\t\t  this.navigationService.navigateToOrgInstance(this.instance.instanceId, this.instance.version);\n\t\t  },\n\t\t  err => {\n\t\t\t  this.isUpdating = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to update instance', MCNotificationType.Error, err);\n\t\t  });\n  }\n\n\tprivate loadInstance() {\n\t\tthis.instanceIdFromRoute = this.activatedRoute.snapshot.params['id'];\n\t\tthis.versionFromRoute = this.activatedRoute.snapshot.queryParams['instanceVersion'];\n\t\tthis.instancesService.getInstance(this.instanceIdFromRoute, this.versionFromRoute).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.instance = instance;\n\t\t\t\tthis.status = this.instance.status;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// TODO: make this as a general component\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.router.navigate(['/error404'], {relativeTo: this.activatedRoute, replaceUrl: true })\n\t\t\t\t}\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get instance', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.instance.instanceId});\n\t\tthis.labelValues.push({label: 'Name', valueHtml: this.instance.name});\n\t\tthis.labelValues.push({label: 'Version', valueHtml: this.instance.version});\n\t}\n\n\tprivate setStatus(status:string) {\n  \tthis.status = status;\n  \tthis.setFormChanged();\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModelSelect;\n\t\tlet disableStatus = this.xml != null || this.doc != null;\n\t\t// TODO Get dynamically from XSD\n\t\tlet statusSelect:Array<SelectModel> = [{label: \"provisional\", value: \"provisional\", isSelected: false},{label: \"simulated\", value: \"simulated\", isSelected: false},\n\t\t\t{label: \"released\", value: \"released\", isSelected: false}, {label: \"deprecated\", value: \"deprecated\", isSelected: false},\n\t\t\t{label: \"deleted\", value: \"deleted\", isSelected: false}];\n\t\tstatusSelect.forEach(status => \t{if (status.value === this.status) status.isSelected = true});\n\t\tif (disableStatus) {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: '', isDisabled: disableStatus};\n\t\t} else {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: ''};\n\t\t}\n\t\tvar formControl = new FormControl(this.status, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.setStatus(param));\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-update/instance-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Instance - {{instance?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5>Updating Instance</h5>\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <div *ngIf=\\\"instance\\\">\\n        <div class=\\\"important-notice-big\\\">\\n          If only the <span>status</span> needs to be updated, leave the <span>XML</span> and <span>Document</span> fields empty.<br>\\n          <br>\\n          If a new XML-file is uploaded the <span>status</span> will be parsed from the XML.\\n        </div>\\n        <div class=\\\"separator\\\"></div>\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"errorText | undefined | sanitizeHtml\\\"></div>\\n          <mc-form [isFormValid]=\\\"isFormChanged\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n        </form>\\n\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValuesParsed\\\"></mc-label-value-table>\\n        <mc-coverage-map *ngIf=\\\"WKTs\\\" [isLoading]=\\\"isLoading\\\" [hideButton]=\\\"true\\\" [WKTs]=\\\"WKTs\\\"></mc-coverage-map>\\n      </div>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!instance && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-update/instance-update.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-update/instance-update.html\n// module chunks = 1","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'instancess',\n  template: `<router-outlet></router-outlet>`\n})\nexport class InstancesComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './instances.routing';\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {InstancesComponent} from \"./instances.component\";\nimport {InstanceListComponent} from \"./components/instance-list/instance-list.component\";\nimport {InstanceDetailsComponent} from \"./components/instance-details/instance-details.component\";\nimport {InstanceNewComponent} from \"./components/instance-new/instance-new.component\";\nimport ServicesModule from \"../../org-identity-registry/services/services.module\";\nimport {InstanceUpdateComponent} from \"./components/instance-update/instance-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing,\n\t  ServicesModule\n  ],\n  declarations: [\n    InstancesComponent,\n    InstanceListComponent,\n    InstanceDetailsComponent,\n    InstanceNewComponent,\n\t  InstanceUpdateComponent\n  ]\n})\nexport default class InstancesModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {InstancesComponent} from \"./instances.component\";\nimport {InstanceListComponent} from \"./components/instance-list/instance-list.component\";\nimport {InstanceDetailsComponent} from \"./components/instance-details/instance-details.component\";\nimport {InstanceNewComponent} from \"./components/instance-new/instance-new.component\";\nimport {ServiceNewComponent} from \"../../org-identity-registry/services/components/service-new/service-new.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceUpdateComponent} from \"../../org-identity-registry/services/components/service-update/service-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\nimport {InstanceUpdateComponent} from \"./components/instance-update/instance-update.component\";\n\n// noinspection TypeScriptValidateTypes\nexport const routes: Routes = [\n  {\n    path: 'instances',\n    component: InstancesComponent,\n    data:{breadcrumb: 'Instances'},\n    children: [\n      {\n        path: '',\n        component: InstanceListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: InstanceNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n\t    {\n\t\t    path: 'register-id',\n\t\t    component: ServiceNewComponent,\n\t\t    data:{breadcrumb: 'Register ID'}\n\t    },\n      {\n        path: ':id',\n        component: InstanceDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update-id/:id',\n\t\t    component: ServiceUpdateComponent,\n\t\t    data:{breadcrumb: 'Update ID'}\n\t    },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: InstanceUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.routing.ts","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'org-service-registry',\n  template: `<router-outlet></router-outlet>`\n})\nexport class OrgServiceRegistryComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport { NgaModule } from '../../theme/nga.module';\n\nimport { routing }       from './org-service-registry.routing';\nimport { OrgServiceRegistryComponent } from './org-service-registry.component';\nimport SpecificationsModule from \"./specifications/specifications.module\";\nimport DesignsModule from \"./designs/designs.module\";\nimport InstancesModule from \"./instances/instances.module\";\nimport SrHowToModule from \"./sr-how-to/sr-how-to.module\";\nimport {SpecificationXmlParser} from \"./shared/services/specification-xml-parser.service\";\nimport {DesignXmlParser} from \"./shared/services/design-xml-parser.service\";\nimport {InstanceXmlParser} from \"./shared/services/instance-xml-parser.service\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SpecificationsModule,\n    DesignsModule,\n    InstancesModule,\n\t  SrHowToModule,\n    routing\n  ],\n  declarations: [\n    OrgServiceRegistryComponent\n  ],\n\tproviders: [\n\t\tSpecificationXmlParser,\n\t\tDesignXmlParser,\n\t\tInstanceXmlParser\n\t]\n})\nexport default class OrgServiceRegistryModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.module.ts","import { Routes, RouterModule }  from '@angular/router';\n\nimport { OrgServiceRegistryComponent } from './org-service-registry.component';\nimport {SpecificationsComponent} from \"./specifications/specifications.component\";\nimport {DesignsComponent} from \"./designs/designs.component\";\nimport {InstancesComponent} from \"./instances/instances.component\";\nimport {SrHowToComponent} from \"./sr-how-to/sr-how-to.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrgServiceRegistryComponent,\n    children: [\n\t    { path: 'howto', component: SrHowToComponent },\n\t    { path: 'specifications', component: SpecificationsComponent },\n      { path: 'designs', component: DesignsComponent },\n      { path: 'instances', component: InstancesComponent }\n\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.routing.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {ServiceRegistrySearchRequest} from \"../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\n\n@Injectable()\nexport class SrSearchRequestsService {\n\tprivate searchRequests: { [key: string]: ServiceRegistrySearchRequest } = {};\n  constructor() {\n  }\n\n  // Returns null if none found\n  public getSearchRequest(key:string) : ServiceRegistrySearchRequest {\n  \treturn this.searchRequests[key];\n\t}\n\n\tpublic addSearchRequest(key:string, searchRequest:ServiceRegistrySearchRequest) {\n  \tthis.searchRequests[key] = searchRequest;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\nimport {isNullOrUndefined} from \"util\";\n\n@Injectable()\nexport class SrViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  public generateLabelValuesForSpecification(specification:Specification, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (specification) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: specification.specificationId});\n      labelValues.push({label: 'Name', valueHtml: specification.name});\n      labelValues.push({label: 'Version', valueHtml: specification.version});\n\t    labelValues.push({label: 'Status', valueHtml: specification.status});\n\t\t  labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: specification.description});\n    }\n    return labelValues\n  }\n\n  public generateLabelValuesForDesign(design:Design, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (design) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: design.designId});\n      labelValues.push({label: 'Name', valueHtml: design.name});\n      labelValues.push({label: 'Version', valueHtml: design.version});\n      labelValues.push({label: 'Status', valueHtml: design.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: design.description});\n    }\n    return labelValues;\n  }\n\n  public generateLabelValuesForInstance(instance:Instance, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (instance) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: instance.instanceId});\n      labelValues.push({label: 'Name', valueHtml: instance.name});\n      labelValues.push({label: 'Version', valueHtml: instance.version});\n      labelValues.push({label: 'Status', valueHtml: instance.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: instance.description});\n\t    labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\n\n\t    if (!isNullOrUndefined(instance.compliant)) {\n\t    \tlet compliantClass =  instance.compliant ? '' : 'label-danger';\n\t\t    labelValues.push({label: 'Compliant', valueHtml: McUtils.getYesNoString(instance.compliant), linkClass: compliantClass});\n\t    }\n    }\n    return labelValues;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport { Specification } from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { SpecificationsService } from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport { FileHelperService } from \"../../../../../shared/file-helper.service\";\nimport { Design } from \"../../../../../backend-api/service-registry/autogen/model/Design\";\nimport { DesignsService } from \"../../../../../backend-api/service-registry/services/designs.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { SrViewModelService } from \"../../../shared/services/sr-view-model.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { EndorsementsService } from \"../../../../../backend-api/endorsements/services/endorsements.service\";\nimport { Observable } from \"rxjs\";\nimport { Endorsement } from \"../../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport { ServiceRegistrySearchRequest } from \"../../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\nimport { SrSearchRequestsService } from \"../../../shared/services/sr-search-requests.service\";\nimport { SHOW_ENDORSEMENTS } from \"../../../../../shared/app.constants\";\n\nconst SEARCH_KEY = 'SpecificationDetailsComponent';\n\n@Component({\n  selector: 'specification-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specification-details.html'),\n  styles: []\n})\nexport class SpecificationDetailsComponent {\n  public specification: Specification;\n  public designs: Array<Design>;\n  public title:string;\n  public labelValues:Array<LabelValueModel>;\n  public isLoadingSpecification: boolean;\n\tpublic isLoadingDesigns: boolean;\n  public onCreate: Function;\n  public onGotoDesign: Function;\n\tpublic showModal:boolean = false;\n\tpublic showModalNoDelete:boolean = false;\n\tpublic modalDescription:string;\n\tpublic modalDescriptionNoDelete:string;\n\n\t// Endorsements\n\tpublic isLoadingEndorsements:boolean;\n\tpublic isEndorsing:boolean;\n\tpublic showEndorsements:boolean;\n\tpublic isEndorsedByMyOrg:boolean;\n\tpublic endorsements:Array<Endorsement> = [];\n\tpublic endorseMainSwitch = SHOW_ENDORSEMENTS;\n\n\t// Search\n\tpublic isSearchingDesigns = false;\n\tpublic searchKey = SEARCH_KEY;\n\tprivate initialSearchRequest: ServiceRegistrySearchRequest;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private endorsementsService:EndorsementsService, private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService, private orgsService: OrganizationsService) {\n\n  }\n\n  ngOnInit() {\n    this.onCreate = this.createDesign.bind(this);\n    this.onGotoDesign = this.gotoDesign.bind(this);\n\n    this.isLoadingSpecification = true;\n    this.isLoadingDesigns = true;\n    this.title = 'Loading ...';\n    let specificationId = this.route.snapshot.params['id'];\n    let version = this.route.snapshot.queryParams['specificationVersion'];\n\t  this.loadSpecification(specificationId, version);\n\t  if (SHOW_ENDORSEMENTS) {\n\t\t\tthis.loadEndorsements(specificationId, version);\n\t  }\n  }\n\n  public downloadXml() {\n    this.fileHelperService.downloadXml(this.specification.specAsXml);\n  }\n\n  public downloadDoc() {\n    this.fileHelperService.downloadDoc(this.specification.specAsDoc);\n  }\n\n  private gotoDesign(index:number) {\n    this.navigationHelperService.navigateToOrgDesign(this.designs[index].designId, this.designs[index].version);\n  }\n\n\tprivate loadSpecification(specificationId:string, version:string) {\n\t\tthis.specificationsService.getSpecification(specificationId, version).subscribe(\n\t\t\tspecification => {\n\t\t\t\tthis.title = specification.name;\n\t\t\t\tthis.specification = specification;\n\t\t\t\tthis.loadOrganizationName();\n\t\t\t\tthis.loadDesigns();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// TODO: make this as a general component\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\n\t\t\t\t}\n\t\t\t\tthis.title = 'Error while loading';\n\t\t\t\tthis.isLoadingSpecification = false;\n\t\t\t\tthis.isLoadingDesigns = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadOrganizationName() {\n\t\tthis.orgsService.getOrganizationName(this.specification.organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.specification, organizationName);\n\t\t\t\tthis.isLoadingSpecification = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.specification, '');\n\t\t\t\tthis.isLoadingSpecification = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private loadDesigns() {\n\t  let searchRequest = this.searchRequestsService.getSearchRequest(SEARCH_KEY);\n\t  this.initialSearchRequest = searchRequest;\n\t\tthis.searchDesigns(searchRequest);\n  }\n\n  private createDesign() {\n    this.navigationHelperService.navigateToCreateDesign(this.specification.specificationId, this.specification.version);\n  }\n\n\tprivate isMyOrg():boolean {\n\t\treturn this.specification.organizationId === this.authService.authState.orgMrn;\n\t}\n\n\tprivate isServiceAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate isServiceAdminForOrg():boolean {\n\t\treturn (this.authService.authState.hasPermission(AuthPermission.ServiceAdmin) && this.isMyOrg()) || this.authService.authState.hasPermission(AuthPermission.SiteAdmin);\n\t}\n\n\tprivate isEndorseAdmin():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.isServiceAdminForOrg();\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelperService.navigateToUpdateSpecification(this.specification.specificationId, this.specification.version);\n\t}\n\n\tpublic shouldDisplayDelete():boolean {\n\t\treturn this.isServiceAdminForOrg() && !this.isLoadingDesigns;\n\t}\n\n\tprivate hasDesigns():boolean {\n\t\treturn this.designs && this.designs.length > 0;\n\t}\n\n\tprivate delete() {\n  \tif (this.hasDesigns()) {\n\t\t  this.modalDescriptionNoDelete = \"Specification can't be deleted with active Technical Designs.<br><br>You must first delete the Technical Designs.\";\n\t\t  this.showModalNoDelete = true;\n\t  } else {\n\t\t  this.modalDescription = 'Do you want to delete the specification?';\n\t\t  this.showModal = true;\n\t  }\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t\tthis.showModalNoDelete = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.showModal = false;\n\t\tthis.isLoadingSpecification = true;\n\t\tthis.specificationsService.deleteSpecification(this.specification).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.deleteEndorsements();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingSpecification = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\t// Endorsement\n\tprivate deleteEndorsements() {\n\t\tif (this.endorsements && this.endorsements.length > 0) {\n\t\t\tthis.endorsementsService.removeAllEndorsementsOfDesign(this.specification.specificationId).subscribe(\n\t\t\t\t() => {\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgSpecification('', '');\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete endorsements of specification', MCNotificationType.Error, err);\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgSpecification('', '');\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.navigationHelperService.navigateToOrgSpecification('', '');\n\t\t}\n\t}\n\n\tprivate loadEndorsements(specificationId:string, specificationVersion:string) {\n\t\tthis.isLoadingEndorsements = true;\n\t\tlet parallelObservables = [];\n\n\t\tparallelObservables.push(this.endorsementsService.isSpecificationEndorsedByMyOrg(specificationId, specificationVersion).take(1));\n\t\tparallelObservables.push(this.endorsementsService.getEndorsementsForSpecification(specificationId, specificationVersion).take(1));\n\n\t\treturn Observable.forkJoin(parallelObservables).subscribe(\n\t\t\tresultArray => {\n\t\t\t\tlet isEndorsedByMyOrg:any = resultArray[0];\n\t\t\t\tlet pageEndorsement: any = resultArray[1];\n\t\t\t\tthis.endorsements = pageEndorsement.content;\n\t\t\t\tthis.isEndorsedByMyOrg = isEndorsedByMyOrg;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.showEndorsements = true;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.showEndorsements = false;\n\t\t\t\tthis.isLoadingEndorsements = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get endorsements for specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic endorseToggle() {\n\t\tif (this.isEndorsedByMyOrg) {\n\t\t\tthis.removeEndorse();\n\t\t} else {\n\t\t\tthis.endorse();\n\t\t}\n\t}\n\n\tprivate endorse() {\n\t\tthis.isEndorsing = true;\n\t\tthis.endorsementsService.endorseSpecification(this.specification.specificationId, this.specification.version).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = true;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.specification.specificationId, this.specification.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to endorse specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate removeEndorse() {\n\t\tthis.isEndorsing = true;\n\t\tthis.endorsementsService.removeEndorsementOfSpecification(this.specification.specificationId, this.specification.version).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isEndorsedByMyOrg = false;\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.loadEndorsements(this.specification.specificationId, this.specification.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isEndorsing = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to remove endorse of specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic shouldDisplayEndorsementButton():boolean {\n\t\treturn SHOW_ENDORSEMENTS && this.isEndorseAdmin() && this.showEndorsements;\n\t}\n\t// Search\n\tpublic search(searchRequest: ServiceRegistrySearchRequest) {\n\t\tthis.isSearchingDesigns = true;\n\t\tthis.searchDesigns(searchRequest);\n\t}\n\n\tpublic searchDesigns(searchRequest:ServiceRegistrySearchRequest) {\n\t\tthis.designsService.searchDesignsForSpecification(searchRequest, this.specification.specificationId, this.specification.version).subscribe(\n\t\t\tdesigns => {\n\t\t\t\tthis.designs = designs;\n\t\t\t\tthis.isLoadingDesigns = false;\n\t\t\t\tthis.isSearchingDesigns = false;\n\t\t\t\tthis.initialSearchRequest = searchRequest;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.searchRequestsService.addSearchRequest(SEARCH_KEY, this.initialSearchRequest);\n\t\t\t\tthis.isLoadingDesigns = false;\n\t\t\t\tthis.isSearchingDesigns = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to search designs', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-label-value-table [isLoading]=\\\"isLoadingSpecification\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"specification && !isLoadingSpecification\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"specification.specAsDoc\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\n        </li>\\n        <li *ngIf=\\\"specification.specAsXml\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\n        </li>\\n        <li *ngIf=\\\"showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Specification</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Specification</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayEndorsementButton() && !isLoadingDesigns\\\">\\n          <mc-endorse-button [isEndorsedByMyOrg]=\\\"isEndorsedByMyOrg\\\" [isEndorsing]=\\\"isEndorsing\\\"[title]=\\\"'Specification'\\\" (onEndorse)=\\\"endorseToggle()\\\"></mc-endorse-button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"endorseMainSwitch\\\">\\n      <endorsed-by-list [title]=\\\"'Organizations endorsing the Specification (' + title + ')'\\\" [endorsements]=\\\"endorsements\\\" [isLoading]=\\\"isLoadingEndorsements\\\"></endorsed-by-list>\\n    </div>\\n\\n    <ba-card title=\\\"Designs implementing the Specification ({{specification?.name}})\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <div *ngIf=\\\"!isLoadingDesigns\\\">\\n        <service-registry-search [showKeywords]=\\\"false\\\" [searchTitle]=\\\"'Design search filters'\\\" [searchKey]=\\\"searchKey\\\" [isSearching]=\\\"isSearchingDesigns\\\" [showEndorsement]=\\\"true\\\" [preFilterMyOrg]=\\\"false\\\" (onSearch)=\\\"search($event)\\\"></service-registry-search>\\n\\n        <div class=\\\"separator\\\"></div>\\n      </div>\\n      <div class=\\\"create-loading-wrapper\\\">\\n        <mc-create-button [isAdmin]=\\\"isServiceAdmin()\\\" *ngIf=\\\"!isLoadingDesigns\\\" title=\\\"Register new Design\\\" [onClick]=\\\"onCreate\\\"></mc-create-button>\\n        <sk-fading-circle-small class=\\\"create-loading\\\" [isRunning]=\\\"isSearchingDesigns\\\"></sk-fading-circle-small>\\n      </div>\\n      <designs-table [designs]=\\\"designs\\\" [isLoading]=\\\"isLoadingDesigns\\\" [onRowClick]=\\\"onGotoDesign\\\"></designs-table>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete Specification'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n<mc-modal (onOk)=\\\"cancelModal()\\\" [show]=\\\"showModalNoDelete\\\" [title]=\\\"'Delete Specification'\\\" [description]=\\\"modalDescriptionNoDelete\\\" [okClass]=\\\"'btn btn-default btn-raised'\\\" [okTitle]=\\\"'OK'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html\n// module chunks = 1","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { SpecificationsService } from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport { Specification } from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { ServiceRegistrySearchRequest } from \"../../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\nimport { SrSearchRequestsService } from \"../../../shared/services/sr-search-requests.service\";\nimport { AuthPermission, AuthService } from '../../../../../authentication/services/auth.service';\n\nconst SEARCH_KEY = 'SpecificationListComponent';\n@Component({\n  selector: 'specification-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specification-list.html'),\n  styles: []\n})\nexport class SpecificationListComponent implements OnInit {\n\tpublic searchKey = SEARCH_KEY;\n\tpublic isSearching = false;\n\tpublic organization: Organization;\n  public specifications: Array<Specification>;\n  public isLoading: boolean;\n  public onCreate: Function;\n  public onGotoSpec: Function;\n\tpublic cardTitle:string;\n\tprivate initialSearchRequest: ServiceRegistrySearchRequest;\n  constructor(private authService: AuthService, private searchRequestsService:SrSearchRequestsService, private navigationService: NavigationHelperService, private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private specificationsService: SpecificationsService) {\n  }\n\n  ngOnInit() {\n\t  this.cardTitle = 'Specifications';\n    this.onCreate = this.createSpecification.bind(this);\n    this.onGotoSpec = this.gotoSpecification.bind(this);\n\n    this.isLoading = true;\n\t  this.loadMyOrganization();\n    this.loadSpecifications();\n  }\n\n  public search(searchRequest: ServiceRegistrySearchRequest) {\n  \tthis.isSearching = true;\n  \tthis.searchSpecifications(searchRequest);\n  }\n\n  public isAdmin(): boolean {\n  \treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n  }\n\n  private searchSpecifications(searchRequest: ServiceRegistrySearchRequest) {\n\t  this.specificationsService.searchSpecifications(searchRequest).subscribe(\n\t\t  specifications => {\n\t\t\t  this.specifications = specifications;\n\t\t\t  this.isSearching = false;\n\t\t\t  this.isLoading = false;\n\t\t\t  this.initialSearchRequest = searchRequest;\n\t\t  },\n\t\t  err => {\n\t\t\t  this.searchRequestsService.addSearchRequest(SEARCH_KEY, this.initialSearchRequest);\n\t\t\t  this.isSearching = false;\n\t\t\t  this.isLoading = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to search specifications', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private loadSpecifications() {\n  \tlet searchRequest = this.searchRequestsService.getSearchRequest(SEARCH_KEY);\n  \tthis.initialSearchRequest = searchRequest;\n  \tif (searchRequest) {\n  \t\tthis.searchSpecifications(searchRequest);\n\t  } else {\n\t    this.specificationsService.getSpecificationsForMyOrg().subscribe(\n\t      specifications => {\n\t        this.specifications = specifications;\n\t        this.isLoading = false;\n\t      },\n\t      err => {\n\t        this.isLoading = false;\n\t        this.notifications.generateNotification('Error', 'Error when trying to get specifications', MCNotificationType.Error, err);\n\t      }\n\t    );\n\t  }\n  }\n\n  private createSpecification() {\n    this.navigationService.navigateToCreateSpecification();\n  }\n\n  private gotoSpecification(index:number) {\n    this.router.navigate([this.specifications[index].specificationId], {queryParams: { specificationVersion: this.specifications[index].version}, relativeTo: this.route })\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <service-registry-search [searchTitle]=\\\"'Search filters'\\\" [searchKey]=\\\"searchKey\\\" [isSearching]=\\\"isSearching\\\" [showEndorsement]=\\\"true\\\" [preFilterMyOrg]=\\\"true\\\" (onSearch)=\\\"search($event)\\\"></service-registry-search>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <mc-create-button [isAdmin]=\\\"isAdmin()\\\" *ngIf=\\\"!isLoading\\\" title=\\\"Register new Specification\\\" [onClick]=\\\"onCreate\\\" ></mc-create-button>\\n      <specifications-table [specifications]=\\\"specifications\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoSpec\\\"></specifications-table>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\nimport * as _ from 'lodash';\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {SpecificationXmlParser} from \"../../../shared/services/specification-xml-parser.service\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\n\n@Component({\n  selector: 'specification-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specification-new.html'),\n  styles: []\n})\nexport class SpecificationNewComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\n\tpublic labelValues:Array<LabelValueModel>;\n\tprivate parsedSpecification:Specification;\n\n\tpublic hasMrnError: boolean = false;\n\tpublic mrnErrorText: string;\n\n  public organization: Organization;\n  public captionXml = 'Upload Specification XML file';\n  public captionDoc = 'Upload Specification Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public requiredTextXml = 'You need to upload XML file';\n  public requiredTextDoc = 'You need to upload a DOCX, ODT or PDF file';\n  public isFormValid = false;\n  public isLoading = true;\n\n  public isRegistering = false;\n  public registerTitle = \"Register Specification\";\n  public registerButtonClass = \"btn btn-danger btn-raised\";\n  public onRegister: Function;\n\n  private xml:Xml;\n  private doc:Doc;\n\n  constructor(private viewModelService: SrViewModelService, private xmlParser: SpecificationXmlParser, private mrnHelper: MrnHelperService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService, private orgService: OrganizationsService) {\n  }\n\n  ngOnInit() {\n    this.onRegister = this.register.bind(this);\n    this.isRegistering = false;\n    this.loadMyOrganization();\n    this.calculateFormValid();\n    this.updateUI();\n  }\n\n  public calculateFormValid() {\n    this.isFormValid = this.xml != null;\n  }\n\n  public onUploadDoc(file: Doc) {\n    this.doc = file;\n    this.calculateFormValid();\n  }\n\n  public onUploadXml(file: Xml) {\n\t  if (file && this.isXmlValid(file)) {\n\t    this.xml = file;\n    } else {\n\t\t  this.resetXmlFile();\n\t  }\n    this.calculateFormValid();\n\t  this.updateUI();\n  }\n\n  private isXmlValid(file: Xml) : boolean {\n\t  try {\n\t  \tlet mrn = this.xmlParser.getMrn(file);\n\t  \tlet isValid = this.mrnHelper.checkMrnForSpecification(mrn);\n\t\t  this.hasMrnError = !isValid;\n\t\t  if (!isValid) {\n\t\t  \tthis.mrnErrorText = \"The ID in the XML-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\n\t\t\t\t    + this.mrnHelper.mrnMaskForSpecification() + \"'ID'<BR>\"\n\t\t\t\t    + \"'ID'=\" + this.mrnHelper.mrnPatternError();\n\t\t  }\n\t\t  return isValid;\n\t  } catch ( error ) {\n\t\t  this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t  return false;\n\t  }\n  }\n\n  public cancel() {\n    this.navigationService.cancelCreateSpecification();\n  }\n\n  public register() {\n    this.isRegistering = true;\n\t  this.createSpecification(this.parsedSpecification);\n  }\n\n  private createSpecification(specification:Specification) {\n    this.specificationsService.createSpecification(specification).subscribe(\n      specification => {\n        this.isRegistering = false;\n        this.navigationService.navigateToOrgSpecification(specification.specificationId, specification.version);\n      },\n      err => {\n        this.isRegistering = false;\n        this.notifications.generateNotification('Error', 'Error when trying to create specification', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private loadMyOrganization() {\n    this.isLoading = true;\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n        this.isLoading = false;\n      },\n      err => {\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error);\n        this.isLoading = false;\n      }\n    );\n  }\n\n  private resetXmlFile(){\n\t  this.xml = null;\n\t  this.fileUploadXml.resetFileSelection();\n  }\n\n  private updateUI() {\n\t  if (this.xml) {\n\t\t  this.parseSpecification();\n\t  } else {\n\t\t  this.parsedSpecification = null;\n\t\t  this.setupLableValues();\n\t  }\n  }\n\n  private parseSpecification() {\n\t  this.parsedSpecification = null;\n    try {\n\t\t  var specification:Specification = {};\n\t\t  specification.specAsXml = _.cloneDeep(this.xml);\n\t\t  specification.specAsDoc = this.doc;\n\t\t  specification.name = this.xmlParser.getName(this.xml);\n\t\t  specification.description = this.xmlParser.getDescription(this.xml);\n\t\t  specification.specificationId = this.xmlParser.getMrn(this.xml);\n\t\t  specification.keywords = this.xmlParser.getKeywords(this.xml);\n\t\t  specification.status = this.xmlParser.getStatus(this.xml);\n\t\t  specification.organizationId = this.organization.mrn;\n\t\t  specification.version = this.xmlParser.getVersion(this.xml);\n\n\t    this.parsedSpecification = specification;\n\t  } catch ( error ) {\n\t\t  this.isRegistering = false;\n\t\t  this.resetXmlFile();\n\t\t  this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t  } finally {\n\t    this.setupLableValues();\n\t  }\n  }\n\n  private setupLableValues() {\n\t  this.labelValues = [];\n\t  this.labelValues.push({label: 'Upload XML', valueHtml: ''});\n  \tif (this.organization && this.parsedSpecification) {\n\t\t  this.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.parsedSpecification, this.organization.name);\n\t  }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Specification for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <div *ngIf=\\\"organization?.mrn\\\">\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" [requiredText]=\\\"requiredTextDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasMrnError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"mrnErrorText | undefined | sanitizeHtml\\\"></div>\\n          <ul class=\\\"btn-list clearfix\\\">\\n            <li>\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\n            </li>\\n            <li>\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n            </li>\\n          </ul>\\n        </form>\\n\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      </div>\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!organization?.mrn && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {\n    McFormControlModel, McFormControlModelSelect,\n    McFormControlType, SelectModel\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {FormGroup, FormControl, FormBuilder} from \"@angular/forms\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {Observable} from \"rxjs\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {SpecificationXmlParser} from \"../../../shared/services/specification-xml-parser.service\";\n\n@Component({\n  selector: 'specification-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specification-update.html'),\n  styles: []\n})\nexport class SpecificationUpdateComponent implements OnInit {\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\n\tpublic hasError: boolean = false;\n\tpublic errorText: string;\n\n\tpublic labelValuesParsed:Array<LabelValueModel>;\n\tprivate parsedSpecification:Specification;\n\n  public specification: Specification;\n\n  public labelValues:Array<LabelValueModel>;\n  public captionXml = 'Upload Specification XML file';\n  public captionDoc = 'Upload Specification Document file';\n  public fileTypeXml = FileUploadType.Xml;\n  public fileTypeDoc = FileUploadType.Doc;\n  public isLoading = true;\n\n  public isUpdating = false;\n  public updateTitle = \"Update Specification\";\n  public isFormChanged = false;\n  private xml:Xml;\n  private doc:Doc;\n\n\tprivate specificationIdFromRoute:string;\n\tprivate versionFromRoute:string;\n\tprivate status:string = '';\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private orgsService:OrganizationsService, private viewModelService: SrViewModelService, private formBuilder: FormBuilder, private xmlParser: SpecificationXmlParser, private router: Router, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadSpecification();\n\t\tthis.updateUI();\n\t}\n\n\tpublic setFormChanged() {\n\t\tvar changed = false;\n\t\tif (this.xml || this.doc) {\n\t\t\tchanged = true;\n\t\t} else if (this.status != this.specification.status) {\n\t\t\tchanged = true;\n\t\t}\n\t\tthis.isFormChanged = changed;\n\t}\n\n\tpublic onUploadDoc(file: Doc) {\n\t\tthis.doc = file;\n\t\tthis.hasError = false;\n\t\tthis.setFormChanged();\n\t\tthis.generateForm();\n\t}\n\n\tpublic onUploadXml(file: Xml) {\n\t\tthis.hasError = false;\n\t\tif (file) {\n\t\t\tlet isValid = this.isXmlValid(file);\n\t\t\tthis.hasError = !isValid;\n\t\t\tif (isValid) {\n\t\t\t\tthis.xml = file;\n\t\t\t} else {\n\t\t\t\tthis.resetXmlFile();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.hasError = false;\n\t\t\tthis.resetXmlFile();\n\t\t}\n\t\tthis.setFormChanged();\n\t\tthis.generateForm();\n\t\tthis.updateUI();\n\t}\n\n\tprivate resetXmlFile() {\n\t\tthis.status = this.specification.status;\n\t\tthis.xml = null;\n\t\tthis.fileUploadXml.resetFileSelection();\n\t\tthis.updateUI();\n\t}\n\n\tprivate updateUI() {\n\t\tif (this.xml) {\n\t\t\tthis.parseSpecification();\n\t\t} else {\n\t\t\tthis.parsedSpecification = null;\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate isXmlValid(file: Xml) : boolean {\n\t\ttry {\n\t\t\treturn this.parseDisplayValues(file);\n\t\t} catch ( error ) {\n\t\t\tthis.errorText  = \"Error in XML.<BR>\";\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate parseSpecification() {\n\t\tthis.parsedSpecification = null;\n\t\ttry {\n\t\t\tif (this.xml) {\n\t\t\t\tvar specification:Specification = _.cloneDeep(this.specification);\n\t\t\t\t// Already contains an XML, so just update the values and not the ID\n\t\t\t\tspecification.specAsXml.content = this.xml.content;\n\t\t\t\tspecification.specAsXml.contentContentType = this.xml.contentContentType;\n\t\t\t\tspecification.specAsXml.name = this.xml.name;\n\t\t\t\tspecification.name = this.xmlParser.getName(this.xml);\n\t\t\t\tspecification.description = this.xmlParser.getDescription(this.xml);\n\t\t\t\tspecification.status = this.xmlParser.getStatus(this.xml);\n\t\t\t\tspecification.version = this.xmlParser.getVersion(this.xml);\n\t\t\t\tthis.parsedSpecification = specification;\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.isUpdating = false;\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\n\t\t\tthis.resetXmlFile();\n\t\t\tthis.setFormChanged();\n\t\t\tthis.generateForm();\n\t\t\tthis.updateUI();\n\t\t} finally {\n\t\t\tthis.setupLableValuesParsed();\n\t\t}\n\t}\n\n\tprivate parseDisplayValues(file:Xml):boolean {\n\t\tthis.status = this.xmlParser.getStatus(file);\n\t\tlet parsedMrn = this.xmlParser.getMrn(file);\n\t\tlet parsedVersion = this.xmlParser.getVersion(file);\n\t\tif (parsedMrn != this.specification.specificationId || parsedVersion != this.specification.version) {\n\t\t\tthis.errorText  = \"The MRN and Version in the XML are not the same as the MRN and Version of this Specification. If the MRN or Version needs to be changed, please create a NEW Specification instead of updating an existing.<BR><BR>\"\n\t\t\t\t+ \"Xml-parsed MRN: \" + parsedMrn + \"<BR>\"\n\t\t\t\t+ \"Xml-parsed Version: \" + parsedVersion + \"<BR>\";\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate setupLableValuesParsed() {\n\t\tthis.labelValuesParsed = [];\n\t\tthis.labelValuesParsed.push({label: 'Upload XML', valueHtml: ''});\n\t\tif (this.parsedSpecification) {\n\t\t\tthis.orgsService.getOrganizationName(this.specification.organizationId).subscribe(\n\t\t\t\torganizationName => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForSpecification(this.parsedSpecification, organizationName);\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tthis.labelValuesParsed = this.viewModelService.generateLabelValuesForSpecification(this.parsedSpecification, '');\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.navigateToOrgSpecification(this.specificationIdFromRoute, this.versionFromRoute);\n\t}\n\n\tpublic update() {\n\t\tthis.isUpdating = true;\n\t\tif (this.xml || this.doc) {\n\t\t\tif (this.xml) {\n\t\t\t\tthis.specification = this.parsedSpecification;\n\t\t\t}\n\t\t\tif (this.doc) {\n\t\t\t\tif (this.specification.specAsDoc) { // Already contains a Doc, so just update the values and not the ID\n\t\t\t\t\tthis.specification.specAsDoc.filecontent = this.doc.filecontent;\n\t\t\t\t\tthis.specification.specAsDoc.filecontentContentType = this.doc.filecontentContentType;\n\t\t\t\t\tthis.specification.specAsDoc.name = this.doc.name;\n\t\t\t\t} else {\n\t\t\t\t\tthis.specification.specAsDoc = this.doc;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateSpecification();\n\t\t} else {\n\t\t\tthis.status = this.updateForm.value.status;\n\t\t\tthis.updateStatus();\n\t\t}\n\t}\n\n\tprivate updateStatus() {\n\t\tthis.specificationsService.updateStatus(this.specification, this.status).subscribe(_ => {\n\t\t\t\tthis.navigationService.navigateToOrgSpecification(this.specification.specificationId, this.specification.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update status of specification', MCNotificationType.Error, err);\n\t\t\t});\n\t}\n\n\tprivate updateSpecification() {\n\t\tlet updateDoc = this.doc != null;\n\t\tlet updateXml = this.xml != null;\n\t\tthis.specificationsService.updateSpecification(this.specification, updateDoc, updateXml).subscribe(_ => {\n\t\t\t\tthis.navigationService.navigateToOrgSpecification(this.specification.specificationId, this.specification.version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update specification', MCNotificationType.Error, err);\n\t\t\t});\n\t}\n\n\tprivate loadSpecification() {\n\t\tthis.specificationIdFromRoute = this.activatedRoute.snapshot.params['id'];\n\t\tthis.versionFromRoute = this.activatedRoute.snapshot.queryParams['specificationVersion'];\n\t\tthis.specificationsService.getSpecification(this.specificationIdFromRoute, this.versionFromRoute).subscribe(\n\t\t\tspecification => {\n\t\t\t\tthis.specification = specification;\n\t\t\t\tthis.status = this.specification.status;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// TODO: make this as a general component\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.router.navigate(['/error404'], {relativeTo: this.activatedRoute, replaceUrl: true })\n\t\t\t\t}\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get specification', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.specification.specificationId});\n\t\tthis.labelValues.push({label: 'Name', valueHtml: this.specification.name});\n\t\tthis.labelValues.push({label: 'Version', valueHtml: this.specification.version});\n\t}\n\n\tprivate setStatus(status:string) {\n\t\tthis.status = status;\n\t\tthis.setFormChanged();\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModelSelect;\n\t\tlet disableStatus = this.xml != null || this.doc != null;\n\t\t// TODO Get dynamically from XSD\n\t\tlet statusSelect:Array<SelectModel> = [{label: \"provisional\", value: \"provisional\", isSelected: false},\n\t\t\t{label: \"released\", value: \"released\", isSelected: false}, {label: \"deprecated\", value: \"deprecated\", isSelected: false},\n\t\t\t{label: \"deleted\", value: \"deleted\", isSelected: false}];\n\t\tstatusSelect.forEach(status => \t{if (status.value === this.status) status.isSelected = true});\n\t\tif (disableStatus) {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: '', isDisabled: disableStatus};\n\t\t} else {\n\t\t\tformControlModel = {selectValues: statusSelect, showCheckmark: false, formGroup: this.updateForm, elementId: 'status', controlType: McFormControlType.Select, labelName: 'Status', placeholder: ''};\n\t\t}\n\t\tvar formControl = new FormControl(this.status, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.setStatus(param));\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-update/specification-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Specification - {{specification?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5>Updating Specification</h5>\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n\\n      <div class=\\\"separator\\\"></div>\\n\\n      <div *ngIf=\\\"specification\\\">\\n        <div class=\\\"important-notice-big\\\">\\n          If only the <span>status</span> needs to be updated, leave the <span>XML</span> and <span>Document</span> fields empty.<br>\\n          <br>\\n          If a new XML-file is uploaded the <span>status</span> will be parsed from the XML.\\n        </div>\\n        <div class=\\\"separator\\\"></div>\\n        <form>\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\n          <div *ngIf=\\\"hasError\\\" class=\\\"error-notice\\\" [innerHTML]=\\\"errorText | undefined | sanitizeHtml\\\"></div>\\n          <mc-form [isFormValid]=\\\"isFormChanged\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n        </form>\\n\\n        <div class=\\\"separator\\\"></div>\\n\\n        <mc-label-value-table [isLoading]=\\\"false\\\" [labelValues]=\\\"labelValuesParsed\\\"></mc-label-value-table>\\n      </div>\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!specification && !isLoading\\\">No data</div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-update/specification-update.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-update/specification-update.html\n// module chunks = 1","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'specifications',\n  template: `<router-outlet></router-outlet>`\n})\nexport class SpecificationsComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './specifications.routing';\nimport {SpecificationsComponent} from \"./specifications.component\";\nimport {SpecificationListComponent} from \"./components/specification-list/specification-list.component\";\nimport {SpecificationDetailsComponent} from \"./components/specification-details/specification-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {SpecificationNewComponent} from \"./components/specification-new/specification-new.component\";\nimport {SpecificationUpdateComponent} from \"./components/specification-update/specification-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    SpecificationsComponent,\n    SpecificationDetailsComponent,\n    SpecificationListComponent,\n    SpecificationNewComponent,\n\t  SpecificationUpdateComponent\n  ]\n})\nexport default class SpecificationsModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {SpecificationsComponent} from \"./specifications.component\";\nimport {SpecificationListComponent} from \"./components/specification-list/specification-list.component\";\nimport {SpecificationDetailsComponent} from \"./components/specification-details/specification-details.component\";\nimport {SpecificationNewComponent} from \"./components/specification-new/specification-new.component\";\nimport {SpecificationUpdateComponent} from \"./components/specification-update/specification-update.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'specifications',\n    component: SpecificationsComponent,\n    data:{breadcrumb: 'Specifications'},\n    children: [\n      {\n        path: '',\n        component: SpecificationListComponent\n      },\n      {\n        path: 'register',\n        component: SpecificationNewComponent,\n        data:{breadcrumb: 'Register'}\n      },\n      {\n        path: ':id',\n        component: SpecificationDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: SpecificationUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.routing.ts","import {Component, ViewEncapsulation} from '@angular/core';\nimport {Xsd} from \"../../../backend-api/service-registry/autogen/model/Xsd\";\nimport {FileHelperService} from \"../../../shared/file-helper.service\";\nimport {XsdsService} from \"../../../backend-api/service-registry/services/xsds.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'sr-how-to',\n  encapsulation: ViewEncapsulation.None,\n  styles: [],\n  template: require('./sr-how-to.html')\n})\nexport class SrHowToComponent {\n  public xsds: Array<Xsd>;\n\n  constructor(private notifications: MCNotificationsService, private xsdsService: XsdsService, private fileHelperService: FileHelperService) {\n  }\n\n  ngOnInit() {\n\t\tthis.xsdsService.getXsds().subscribe(\n\t\t\txsds => {\n\t\t\t\tthis.xsds = xsds;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the XSDs', MCNotificationType.Error, err);\n\t\t\t}\n\t\t)\n  }\n\n  public download(xsd:Xsd) {\n\t  this.fileHelperService.downloadBase64File(xsd.content, xsd.contentContentType, xsd.name);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Service Registry - How to?\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5 style=\\\"margin-bottom: 2px;\\\">Guide on how to make services for the Maritime Connectivity Platform - Concepts and how to:</h5>\\n      <a href=\\\"http://maritimeconnectivity.net/docs/Service_Documentation_Guidelines.pdf\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Service Specification Guideline</a>\\n\\n      <h5 style=\\\"margin-bottom: 2px; margin-top: 15px\\\">TEMPLATES:</h5>\\n      <a href=\\\"http://maritimeconnectivity.net/docs/Service_Specification_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Specification template</a>\\n      <BR/>\\n      <a href=\\\"http://maritimeconnectivity.net/docs/Service_Design_Description_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Technical Design template</a>\\n      <BR/>\\n      <a href=\\\"http://maritimeconnectivity.net/docs/Service_Instance_Description_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Instance template</a>\\n      <div *ngIf=\\\"xsds && xsds.length>0\\\">\\n        <h5 style=\\\"margin-bottom: 2px; margin-top: 15px\\\">XSDs:</h5>\\n        <div *ngFor=\\\"let xsd of xsds\\\">\\n          <a (click)=\\\"download(xsd)\\\" class=\\\"learn-more\\\">Download {{xsd.name}}</a>\\n          <BR/>\\n        </div>\\n      </div>\\n      <BR/>\\n      <BR/>\\n      If you have any questions or comments please use the <a href=\\\"https://groups.google.com/forum/#!forum/maritimeconnectivity\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Maritime Connectivity Platform Google Group</a>\\n    </ba-card>\\n    <ba-card title=\\\"MCP - versions\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mcp-versions-view></mcp-versions-view>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html\n// module id = ./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html\n// module chunks = 1","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {routing} from \"./sr-how-to.routing\";\nimport {SrHowToComponent} from \"./sr-how-to.component\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {NgaModule} from \"../../../theme/nga.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgaModule,\n    routing\n  ],\n  declarations: [\n    SrHowToComponent\n  ]\n})\nexport default class SrHowToModule {}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {SrHowToComponent} from \"./sr-how-to.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'howto',\n    component: SrHowToComponent,\n    data:{breadcrumb: 'How To?'},\n    children: [\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.routing.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\nimport {CertificateBundle} from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\nimport {TOKEN_DELIMITER} from \"../../../../shared/app.constants\";\n\n\n@Component({\n  selector: 'certificate-issue-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-issue-new.html'),\n  styles: []\n})\nexport class CertificateIssueNewComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n  public entityTitle: string;\n  public isLoading: boolean;\n  public certificate: CertificateBundle;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = false;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n    this.generateLabelValues();\n  }\n\n  public zipAndDownload() {\n    this.fileHelper.downloadPemCertificate(this.certificate, this.entityTitle);\n  }\n\n  public issueNew() {\n    this.isLoading = true;\n    this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(\n      certificateBundle => {\n        this.certificate = certificateBundle;\n        this.isLoading = false;\n      },\n      err => {\n        this.isLoading = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn.split(TOKEN_DELIMITER)[0]});\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !certificate && !isLoading\\\">\\n        <h5>Issuing a new certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n\\n      <!-- After issue and success -->\\n      <div *ngIf=\\\"certificate\\\">\\n        Certificate issued with success\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, McFormControlModelDatepicker, SelectModel\n} from \"../../../../theme/components/mcForm/mcFormControlModel\";\nimport {SelectValidator} from \"../../../../theme/validators/select.validator\";\nimport {CertificateRevocation} from \"../../../../backend-api/identity-registry/autogen/model/CertificateRevocation\";\nimport RevokationReasonEnum = CertificateRevocation.RevokationReasonEnum;\n\n\n@Component({\n  selector: 'certificate-revoke',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-revoke.html'),\n  styles: []\n})\nexport class CertificateRevokeComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n\tpublic entityTitle: string;\n\tpublic certificateId: string;\n  public isLoading: boolean;\n  \n\tpublic isRevoking = false;\n\tpublic revokeTitle = \"Revoke\";\n\tpublic revokeForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private certificateHelper:CertificateHelperService, private formBuilder: FormBuilder, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n\t  let entityTitle = this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n\t  let certificateId = this.route.snapshot.queryParams[queryKeys.CERT_ID];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to revoke certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n\t  this.certificateId = certificateId;\n    this.generateLabelValues();\n    this.generateForm();\n\n\t  this.isLoading = false;\n  }\n\n  public revoke() {\n    this.isRevoking = true;\n    let revokeDate:Date = this.revokeForm.value.revokedAt;\n\t  let tempRevocationReason = this.revokeForm.value.revocationReason;\n\t  var revocationReason:RevokationReasonEnum = null;\n\t  if (tempRevocationReason && tempRevocationReason.toLowerCase().indexOf('undefined') < 0) {\n\t\t  revocationReason = tempRevocationReason;\n\t  }\n    let certificateRevocation:CertificateRevocation = {revokationReason:revocationReason, revokedAt:revokeDate.getTime()+''}\n    this.certificateService.revokeCertificate(this.entityType, this.entityMrn, this.certificateId, certificateRevocation).subscribe(\n      _ => {\n        this.isRevoking = false;\n        this.navigationHelper.cancelNavigateCertificates();\n      },\n      err => {\n        this.isRevoking = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to revoke certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\n  }\n  \n\tprivate generateForm() {\n\t\tthis.revokeForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tlet selectValues = this.selectValues();\n\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.revokeForm, elementId: 'revocationReason', controlType: McFormControlType.Select, labelName: '', placeholder: '', validator:SelectValidator.validate, showCheckmark:false};\n\t\tvar formControl = new FormControl('', formControlModelSelect.validator);\n\t\tthis.revokeForm.addControl(formControlModelSelect.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\tlet formControlModel:McFormControlModelDatepicker = {minDate:new Date(), formGroup: this.revokeForm, elementId: 'revokedAt', controlType: McFormControlType.Datepicker, labelName: '', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.revokeForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose reason...', isSelected: true});\n\t\tlet allrevokeTypes = this.certificateHelper.getAllRevocationTypes();\n\t\tallrevokeTypes.forEach(revokeType => {\n\t\t\tselectValues.push({value:revokeType.value, label:revokeType.label, isSelected: false});\n\t\t});\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Revoke certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !isLoading\\\">\\n        <h5>Revoking certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <br>\\n        <h5>\\n          Please choose a reason and date for revocation.\\n        </h5>\\n        <mc-form [formGroup]=\\\"revokeForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRevoking\\\" [registerTitle]=\\\"revokeTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"revoke()\\\"></mc-form>\\n      </div>\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module id = ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module chunks = 0 1 2 3 4","import { Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { Certificate } from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\nimport {\n    CertificateEntityType,\n    CertificateHelperService\n} from \"../../services/certificate-helper.service\";\nimport { DATE_FORMAT } from \"../../../../theme/theme.constants\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { CertificateViewModel } from \"../../view-models/CertificateViewModel\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { MCNotificationsService } from \"../../../../shared/mc-notifications.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { PemCertificate } from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {\n    TableActionButton,\n    TableCell,\n    TableCellActionButtons,\n    TableHeader,\n    TableRow\n} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport { DatePipe } from \"@angular/common\";\nimport { CertificateBundle } from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\n\n@Component({\n  selector: 'certificates-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificates-table.html'),\n  styles: [require('./certificates-table.scss')]\n})\nexport class CertificatesTableComponent implements OnChanges{\n  @Input() certificates: Array<Certificate>;\n  @Input() certificateEntityType: CertificateEntityType;\n  @Input() entityMrn: string;\n  @Input() isLoading: boolean;\n  @Input() certificateTitle: string;\n  @Input() isAdmin: boolean;\n\n\tpublic tableHeaders: Array<TableHeader>;\n\tpublic tableRows: Array<TableRow>;\n  public newCertificateTitle = \"Issue new Certificate\";\n  public certificateViewModels: Array<CertificateViewModel>;\n  public tableClass:string;\n  public onIssueCertificate: Function;\n\n\tpublic onDownload:Function;\n\n  constructor(private datePipe: DatePipe, private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\n    this.onIssueCertificate = this.issueCertificate.bind(this);\n  }\n\n\tngOnInit() {\n\t\tif (!this.authService.authState.rolesLoaded) {\n\t\t\tthis.authService.rolesLoaded.subscribe((mode)=> {\n\t\t\t\tthis.generateHeadersAndRows();\n\t\t\t});\n\t\t}\n\t}\n\n  ngOnChanges() {\n    if (this.certificates) {\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\n      this.sortCertificates();\n\t    this.generateHeadersAndRows();\n    }\n  }\n\tprivate generateHeadersAndRows() {\n\t\tvar tableHeaders: Array<TableHeader> = [];\n\t\tvar tableRows: Array<TableRow> = [];\n\n\t\tvar tableHeader: TableHeader = {title:'Certificate', class:''};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid from', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid to', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'', class:'table-buttons'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\tfor (let certificate of this.certificateViewModels) {\n\t\t\tvar cells:Array<TableCell> = [];\n\n\t\t\tvar tableCell: TableCell = {valueHtml:'Certificate for ' + this.certificateTitle, class:'', truncateNumber:50};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.start, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.end, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\tif (certificate.revoked) {\n\t\t\t\ttableCell = {valueHtml:'Revoked (' + certificate.revokeReasonText + ')', class:'red-text', truncateNumber:50};\n\t\t\t\tcells.push(tableCell);\n\t\t\t} else {\n\t\t\t\tlet actionButtons:Array<TableActionButton> = [];\n\t\t\t\tlet actionButton:TableActionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick:() => {this.download(certificate)}};\n\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\tif (this.isAdmin) {\n\t\t\t\t\tactionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Revoke certificate', onClick:() => {this.revoke(certificate)}};\n\t\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\t}\n\t\t\t\tlet tableCellActionButtons: TableCellActionButtons = {valueHtml:'', class:'table-buttons', truncateNumber:0, actionButtons:actionButtons};\n\t\t\t\tcells.push(tableCellActionButtons);\n\t\t\t}\n\n\t\t\tlet tableRow: TableRow = {cells: cells};\n\t\t\ttableRows.push(tableRow);\n\t\t}\n\n\t\tthis.tableHeaders = tableHeaders;\n\t\tthis.tableRows = tableRows;\n\t}\n  private sortCertificates() {\n    // We are sorting with longest due date on top\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\n      var obj1Time:number;\n      var obj2Time:number;\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\n      if (typeof obj1.end === \"Date\") {\n        obj1Time = obj1.end.getTime();\n      } else {\n        obj1Time = obj1.end;\n      }\n      if (typeof obj2.end === \"Date\") {\n        obj2Time = obj2.end.getTime();\n      } else {\n        obj2Time = obj2.end;\n      }\n\n      if (obj1.revoked && obj2.revoked) {\n        return obj2Time - obj1Time;\n      }\n      if (obj1.revoked) {\n        return 1;\n      }\n      if (obj2.revoked) {\n        return -1;\n      }\n      return obj2Time - obj1Time;\n    });\n  }\n\n  public issueCertificate() {\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\n  }\n\n  public revoke(certificate:Certificate) {\n  \tthis.navigationHelper.navigateToRevokeCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle, certificate.serialNumber);\n  }\n\n  public download(certificate:Certificate) {\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\n    let certBundle:CertificateBundle = {pemCertificate:pemCertificate};\n    this.fileHelper.downloadPemCertificate(certBundle, this.certificateTitle);\n  }\n\n  public canCreate(): boolean {\n      return this.isAdmin;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\"></mc-table>\\n<div *ngIf=\\\"!isLoading\\\">\\n  <mc-create-button [isAdmin]=\\\"canCreate()\\\" [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3 4","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'designs-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./designs-table.html'),\n  styles: []\n})\nexport class DesignsTableComponent implements OnChanges {\n  @Input() designs: Array<Design>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.designs) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let design of this.designs) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, design.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input} from '@angular/core';\nimport {EntityImageModel} from \"../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {Observable} from \"rxjs\";\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport {Endorsement} from \"../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'endorsed-by-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./endorsed-by-list.html'),\n  styles: []\n})\nexport class EndorsedByListComponent {\n\t@Input() endorsements:Array<Endorsement>;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\tprivate cardTitle:string;\n\n\tprivate oldEndorsements:Array<Endorsement>;\n\tpublic entityImageList: Array<EntityImageModel>;\n\n  constructor(private logoService: LogoService, private authService: AuthService, private orgService:OrganizationsService, private navigationHelper:NavigationHelperService) {\n  }\n\n  ngOnInit() {\n  \tthis.cardTitle = this.title;\n\t  this.generateEntityImageList();\n  }\n\n\tngOnChanges() {\n\t\tthis.cardTitle = this.title;\n\t\tthis.generateEntityImageList();\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (this.isMyOrg(entityModel.entityId)) {\n\t\t\tthis.navigationHelper.takeMeHome();\n\t\t} else {\n\t\t\tthis.navigationHelper.navigateToOrganizationDetails(entityModel.entityId)\n\t\t}\n\t}\n\n\tprivate isMyOrg(orgMrn) {\n\t\treturn this.authService.authState.orgMrn === orgMrn;\n\t}\n\n  private generateEntityImageList() {\n  \tif (this.endorsements) {\n  \t\tif (this.endorsements !== this.oldEndorsements) { // Check to see if the endorsements is the same as last time we generated the list, because no need to do all this load again if not needed\n\t\t\t\tthis.oldEndorsements = this.endorsements;\n\t\t\t  this.entityImageList = [];\n\t\t\t  this.endorsements.forEach(endorsement => {\n\t\t\t\t\t\tlet entityImage:EntityImageModel = {imageSourceObservable:this.createImgObservable(endorsement.orgMrn), entityId:endorsement.orgMrn, title:endorsement.orgName};\n\n\t\t\t\t    this.entityImageList.push(entityImage);\n\t\t\t\t  }\n\t\t\t  );\n\t\t  }\n\t  }\n  }\n\n  private createImgObservable(orgMrn:string):Observable<string> {\n\t  let imageSrc = 'assets/img/no_organization.png';\n\t  return Observable.create(observer => {\n\t\t  this.logoService.getLogoForOrganization(orgMrn).subscribe(\n\t\t\t  logo => {\n\t\t\t\t  observer.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  observer.next(imageSrc);\n\t\t\t  }\n\t\t  );\n\t  });\n  }\n\n\tprivate setRealOrganizationName(entityImage:EntityImageModel, organizationMrn:string) {\n\t\tthis.orgService.getOrganizationName(organizationMrn).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tentityImage.title = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// Do nothing. We already have a name set, which should be correct 99% of the time\n\t\t\t}\n\t\t);\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [noDataText]=\\\"'None'\\\" [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module id = ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\n\n@Component({\n  selector: 'instances-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instances-table.html'),\n  styles: []\n})\nexport class InstancesTableComponent implements OnChanges {\n  @Input() instances: Array<Instance>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.instances) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Compliant', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Service endpoint', class:''};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Description', class:''};\n\t  tableHeaders.push(tableHeader);\n\n    for (let instance of this.instances) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:45};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    let compliantClass = instance.compliant ? '' : 'label-danger';\n\t    tableCell = {valueHtml:McUtils.getYesNoString(instance.compliant), class:'nowrap ' + compliantClass, truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:25};\n\t    this.setOrganizationCell(tableCell, instance.organizationId);\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.endpointUri, class:'list-endpoint', truncateNumber:60};\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.description, class:'table-description-short', truncateNumber:150};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3 4","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationViewModelService } from \"../../services/organization-view-model.service\";\nimport { LogoService } from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'organization-details-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-details-table.html'),\n  styles: []\n})\nexport class OrganizationDetailsTableComponent implements OnChanges {\n  private labelValues:Array<LabelValueModel>;\n\t@Input() displayLogo:boolean = true;\n  @Input() isLoading:boolean;\n\t@Input() organization: Organization;\n\t@Output() onLogoLoaded: EventEmitter<any> = new EventEmitter<any>();\n\tpublic logo:string;\n\tpublic canChangeLogo:boolean;\n\tpublic isLoadingOrgAndLogo:boolean = true;\n\tpublic uploadingLogo:boolean = false;\n  constructor(private authService:AuthService, private logoService: LogoService, private orgViewModelService: OrganizationViewModelService, private notifications:MCNotificationsService) {\n  }\n  ngOnChanges() {\n    if (this.organization) {\n\t    this.canChangeLogo = this.canChangeTheLogo();\n\t    this.loadLogo();\n    }\n  }\n\n  public uploadLogo(logo:any) {\n\t  let oldLogo = this.logo;\n\t  this.uploadingLogo = true;\n\t  this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(\n\t\t  logo => {\n\t\t\t  this.loadLogo();\n\t\t  },\n\t\t  err => {\n\t\t\t  this.logo = oldLogo;\n\t\t\t  this.uploadingLogo = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to upload logo', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n\n  private setLabelValues() {\n\t  this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\n\t  this.isLoadingOrgAndLogo = false;\n  }\n\n\tprivate loadLogo(){\n\t\tthis.logoService.getLogoForOrganization(this.organization.mrn).subscribe(\n\t\t\tlogo => {\n\t\t\t\tthis.logo = URL.createObjectURL(new Blob([logo]));\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (this.canChangeTheLogo()) {\n\t\t\t\t\tthis.logo = 'assets/img/no_organization.png';\n\t\t\t\t}\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t}\n\t\t);\n\t}\n\tprivate canChangeTheLogo():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<div *ngIf=\\\"displayLogo && logo\\\" style=\\\"margin-bottom: 10px;\\\">\\n  <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"logo | sanitizeUrl\\\" *ngIf=\\\"logo && !canChangeLogo\\\">\\n  <mc-logo-uploader [logo]=\\\"logo\\\" [uploadingLogo]=\\\"uploadingLogo\\\" (onUpload)=\\\"uploadLogo($event)\\\" *ngIf=\\\"logo && canChangeLogo\\\"></mc-logo-uploader>\\n</div>\\n<mc-label-value-table [isLoading]=\\\"isLoadingOrgAndLogo\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3 4","import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Service } from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { CertificateEntityType } from \"../../services/certificate-helper.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { ServiceViewModel } from \"../../../org-identity-registry/services/view-models/ServiceViewModel\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { IdServicesService } from \"../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../shared/app.constants\";\nimport { InstancesService } from \"../../../../backend-api/service-registry/services/instances.service\";\n\n@Component({\n  selector: 'service-details-view',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details-view.html'),\n  styles: []\n})\nexport class ServiceDetailsViewComponent {\n\t@Input() service:Service;\n\t@Input() shouldShowDelete:boolean = true;\n\t@Input() shouldShowUpdate:boolean = true;\n\t@Input() shouldShowLinkToInstance:boolean = true;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\t@Output() deleteAction:EventEmitter<any> = new EventEmitter<any>();\n\t@Output() updateAction:EventEmitter<any> = new EventEmitter<any>();\n\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic entityType: CertificateEntityType;\n\tpublic entityMrn:string;\n\tpublic onGotoVessel: Function;\n\tpublic onGotoInstance: Function;\n\tprivate linkToInstance:boolean = false;\n\tpublic isLoadingInstance:boolean = false;\n\n\tconstructor(private fileHelperService:FileHelperService, private authService: AuthService, private servicesService: IdServicesService, private notifications:MCNotificationsService, private navigationHelperService: NavigationHelperService, private instancesService:InstancesService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isLoadingInstance = true;\n\t\tthis.entityType = CertificateEntityType.Service;\n\t\tthis.onGotoVessel = this.gotoVessel.bind(this);\n\t\tthis.onGotoInstance = this.gotoInstance.bind(this);\n\t}\n\n\tngOnChanges() {\n\t\tif (this.service) {\n\t\t\tthis.entityMrn = this.service.mrn + TOKEN_DELIMITER + this.service.instanceVersion;\n\t\t\tif (this.shouldShowLinkToInstance) {\n\t\t\t\tthis.loadInstance();\n\t\t\t} else {\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadInstance() {\n\t\tthis.instancesService.getInstance(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.linkToInstance = true;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.linkToInstance = false;\n\t\t\t\t\tthis.generateLabelValues();\n\t\t\t\t} else {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the Instance for the ID service', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic showDownload():boolean {\n\t\treturn this.service.oidcClientId && this.isAdmin();\n\t}\n\n\tpublic downloadXML() {\n\t\tthis.servicesService.getIdServiceJbossXml(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\txmlString => {\n\t\t\t\tthis.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the XML', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic downloadJSON() {\n\t\tthis.servicesService.getServiceKeycloakJson(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tjsonString => {\n\t\t\t\tthis.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the JSON', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.service) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.service.mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.service.name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.service.permissions});\n\t\t\tthis.labelValues.push({label: 'Certificate domain name', valueHtml: this.service.certDomainName});\n\t\t\tif (this.service.oidcRedirectUri) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri});\n\t\t\t}\n\t\t\tif (this.service.oidcClientId) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client ID', valueHtml: this.service.oidcClientId});\n\t\t\t}\n\t\t\tif (this.service.oidcClientSecret) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret});\n\t\t\t}\n\n\t\t\tif (this.service.oidcAccessType) {\n\t\t\t\tthis.labelValues.push({label: 'Access type', valueHtml: ServiceViewModel.getLabelForEnum(this.service.oidcAccessType)});\n\t\t\t}\n\n\t\t\tthis.generateLabelValueForVessel();\n\n\t\t\tthis.generateLabelValueForInstance();\n\t\t}\n\t}\n\n\tprivate generateLabelValueForVessel() {\n\t\tlet vessel = this.service.vessel;\n\t\tif (vessel) {\n\t\t\tlet label = 'Linked vessel';\n\t\t\tthis.labelValues.push({label: label, valueHtml: vessel.name, linkFunction: this.onGotoVessel, linkValue: [vessel.mrn]});\n\t\t}\n\t}\n\n\tprivate generateLabelValueForInstance() {\n\t\tif (this.shouldShowLinkToInstance && this.linkToInstance) {\n\t\t\tlet label = 'Linked Instance';\n\t\t\tthis.labelValues.push({label: label, valueHtml: this.service.name, linkFunction: this.onGotoInstance, linkValue: [this.service.mrn, this.service.instanceVersion]});\n\t\t}\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.shouldShowDelete && this.isAdmin() && this.service != null;\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.shouldShowUpdate && this.isAdmin() && this.service != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.deleteAction.emit('');\n\t}\n\n\tprivate update() {\n\t\tthis.updateAction.emit('');\n\t}\n\n\tprivate gotoInstance(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToOrgInstance(linkValue[0], linkValue[1]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\n\t\t}\n\t}\n\n\tprivate gotoVessel(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToVessel(linkValue[0]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to vessel', MCNotificationType.Error, error);\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","module.exports = \"<ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n  <mc-label-value-table [isLoading]=\\\"isLoading || isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n  <ul *ngIf=\\\"!isLoading && service && (showDownload() || showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXML()\\\">Download JBOSS XML</button>\\n    </li>\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadJSON()\\\">Download Keycloak JSON</button>\\n    </li>\\n    <li *ngIf=\\\"showUpdate()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update</button>\\n    </li>\\n    <li *ngIf=\\\"showDelete()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Service</button>\\n    </li>\\n  </ul>\\n</ba-card>\\n\\n<div *ngIf=\\\"service\\\">\\n  <ba-card title=\\\"Certificates for {{service.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n    <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"entityMrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"service.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"service.certificates\\\"></certificates-table>\\n  </ba-card>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module id = ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {ServiceRegistrySearchRequest} from \"./ServiceRegistrySearchRequest\";\nimport {FormGroup, FormBuilder, FormControl} from \"@angular/forms\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {SrSearchRequestsService} from \"../../../org-service-registry/shared/services/sr-search-requests.service\";\nimport {SHOW_ENDORSEMENTS} from \"../../../../shared/app.constants\";\n\ninterface SelectModel {\n\tlabel:string;\n\tvalue:string;\n}\n\n@Component({\n  selector: 'service-registry-search',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-registry-search.html'),\n\tstyles: [require('./service-registry-search.scss')]\n})\nexport class ServiceRegistrySearchComponent implements OnDestroy {\n\t@Input() searchTitle: string;\n\t@Input() searchKey: string;\n\t@Input() isSearching: boolean;\n\t@Input() preFilterMyOrg: boolean;\n\t@Input() showEndorsement: boolean;\n\t@Input() showKeywords: boolean = true;\n\t@Output() onSearch:EventEmitter<ServiceRegistrySearchRequest> = new EventEmitter<ServiceRegistrySearchRequest>();\n\tprivate endorsementMainSwitch = SHOW_ENDORSEMENTS;\n\n\tpublic isLoading: boolean;\n\tpublic formGroup: FormGroup;\n\tpublic selectValuesOrganizations:Array<SelectModel>;\n\tpublic selectValuesOrganizationsForEndorsement:Array<SelectModel>;\n\tpublic onSearchFunction: Function;\n\tpublic isCollapsed:boolean;\n\tpublic collapsedClass:string;\n\tpublic toggleClass:string;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private changeDetector: ChangeDetectorRef, private authService:AuthService, formBuilder:FormBuilder, private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  \tthis.formGroup = formBuilder.group({});\n  }\n\n\tngOnDestroy() {\n\t\tthis.changeDetector.detach();\n\t}\n\n\tngOnInit() {\n\t\tthis.onSearchFunction = this.search.bind(this);\n\t\tthis.isCollapsed = false;\n\t\tthis.setClass();\n  \tthis.isLoading = true;\n\t\tthis.generateForm();\n  \tthis.loadOrganizations();\n\t}\n\n\tpublic toggle() {\n\t\tthis.isCollapsed = !this.isCollapsed;\n\t\tthis.setClass();\n\t}\n\n\tprivate setClass() {\n\t\tthis.toggleClass = this.isCollapsed ? 'fa fa-caret-square-o-down' : 'fa fa-caret-square-o-up';\n\t}\n\n\tpublic search() {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\t\tlet registeredBy:string;\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromRegisteredBy(registeredBy) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\n\t\tif (registeredBy && registeredBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tregisteredBy = undefined;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromEndorsedBy(endorsedBy:string) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet registeredBy:string;\n\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tif (endorsedBy && endorsedBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tendorsedBy = undefined;\n\t\t}\n\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate doSearch(keywords:string, registeredBy:string, endorsedBy:string) {\n\t\tlet searchRequest: ServiceRegistrySearchRequest = {keywords:keywords, registeredBy:registeredBy, endorsedBy:endorsedBy};\n\t\tthis.searchRequestsService.addSearchRequest(this.searchKey, searchRequest);\n\t\tthis.notifications.errorLog = null; // Remove error log if it is present\n\t\tthis.onSearch.emit(searchRequest);\n\t}\n\n\tprivate generateForm() {\n\t\tvar formControl = new FormControl('');\n\t\tthis.formGroup.addControl('keywords', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('registeredBy', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('endorsedBy', formControl);\n\t}\n\n\tprivate loadOrganizations() {\n\t\tthis.orgsService.getAllOrganizations().subscribe(\n\t\t\torganizations => {\n\t\t\t\tthis.setupSearchRequest(organizations);\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.setupSearchRequest([]);\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organizations', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate setupSearchRequest(organizations:Array<Organization>) {\n\t\tthis.selectValuesOrganizations = [];\n\t\tthis.selectValuesOrganizations.push({value:undefined, label:'All'});\n\t\tthis.selectValuesOrganizationsForEndorsement = [];\n\t\tthis.selectValuesOrganizationsForEndorsement.push({value:undefined, label:'No filter'});\n\n\t\torganizations.forEach(organization => {\n\t\t\tthis.selectValuesOrganizations.push({value:organization.mrn, label:organization.name});\n\t\t\tthis.selectValuesOrganizationsForEndorsement.push({value:organization.mrn, label:organization.name});\n\t\t});\n\t\tvar registeredBy:string;\n\t\tvar endorsedBy:string;\n\t\tvar keywords:string = '';\n\t\tlet searchRequest = this.searchRequestsService.getSearchRequest(this.searchKey);\n\t\tif (searchRequest) {\n\t\t\tregisteredBy = searchRequest.registeredBy;\n\t\t\tendorsedBy = searchRequest.endorsedBy;\n\t\t\tif (searchRequest.keywords) {\n\t\t\t\tkeywords = searchRequest.keywords;\n\t\t\t}\n\t\t} else if (this.preFilterMyOrg){\n\t\t\tregisteredBy = this.authService.authState.orgMrn;\n\t\t}\n\t\tthis.formGroup.patchValue({registeredBy: registeredBy});\n\t\tthis.formGroup.patchValue({endorsedBy: endorsedBy});\n\t\tthis.formGroup.patchValue({keywords: keywords});\n\n\t\tthis.formGroup.controls['registeredBy'].valueChanges.subscribe(param => this.searchFromRegisteredBy(param));\n\t\tthis.formGroup.controls['endorsedBy'].valueChanges.subscribe(param => this.searchFromEndorsedBy(param));\n\n\t\tthis.changeDetector.detectChanges();\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts","module.exports = \"<a class=\\\"search-link\\\" (click)=\\\"toggle()\\\">\\n  <h4>{{searchTitle}} <i style=\\\"margin-left:2px;color: white; font-size: 16px;\\\" class=\\\"{{toggleClass}}\\\" aria-hidden=\\\"true\\\"></i></h4>\\n</a>\\n<div class=\\\"mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\" *ngIf=\\\"!isCollapsed && !isLoading && formGroup\\\">\\n  <form [formGroup]=\\\"formGroup\\\">\\n    <div *ngIf=\\\"showKeywords\\\" class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\">\\n          <label class=\\\"mc-form-label\\\">Keywords\\n            <div class=\\\"input-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control mc-form-control\\\" formControlName=\\\"keywords\\\">\\n              <span class=\\\"mc-form-control-input-group-btn input-group-btn\\\">\\n                <mc-loading-button [type]=\\\"'submit'\\\" [class]=\\\"'btn btn-primary search-button'\\\" [isLoading]=\\\"isSearching\\\" [title]=\\\"'Search'\\\" [onClick]=\\\"onSearchFunction\\\" ></mc-loading-button>\\n              </span>\\n            </div>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Registered by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"registeredBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizations\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"showEndorsement && endorsementMainSwitch\\\" class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Endorsed by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"endorsedBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizationsForEndorsement\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<div *ngIf=\\\"!isCollapsed\\\">\\n  <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module chunks = 0 1 2 3 4","module.exports = \".mc-form-label {\\n  width: 100%; }\\n\\n.mc-form-control {\\n  margin-top: 5px; }\\n\\n.mc-form-control:read-only {\\n  cursor: not-allowed;\\n  color: rgba(255, 255, 255, 0.7); }\\n\\n.mc-form-control-success {\\n  border: 1px solid #8bd22f !important; }\\n  .mc-form-control-success:focus {\\n    border: 1px solid #aee06d !important; }\\n\\n.mc-form-control-error {\\n  border: 1px solid #f95372 !important; }\\n  .mc-form-control-error:focus {\\n    border: 1px solid #fb879c !important; }\\n\\n.mc-form-group {\\n  max-width: 450px;\\n  margin-bottom: 0.5rem !important; }\\n\\n.mc-form-control-feedback {\\n  top: 20px !important;\\n  right: 10px !important; }\\n\\n.mc-form-control-select:read-only {\\n  cursor: default !important;\\n  color: #ffffff !important; }\\n\\n.search-link {\\n  cursor: pointer;\\n  color: #ffffff; }\\n  .search-link:hover {\\n    transform: none;\\n    color: #ffffff; }\\n\\n.mc-form-control-input-group-btn {\\n  padding-top: 5px; }\\n\\n.search-button {\\n  border-bottom-left-radius: 0 !important;\\n  border-top-left-radius: 0 !important; }\\n  .search-button:hover {\\n    transform: none; }\\n\\n.input-group {\\n  margin-bottom: 0px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module chunks = 0 1 2 3 4","import {Component, Input, OnChanges, ViewEncapsulation} from '@angular/core';\nimport {TableCell, TableHeader, TableRow} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {InstancesService} from \"../../../../backend-api/service-registry/services/instances.service\";\nimport {BugReportingService} from \"../../../../backend-api/identity-registry/services/bug-reporting.service\";\nimport {BugReport} from \"../../../../backend-api/identity-registry/autogen/model/BugReport\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'services-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./services-table.html'),\n  styles: []\n})\nexport class ServicesTableComponent implements OnChanges {\n  @Input() services: Array<Service>;\n  @Input() isLoading: boolean;\n\tpublic onRowClick: Function;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private navigationHelperService:NavigationHelperService, private orgsService:OrganizationsService, private notifications: MCNotificationsService, private instancesService: InstancesService, private bugService: BugReportingService) {\n  }\n  ngOnInit() {\n\t  this.onRowClick = this.gotoService.bind(this);\n  }\n  ngOnChanges() {\n    if (this.services) {\n\t    this.loadMyOrganization();\n    }\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgsService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.generateHeadersAndRows(organization.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private generateHeadersAndRows(orgMrn:string) {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    for (let service of this.services) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:service.name, class:'', truncateNumber:250};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:service.instanceVersion, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, orgMrn);\n\t    cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate gotoService(index:number) {\n  \tlet mrn = this.services[index].mrn;\n  \tlet version = this.services[index].instanceVersion;\n  \tthis.isLoading = true;\n\t\tthis.instancesService.getInstance(mrn, version).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t// when using the portal only to register instances, this should never happen. However, if someone uses the SR api only then there might be something missing. We log it for further investigation\n\t\t\t\t\tlet bugReport:BugReport = {subject:\"Missing instance\", description:\"There is a service in the IR that doesn't exist in the SR.\\n\\n MRN: \" + mrn + \",\\nVersion: \" + version};\n\t\t\t\t\tthis.bugService.reportBug(bugReport)\n\t\t\t\t}\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\n\t\t\t},\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/services-table/services-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/services-table/services-table.html\n// module id = ./src/app/pages/shared/components/services-table/services-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'specifications-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specifications-table.html'),\n  styles: []\n})\nexport class SpecificationsTableComponent implements OnChanges {\n  @Input() specifications: Array<Specification>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.specifications) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Status', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let specification of this.specifications) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, specification.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t  this.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t  organizationName => {\n\t\t\t  tableCell.valueHtml = organizationName;\n\t\t  },\n\t\t  err => {\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3 4","import {Injectable, OnInit} from '@angular/core';\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\n\n@Injectable()\nexport class OrganizationViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (organization) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\n\t    labelValues.push({label: 'Name', valueHtml: organization.name});\n      labelValues.push({label: 'Address', valueHtml: organization.address});\n      labelValues.push({label: 'Country', valueHtml: organization.country});\n      if (organization.email) {\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\n      }\n      if (organization.url) {\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\n      }\n    }\n    return labelValues;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import {Vessel} from \"../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselAttribute} from \"../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\n\nexport class VesselHelper {\n\n\tpublic static isVesselAttEqualTo(vessel:Vessel, imoNumber:string, mmsiNumber:string) : boolean {\n\t\timoNumber = imoNumber || '';\n\t\tmmsiNumber = mmsiNumber || '';\n\t\treturn imoNumber === VesselHelper.getIMO(vessel) && mmsiNumber === VesselHelper.getMMSI(vessel);\n\t}\n\n\tpublic static labelForSelect(vessel:Vessel) : string {\n\t\tlet imo = VesselHelper.getIMO(vessel);\n\t\tlet mmsi = VesselHelper.getMMSI(vessel);\n\t\treturn vessel.name + \", IMO:\" + (imo.length == 0 ? ' - ' : imo) + \", MMSI:\" + (mmsi.length == 0 ? ' - ' : mmsi);\n\t}\n\n\t// Returns empty string if no IMO exists for the vessel\n\tpublic static getIMO(vessel:Vessel) : string  {\n\t\tvar imo = '';\n\t\tvessel.attributes.forEach(att => {\n\t\t\tif (att.attributeName === AttributeNameEnum.ImoNumber) {\n\t\t\t\timo = att.attributeValue;\n\t\t\t}\n\t\t});\n\t\treturn imo;\n\t}\n\n\t// Returns empty string if no MMSI exists for the vessel\n\tpublic static getMMSI(vessel:Vessel) : string  {\n\t\tvar mmsi = '';\n\t\tvessel.attributes.forEach(att => {\n\t\t\tif (att.attributeName === AttributeNameEnum.MmsiNumber) {\n\t\t\t\tmmsi = att.attributeValue;\n\t\t\t}\n\t\t});\n\t\treturn mmsi;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/vessel-helper.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\nimport {NgaModule} from \"../../theme/nga.module\";\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceDetailsViewComponent} from \"./components/service-details-view/service-details-view.component\";\nimport {CertificateRevokeComponent} from \"./components/certificate-revoke/certificate-revoke.component\";\nimport {ServiceRegistrySearchComponent} from \"./components/service-registry-search/service-registry-search.component\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {SrSearchRequestsService} from \"../org-service-registry/shared/services/sr-search-requests.service\";\nimport {EndorsedByListComponent} from \"./components/endorsed-by-list/endorsed-by-list.component\";\nimport {ServicesTableComponent} from \"./components/services-table/services-table.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n\t  ReactiveFormsModule\n  ],\n  declarations: [\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    OrganizationDetailsTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent\n  ],\n  exports: [\n    OrganizationDetailsTableComponent,\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent,\n  ],\n  providers: [\n    SrViewModelService,\n    CertificateHelperService,\n    OrganizationViewModelService,\n\t  SrSearchRequestsService\n  ]\n})\nexport class SharedModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts"],"mappings":";;;;;;AAAA;;;;;;;;;;AAUA;;AA0CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AC1DA;;;;;;;;;;AAUA;;AAgEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AChFA;;;;;;;;;;AAUA;;AAwBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;;;;;;;;;;AC3CA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AA7DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyDA;;AAAA;AAxDA;;;;;;;;ACdA;;;;;;;;;ACAA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA1EA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsEA;;AAAA;AArEA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtpSA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgSA;;AAAA;AA/RA;;;;;;;;AC5BA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5SA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwSA;;AAAA;AAvSA;;;;;;;;AC3BA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AACA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrDA;AACA;AACA;AAOA;AAAA;AA6CA;AA1CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7CA;;;;;;;;;;ACTA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAQA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AA9SA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA0SA;;AAAA;AAzSA;;;;;;;;AChCA;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAQA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAEA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAjFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8EA;;AAAA;AA7EA;;;;;;;;AClBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAQA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AApMA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuMA;;AAAA;AAtMA;;;;;;;;ACzBA;;;;;;;;;ACAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAQA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA5SA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA+SA;;AAAA;AA9SA;;;;;;;;AC9BA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrCA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAOA;AACA;AACA;AAOA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAnTA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA+SA;;AAAA;AA9SA;;;;;;;;ACjCA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAOA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AACA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAjFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8EA;;AAAA;AA7EA;;;;;;;;ACjBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAIA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5eA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgfA;;AAAA;AA9eA;;;;;;;;AC5CA;;;;;;;;;ACAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAQA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAhTA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAmTA;;AAAA;AAlTA;;;;;;;;AC9BA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAAA;AACA;AAjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACjEA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AACA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACnCA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;ACvBA;AAQA;AAEA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAbA;AAAA;;AAAA;AAcA;AAAA;AAbA;;;;;;;;;;ACRA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;;AAAA;AAyDA;AAAA;AAxDA;;;;;;;;;;ACTA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAQA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AACA;AASA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAhRA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4QA;;AAAA;AA3QA;;;;;;;;AC/BA;;;;;;;;;ACAA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAOA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AACA;AASA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA3FA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwFA;;AAAA;AAvFA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAQA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArzJA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4JA;;AAAA;AA3JA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AAGA;AACA;AAEA;AAIA;AAIA;AACA;AACA;AAEA;AAQA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnQA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsQA;;AAAA;AArQA;;;;;;;;AC5BA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrCA;AAEA;AACA;AACA;AAQA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAzBA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqBA;;AAAA;AApBA;;;;;;;;ACZA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;AClBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuDA;;AAAA;AAtDA;;;;;;;;ACnBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAWA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8FA;;AAAA;AA7FA;;;;;;;;ACvBA;;;;;;;;;ACAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AASA;AASA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3BA;AADA;AAAA;;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnIA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsIA;;AAAA;AArIA;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;;;ACAA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACZA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAxEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4EA;;AAAA;AA3EA;;;;;;;;ACfA;;;;;;;;;ACAA;AAGA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAlFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqFA;;AAAA;AApFA;;;;;;;;ACbA;;;;;;;;;ACAA;AASA;AACA;AACA;AACA;AACA;AAWA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6DA;;AAAA;AA5DA;;;;;;;;ACxBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjpKA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuKA;;AAAA;AAtKA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA/JA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkKA;;AAAA;AAjKA;;;;;;;;ACrBA;;;;;;;ACAA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA1FA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6FA;;AAAA;AA5FA;;;;;;;;AChBA;;;;;;;;;ACAA;AAIA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACbA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AAyBA;AAAA;AAxBA;;;;;;;;;;ACJA;AACA;AAEA;AAAA;AAmCA;AAjCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnCA;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;AAAA;AACA;AAxCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;","sourceRoot":""}