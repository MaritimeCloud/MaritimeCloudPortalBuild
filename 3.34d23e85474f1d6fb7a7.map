{"version":3,"file":"3.7a26f3d458cb3d677c0a.chunk.js","sources":["webpack:///./~/asn1js/build/asn1.js?da50**","webpack:///./~/pkijs/src/AlgorithmIdentifier.js?3490**","webpack:///./~/pkijs/src/Attribute.js?8522**","webpack:///./~/pkijs/src/AttributeTypeAndValue.js?9420**","webpack:///./~/pkijs/src/CertificationRequest.js?7d8c**","webpack:///./~/pkijs/src/CryptoEngine.js?6b2b**","webpack:///./~/pkijs/src/ECPrivateKey.js?cfa3**","webpack:///./~/pkijs/src/ECPublicKey.js?bfef**","webpack:///./~/pkijs/src/EncryptedContentInfo.js?752d**","webpack:///./~/pkijs/src/OtherPrimeInfo.js?f1fb**","webpack:///./~/pkijs/src/PBES2Params.js?a2d8**","webpack:///./~/pkijs/src/PBKDF2Params.js?688c**","webpack:///./~/pkijs/src/PrivateKeyInfo.js?0039**","webpack:///./~/pkijs/src/PublicKeyInfo.js?08f3**","webpack:///./~/pkijs/src/RSAPrivateKey.js?d079**","webpack:///./~/pkijs/src/RSAPublicKey.js?4afb**","webpack:///./~/pkijs/src/RSASSAPSSParams.js?7577**","webpack:///./~/pkijs/src/RelativeDistinguishedNames.js?7900**","webpack:///./~/pkijs/src/common.js?fbfb**","webpack:///./~/pvtsutils/build/index.js?5825**","webpack:///./~/pvutils/src/utils.js?8140**","webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts?e7eb**","webpack:///./src/app/backend-api/identity-registry/autogen/model/Service.ts?20ea**","webpack:///./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts?73cd**","webpack:///./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts?51f0**","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts?f923**","webpack:///./src/app/pages/organizations/components/organization-details/organization-details.component.ts","webpack:///./src/app/pages/organizations/components/organization-details/organization-details.html","webpack:///./src/app/pages/organizations/components/organization-list/organization-list.component.ts","webpack:///./src/app/pages/organizations/components/organization-list/organization-list.html","webpack:///./src/app/pages/organizations/organizations.component.ts","webpack:///./src/app/pages/organizations/organizations.module.ts","webpack:///./src/app/pages/organizations/organizations.routing.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts?34e7**","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html?9ab8**","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts?4ec2**","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html?6ce5**","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts?7f64**","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html?947c**","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss?89ae**","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts?c517**","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html?4ed3**","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts?2512**","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html?a249**","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts?af65**","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html?c375**","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts?2a4e**","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html?0ef1**","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.component.ts?ff71**","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.html?e0c6**","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts?c1a4**","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.html?4ed3**","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.scss?370b**","webpack:///./src/app/pages/shared/components/services-table/services-table.component.ts?dc51**","webpack:///./src/app/pages/shared/components/services-table/services-table.html?441e**","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts?6ac4**","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html?334b**","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts?5d8c**","webpack:///./src/app/pages/shared/shared.module.ts?42d6**"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBER = fromBER;\nexports.compareSchema = compareSchema;\nexports.verifySchema = verifySchema;\nexports.fromJSON = fromJSON;\nexports.RawData = exports.Repeated = exports.Any = exports.Choice = exports.TIME = exports.Duration = exports.DateTime = exports.TimeOfDay = exports.DATE = exports.GeneralizedTime = exports.UTCTime = exports.CharacterString = exports.GeneralString = exports.VisibleString = exports.GraphicString = exports.IA5String = exports.VideotexString = exports.TeletexString = exports.PrintableString = exports.NumericString = exports.UniversalString = exports.BmpString = exports.RelativeObjectIdentifier = exports.Utf8String = exports.ObjectIdentifier = exports.Enumerated = exports.Integer = exports.BitString = exports.OctetString = exports.Null = exports.Set = exports.Sequence = exports.Boolean = exports.EndOfContent = exports.Constructed = exports.Primitive = exports.BaseBlock = exports.ValueBlock = exports.HexBlock = void 0;\n\nvar _pvutils = require(\"pvutils\");\n\n/* eslint-disable indent */\n\n/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\n//**************************************************************************************\n//**************************************************************************************\n//region Declaration of global variables\n//**************************************************************************************\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\"; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration for \"LocalBaseBlock\" class\n//**************************************************************************************\n\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\n\nclass LocalBaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalBaseBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueBeforeDecode]\r\n   */\n  constructor(parameters = {}) {\n    /**\r\n     * @type {number} blockLength\r\n     */\n    this.blockLength = (0, _pvutils.getParametersValue)(parameters, \"blockLength\", 0);\n    /**\r\n     * @type {string} error\r\n     */\n\n    this.error = (0, _pvutils.getParametersValue)(parameters, \"error\", \"\");\n    /**\r\n     * @type {Array.<string>} warnings\r\n     */\n\n    this.warnings = (0, _pvutils.getParametersValue)(parameters, \"warnings\", []); //noinspection JSCheckFunctionSignatures\n\n    /**\r\n     * @type {ArrayBuffer} valueBeforeDecode\r\n     */\n\n    if (\"valueBeforeDecode\" in parameters) this.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);else this.valueBeforeDecode = new ArrayBuffer(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"baseBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    return {\n      blockName: this.constructor.blockName(),\n      blockLength: this.blockLength,\n      error: this.error,\n      warnings: this.warnings,\n      valueBeforeDecode: (0, _pvutils.bufferToHexCodes)(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Description for \"HexBlock\" class\n//**************************************************************************************\n\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef HexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\n//noinspection JSUnusedLocalSymbols\n\n\nconst HexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass {\n  //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Constructor for \"HexBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    /**\r\n     * @type {boolean}\r\n     */\n\n    this.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", false);\n    /**\r\n     * @type {ArrayBuffer}\r\n     */\n\n    if (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else this.valueHex = new ArrayBuffer(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"hexBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n    //region Initial checks\n\n    if (intBuffer.length === 0) {\n      this.warnings.push(\"Zero buffer length\");\n      return inputOffset;\n    } //endregion\n    //region Copy input buffer to internal buffer\n\n\n    this.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength); //endregion\n\n    this.blockLength = inputLength;\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    if (this.isHexOnly !== true) {\n      this.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\n      return new ArrayBuffer(0);\n    }\n\n    if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength); //noinspection JSCheckFunctionSignatures\n\n    return this.valueHex.slice(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.blockName = this.constructor.blockName();\n    object.isHexOnly = this.isHexOnly;\n    object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n    return object;\n  } //**********************************************************************************\n\n\n}; //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of identification block class\n//**************************************************************************************\n\n\nexports.HexBlock = HexBlock;\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalBaseBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {Object} [idBlock]\r\n   */\n  constructor(parameters = {}) {\n    super();\n\n    if (\"idBlock\" in parameters) {\n      //region Properties from hexBlock class\n      this.isHexOnly = (0, _pvutils.getParametersValue)(parameters.idBlock, \"isHexOnly\", false);\n      this.valueHex = (0, _pvutils.getParametersValue)(parameters.idBlock, \"valueHex\", new ArrayBuffer(0)); //endregion\n\n      this.tagClass = (0, _pvutils.getParametersValue)(parameters.idBlock, \"tagClass\", -1);\n      this.tagNumber = (0, _pvutils.getParametersValue)(parameters.idBlock, \"tagNumber\", -1);\n      this.isConstructed = (0, _pvutils.getParametersValue)(parameters.idBlock, \"isConstructed\", false);\n    } else {\n      this.tagClass = -1;\n      this.tagNumber = -1;\n      this.isConstructed = false;\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"identificationBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //region Initial variables\n    let firstOctet = 0;\n    let retBuf;\n    let retView; //endregion\n\n    switch (this.tagClass) {\n      case 1:\n        firstOctet |= 0x00; // UNIVERSAL\n\n        break;\n\n      case 2:\n        firstOctet |= 0x40; // APPLICATION\n\n        break;\n\n      case 3:\n        firstOctet |= 0x80; // CONTEXT-SPECIFIC\n\n        break;\n\n      case 4:\n        firstOctet |= 0xC0; // PRIVATE\n\n        break;\n\n      default:\n        this.error = \"Unknown tag class\";\n        return new ArrayBuffer(0);\n    }\n\n    if (this.isConstructed) firstOctet |= 0x20;\n\n    if (this.tagNumber < 31 && !this.isHexOnly) {\n      retBuf = new ArrayBuffer(1);\n      retView = new Uint8Array(retBuf);\n\n      if (!sizeOnly) {\n        let number = this.tagNumber;\n        number &= 0x1F;\n        firstOctet |= number;\n        retView[0] = firstOctet;\n      }\n\n      return retBuf;\n    }\n\n    if (this.isHexOnly === false) {\n      const encodedBuf = (0, _pvutils.utilToBase)(this.tagNumber, 7);\n      const encodedView = new Uint8Array(encodedBuf);\n      const size = encodedBuf.byteLength;\n      retBuf = new ArrayBuffer(size + 1);\n      retView = new Uint8Array(retBuf);\n      retView[0] = firstOctet | 0x1F;\n\n      if (!sizeOnly) {\n        for (let i = 0; i < size - 1; i++) retView[i + 1] = encodedView[i] | 0x80;\n\n        retView[size] = encodedView[size - 1];\n      }\n\n      return retBuf;\n    }\n\n    retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n    retView = new Uint8Array(retBuf);\n    retView[0] = firstOctet | 0x1F;\n\n    if (sizeOnly === false) {\n      const curView = new Uint8Array(this.valueHex);\n\n      for (let i = 0; i < curView.length - 1; i++) retView[i + 1] = curView[i] | 0x80;\n\n      retView[this.valueHex.byteLength] = curView[curView.length - 1];\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n    //region Initial checks\n\n    if (intBuffer.length === 0) {\n      this.error = \"Zero buffer length\";\n      return -1;\n    } //endregion\n    //region Find tag class\n\n\n    const tagClassMask = intBuffer[0] & 0xC0;\n\n    switch (tagClassMask) {\n      case 0x00:\n        this.tagClass = 1; // UNIVERSAL\n\n        break;\n\n      case 0x40:\n        this.tagClass = 2; // APPLICATION\n\n        break;\n\n      case 0x80:\n        this.tagClass = 3; // CONTEXT-SPECIFIC\n\n        break;\n\n      case 0xC0:\n        this.tagClass = 4; // PRIVATE\n\n        break;\n\n      default:\n        this.error = \"Unknown tag class\";\n        return -1;\n    } //endregion\n    //region Find it's constructed or not\n\n\n    this.isConstructed = (intBuffer[0] & 0x20) === 0x20; //endregion\n    //region Find tag number\n\n    this.isHexOnly = false;\n    const tagNumberMask = intBuffer[0] & 0x1F; //region Simple case (tag number < 31)\n\n    if (tagNumberMask !== 0x1F) {\n      this.tagNumber = tagNumberMask;\n      this.blockLength = 1;\n    } //endregion\n    //region Tag number bigger or equal to 31\n    else {\n        let count = 1;\n        this.valueHex = new ArrayBuffer(255);\n        let tagNumberBufferMaxLength = 255;\n        let intTagNumberBuffer = new Uint8Array(this.valueHex); //noinspection JSBitwiseOperatorUsage\n\n        while (intBuffer[count] & 0x80) {\n          intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n          count++;\n\n          if (count >= intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n          } //region In case if tag number length is greater than 255 bytes (rare but possible case)\n\n\n          if (count === tagNumberBufferMaxLength) {\n            tagNumberBufferMaxLength += 255;\n            const tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\n            const tempBufferView = new Uint8Array(tempBuffer);\n\n            for (let i = 0; i < intTagNumberBuffer.length; i++) tempBufferView[i] = intTagNumberBuffer[i];\n\n            this.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\n            intTagNumberBuffer = new Uint8Array(this.valueHex);\n          } //endregion\n\n        }\n\n        this.blockLength = count + 1;\n        intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\n        //region Cut buffer\n\n        const tempBuffer = new ArrayBuffer(count);\n        const tempBufferView = new Uint8Array(tempBuffer);\n\n        for (let i = 0; i < count; i++) tempBufferView[i] = intTagNumberBuffer[i];\n\n        this.valueHex = new ArrayBuffer(count);\n        intTagNumberBuffer = new Uint8Array(this.valueHex);\n        intTagNumberBuffer.set(tempBufferView); //endregion\n        //region Try to convert long tag number to short form\n\n        if (this.blockLength <= 9) this.tagNumber = (0, _pvutils.utilFromBase)(intTagNumberBuffer, 7);else {\n          this.isHexOnly = true;\n          this.warnings.push(\"Tag too long, represented as hex-coded\");\n        } //endregion\n      } //endregion\n    //endregion\n    //region Check if constructed encoding was using for primitive type\n\n\n    if (this.tagClass === 1 && this.isConstructed) {\n      switch (this.tagNumber) {\n        case 1: // Boolean\n\n        case 2: // REAL\n\n        case 5: // Null\n\n        case 6: // OBJECT IDENTIFIER\n\n        case 9: // REAL\n\n        case 13: // RELATIVE OBJECT IDENTIFIER\n\n        case 14: // Time\n\n        case 23:\n        case 24:\n        case 31:\n        case 32:\n        case 33:\n        case 34:\n          this.error = \"Constructed encoding used for primitive type\";\n          return -1;\n\n        default:\n      }\n    } //endregion\n\n\n    return inputOffset + this.blockLength; // Return current offset in input buffer\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName: string,\r\n   *  tagClass: number,\r\n   *  tagNumber: number,\r\n   *  isConstructed: boolean,\r\n   *  isHexOnly: boolean,\r\n   *  valueHex: ArrayBuffer,\r\n   *  blockLength: number,\r\n   *  error: string, warnings: Array.<string>,\r\n   *  valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.blockName = this.constructor.blockName();\n    object.tagClass = this.tagClass;\n    object.tagNumber = this.tagNumber;\n    object.isConstructed = this.isConstructed;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of length block class\n//**************************************************************************************\n\n\nclass LocalLengthBlock extends LocalBaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalLengthBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {Object} [lenBlock]\r\n   */\n  constructor(parameters = {}) {\n    super();\n\n    if (\"lenBlock\" in parameters) {\n      this.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"isIndefiniteForm\", false);\n      this.longFormUsed = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"longFormUsed\", false);\n      this.length = (0, _pvutils.getParametersValue)(parameters.lenBlock, \"length\", 0);\n    } else {\n      this.isIndefiniteForm = false;\n      this.longFormUsed = false;\n      this.length = 0;\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"lengthBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n    //region Initial checks\n\n    if (intBuffer.length === 0) {\n      this.error = \"Zero buffer length\";\n      return -1;\n    }\n\n    if (intBuffer[0] === 0xFF) {\n      this.error = \"Length block 0xFF is reserved by standard\";\n      return -1;\n    } //endregion\n    //region Check for length form type\n\n\n    this.isIndefiniteForm = intBuffer[0] === 0x80; //endregion\n    //region Stop working in case of indefinite length form\n\n    if (this.isIndefiniteForm === true) {\n      this.blockLength = 1;\n      return inputOffset + this.blockLength;\n    } //endregion\n    //region Check is long form of length encoding using\n\n\n    this.longFormUsed = !!(intBuffer[0] & 0x80); //endregion\n    //region Stop working in case of short form of length value\n\n    if (this.longFormUsed === false) {\n      this.length = intBuffer[0];\n      this.blockLength = 1;\n      return inputOffset + this.blockLength;\n    } //endregion\n    //region Calculate length value in case of long form\n\n\n    const count = intBuffer[0] & 0x7F;\n\n    if (count > 8) // Too big length value\n      {\n        this.error = \"Too big integer\";\n        return -1;\n      }\n\n    if (count + 1 > intBuffer.length) {\n      this.error = \"End of input reached before message was fully decoded\";\n      return -1;\n    }\n\n    const lengthBufferView = new Uint8Array(count);\n\n    for (let i = 0; i < count; i++) lengthBufferView[i] = intBuffer[i + 1];\n\n    if (lengthBufferView[count - 1] === 0x00) this.warnings.push(\"Needlessly long encoded length\");\n    this.length = (0, _pvutils.utilFromBase)(lengthBufferView, 8);\n    if (this.longFormUsed && this.length <= 127) this.warnings.push(\"Unneccesary usage of long length form\");\n    this.blockLength = count + 1; //endregion\n\n    return inputOffset + this.blockLength; // Return current offset in input buffer\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //region Initial variables\n    let retBuf;\n    let retView; //endregion\n\n    if (this.length > 127) this.longFormUsed = true;\n\n    if (this.isIndefiniteForm) {\n      retBuf = new ArrayBuffer(1);\n\n      if (sizeOnly === false) {\n        retView = new Uint8Array(retBuf);\n        retView[0] = 0x80;\n      }\n\n      return retBuf;\n    }\n\n    if (this.longFormUsed === true) {\n      const encodedBuf = (0, _pvutils.utilToBase)(this.length, 8);\n\n      if (encodedBuf.byteLength > 127) {\n        this.error = \"Too big length\";\n        return new ArrayBuffer(0);\n      }\n\n      retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n      if (sizeOnly === true) return retBuf;\n      const encodedView = new Uint8Array(encodedBuf);\n      retView = new Uint8Array(retBuf);\n      retView[0] = encodedBuf.byteLength | 0x80;\n\n      for (let i = 0; i < encodedBuf.byteLength; i++) retView[i + 1] = encodedView[i];\n\n      return retBuf;\n    }\n\n    retBuf = new ArrayBuffer(1);\n\n    if (sizeOnly === false) {\n      retView = new Uint8Array(retBuf);\n      retView[0] = this.length;\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.blockName = this.constructor.blockName();\n    object.isIndefiniteForm = this.isIndefiniteForm;\n    object.longFormUsed = this.longFormUsed;\n    object.length = this.length;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of value block class\n//**************************************************************************************\n\n\nclass ValueBlock extends LocalBaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"ValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"valueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Throw an exception for a function which needs to be specified in extended classes\n    throw TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\"); //endregion\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //region Throw an exception for a function which needs to be specified in extended classes\n    throw TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\"); //endregion\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic ASN.1 block class\n//**************************************************************************************\n\n\nexports.ValueBlock = ValueBlock;\n\nclass BaseBlock extends LocalBaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"BaseBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {Object} [primitiveSchema]\r\n   * @property {string} [name]\r\n   * @property {boolean} [optional]\r\n   * @param valueBlockType Type of value block\r\n   */\n  constructor(parameters = {}, valueBlockType = ValueBlock) {\n    super(parameters);\n    if (\"name\" in parameters) this.name = parameters.name;\n    if (\"optional\" in parameters) this.optional = parameters.optional;\n    if (\"primitiveSchema\" in parameters) this.primitiveSchema = parameters.primitiveSchema;\n    this.idBlock = new LocalIdentificationBlock(parameters);\n    this.lenBlock = new LocalLengthBlock(parameters);\n    this.valueBlock = new valueBlockType(parameters);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BaseBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    let retBuf;\n    const idBlockBuf = this.idBlock.toBER(sizeOnly);\n    const valueBlockSizeBuf = this.valueBlock.toBER(true);\n    this.lenBlock.length = valueBlockSizeBuf.byteLength;\n    const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n    retBuf = (0, _pvutils.utilConcatBuf)(idBlockBuf, lenBlockBuf);\n    let valueBlockBuf;\n    if (sizeOnly === false) valueBlockBuf = this.valueBlock.toBER(sizeOnly);else valueBlockBuf = new ArrayBuffer(this.lenBlock.length);\n    retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBlockBuf);\n\n    if (this.lenBlock.isIndefiniteForm === true) {\n      const indefBuf = new ArrayBuffer(2);\n\n      if (sizeOnly === false) {\n        const indefView = new Uint8Array(indefBuf);\n        indefView[0] = 0x00;\n        indefView[1] = 0x00;\n      }\n\n      retBuf = (0, _pvutils.utilConcatBuf)(retBuf, indefBuf);\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.idBlock = this.idBlock.toJSON();\n    object.lenBlock = this.lenBlock.toJSON();\n    object.valueBlock = this.valueBlock.toJSON();\n    if (\"name\" in this) object.name = this.name;\n    if (\"optional\" in this) object.optional = this.optional;\n    if (\"primitiveSchema\" in this) object.primitiveSchema = this.primitiveSchema.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all PRIMITIVE types\n//**************************************************************************************\n\n\nexports.BaseBlock = BaseBlock;\n\nclass LocalPrimitiveValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalPrimitiveValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueBeforeDecode]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters); //region Variables from \"hexBlock\" class\n\n    if (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else this.valueHex = new ArrayBuffer(0);\n    this.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", true); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n    //region Initial checks\n\n    if (intBuffer.length === 0) {\n      this.warnings.push(\"Zero buffer length\");\n      return inputOffset;\n    } //endregion\n    //region Copy input buffer into internal buffer\n\n\n    this.valueHex = new ArrayBuffer(intBuffer.length);\n    const valueHexView = new Uint8Array(this.valueHex);\n\n    for (let i = 0; i < intBuffer.length; i++) valueHexView[i] = intBuffer[i]; //endregion\n\n\n    this.blockLength = inputLength;\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    return this.valueHex.slice(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"PrimitiveValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n    object.isHexOnly = this.isHexOnly;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass Primitive extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Primitive\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalPrimitiveValueBlock);\n    this.idBlock.isConstructed = false;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"PRIMITIVE\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all CONSTRUCTED types\n//**************************************************************************************\n\n\nexports.Primitive = Primitive;\n\nclass LocalConstructedValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalConstructedValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.value = (0, _pvutils.getParametersValue)(parameters, \"value\", []);\n    this.isIndefiniteForm = (0, _pvutils.getParametersValue)(parameters, \"isIndefiniteForm\", false);\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Store initial offset and length\n    const initialOffset = inputOffset;\n    const initialLength = inputLength; //endregion\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n    //region Initial checks\n\n    if (intBuffer.length === 0) {\n      this.warnings.push(\"Zero buffer length\");\n      return inputOffset;\n    } //endregion\n    //region Aux function\n\n\n    function checkLen(indefiniteLength, length) {\n      if (indefiniteLength === true) return 1;\n      return length;\n    } //endregion\n\n\n    let currentOffset = inputOffset;\n\n    while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\n      const returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\n\n      if (returnObject.offset === -1) {\n        this.error = returnObject.result.error;\n        this.warnings.concat(returnObject.result.warnings);\n        return -1;\n      }\n\n      currentOffset = returnObject.offset;\n      this.blockLength += returnObject.result.blockLength;\n      inputLength -= returnObject.result.blockLength;\n      this.value.push(returnObject.result);\n      if (this.isIndefiniteForm === true && returnObject.result.constructor.blockName() === EndOfContent.blockName()) break;\n    }\n\n    if (this.isIndefiniteForm === true) {\n      if (this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName()) this.value.pop();else this.warnings.push(\"No EndOfContent block encoded\");\n    } //region Copy \"inputBuffer\" to \"valueBeforeDecode\"\n\n\n    this.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength); //endregion\n\n    return currentOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    let retBuf = new ArrayBuffer(0);\n\n    for (let i = 0; i < this.value.length; i++) {\n      const valueBuf = this.value[i].toBER(sizeOnly);\n      retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"ConstructedValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.isIndefiniteForm = this.isIndefiniteForm;\n    object.value = [];\n\n    for (let i = 0; i < this.value.length; i++) object.value.push(this.value[i].toJSON());\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass Constructed extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Constructed\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalConstructedValueBlock);\n    this.idBlock.isConstructed = true;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"CONSTRUCTED\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 EndOfContent type class\n//**************************************************************************************\n\n\nexports.Constructed = Constructed;\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalEndOfContentValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number}\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region There is no \"value block\" for EndOfContent type and we need to return the same offset\n    return inputOffset; //endregion\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    return new ArrayBuffer(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"EndOfContentValueBlock\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass EndOfContent extends BaseBlock {\n  //**********************************************************************************\n  constructor(paramaters = {}) {\n    super(paramaters, LocalEndOfContentValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 0; // EndOfContent\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"EndOfContent\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Boolean type class\n//**************************************************************************************\n\n\nexports.EndOfContent = EndOfContent;\n\nclass LocalBooleanValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalBooleanValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.value = (0, _pvutils.getParametersValue)(parameters, \"value\", false);\n    this.isHexOnly = (0, _pvutils.getParametersValue)(parameters, \"isHexOnly\", false);\n    if (\"valueHex\" in parameters) this.valueHex = parameters.valueHex.slice(0);else {\n      this.valueHex = new ArrayBuffer(1);\n\n      if (this.value === true) {\n        const view = new Uint8Array(this.valueHex);\n        view[0] = 0xFF;\n      }\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n    //region Getting Uint8Array from ArrayBuffer\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n\n    if (inputLength > 1) this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n    this.isHexOnly = true; //region Copy input buffer to internal array\n\n    this.valueHex = new ArrayBuffer(intBuffer.length);\n    const view = new Uint8Array(this.valueHex);\n\n    for (let i = 0; i < intBuffer.length; i++) view[i] = intBuffer[i]; //endregion\n\n\n    if (_pvutils.utilDecodeTC.call(this) !== 0) this.value = true;else this.value = false;\n    this.blockLength = inputLength;\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    return this.valueHex;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BooleanValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.value;\n    object.isHexOnly = this.isHexOnly;\n    object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass Boolean extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Boolean\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalBooleanValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 1; // Boolean\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Boolean\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Sequence and Set type classes\n//**************************************************************************************\n\n\nexports.Boolean = Boolean;\n\nclass Sequence extends Constructed {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Sequence\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 16; // Sequence\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Sequence\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nexports.Sequence = Sequence;\n\nclass Set extends Constructed {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Set\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 17; // Set\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Set\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Null type class\n//**************************************************************************************\n\n\nexports.Set = Set;\n\nclass Null extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Null\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\n\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 5; // Null\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Null\";\n  } //**********************************************************************************\n  //noinspection JSUnusedLocalSymbols\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    if (this.lenBlock.length > 0) this.warnings.push(\"Non-zero length of value block for Null type\");\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    this.blockLength += inputLength;\n\n    if (inputOffset + inputLength > inputBuffer.byteLength) {\n      this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n      return -1;\n    }\n\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    const retBuf = new ArrayBuffer(2);\n    if (sizeOnly === true) return retBuf;\n    const retView = new Uint8Array(retBuf);\n    retView[0] = 0x05;\n    retView[1] = 0x00;\n    return retBuf;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 OctetString type class\n//**************************************************************************************\n\n\nexports.Null = Null;\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalOctetStringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.isConstructed = (0, _pvutils.getParametersValue)(parameters, \"isConstructed\", false);\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    let resultOffset = 0;\n\n    if (this.isConstructed === true) {\n      this.isHexOnly = false;\n      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n      if (resultOffset === -1) return resultOffset;\n\n      for (let i = 0; i < this.value.length; i++) {\n        const currentBlockName = this.value[i].constructor.blockName();\n\n        if (currentBlockName === EndOfContent.blockName()) {\n          if (this.isIndefiniteForm === true) break;else {\n            this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n            return -1;\n          }\n        }\n\n        if (currentBlockName !== OctetString.blockName()) {\n          this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n          return -1;\n        }\n      }\n    } else {\n      this.isHexOnly = true;\n      resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n      this.blockLength = inputLength;\n    }\n\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    if (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n    let retBuf = new ArrayBuffer(this.valueHex.byteLength);\n    if (sizeOnly === true) return retBuf;\n    if (this.valueHex.byteLength === 0) return retBuf;\n    retBuf = this.valueHex.slice(0);\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"OctetStringValueBlock\";\n  } //**********************************************************************************\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.isConstructed = this.isConstructed;\n    object.isHexOnly = this.isHexOnly;\n    object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass OctetString extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"OctetString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalOctetStringValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 4; // OctetString\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    this.valueBlock.isConstructed = this.idBlock.isConstructed;\n    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm; //region Ability to encode empty OCTET STRING\n\n    if (inputLength === 0) {\n      if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n      if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n      return inputOffset;\n    } //endregion\n\n\n    return super.fromBER(inputBuffer, inputOffset, inputLength);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"OctetString\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Checking that two OCTETSTRINGs are equal\r\n   * @param {OctetString} octetString\r\n   */\n\n\n  isEqual(octetString) {\n    //region Check input type\n    if (octetString instanceof OctetString === false) return false; //endregion\n    //region Compare two JSON strings\n\n    if (JSON.stringify(this) !== JSON.stringify(octetString)) return false; //endregion\n\n    return true;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 BitString type class\n//**************************************************************************************\n\n\nexports.OctetString = OctetString;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalBitStringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.unusedBits = (0, _pvutils.getParametersValue)(parameters, \"unusedBits\", 0);\n    this.isConstructed = (0, _pvutils.getParametersValue)(parameters, \"isConstructed\", false);\n    this.blockLength = this.valueHex.byteLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Ability to decode zero-length BitString value\n    if (inputLength === 0) return inputOffset; //endregion\n\n    let resultOffset = -1; //region If the BISTRING supposed to be a constructed value\n\n    if (this.isConstructed === true) {\n      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n      if (resultOffset === -1) return resultOffset;\n\n      for (let i = 0; i < this.value.length; i++) {\n        const currentBlockName = this.value[i].constructor.blockName();\n\n        if (currentBlockName === EndOfContent.blockName()) {\n          if (this.isIndefiniteForm === true) break;else {\n            this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n            return -1;\n          }\n        }\n\n        if (currentBlockName !== BitString.blockName()) {\n          this.error = \"BIT STRING may consists of BIT STRINGs only\";\n          return -1;\n        }\n\n        if (this.unusedBits > 0 && this.value[i].valueBlock.unusedBits > 0) {\n          this.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n          return -1;\n        }\n\n        this.unusedBits = this.value[i].valueBlock.unusedBits;\n\n        if (this.unusedBits > 7) {\n          this.error = \"Unused bits for BitString must be in range 0-7\";\n          return -1;\n        }\n      }\n\n      return resultOffset;\n    } //endregion\n    //region If the BitString supposed to be a primitive value\n    //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n\n\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n    this.unusedBits = intBuffer[0];\n\n    if (this.unusedBits > 7) {\n      this.error = \"Unused bits for BitString must be in range 0-7\";\n      return -1;\n    } //region Copy input buffer to internal buffer\n\n\n    this.valueHex = new ArrayBuffer(intBuffer.length - 1);\n    const view = new Uint8Array(this.valueHex);\n\n    for (let i = 0; i < inputLength - 1; i++) view[i] = intBuffer[i + 1]; //endregion\n\n\n    this.blockLength = intBuffer.length;\n    return inputOffset + inputLength; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    if (this.isConstructed === true) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n    if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength + 1);\n    if (this.valueHex.byteLength === 0) return new ArrayBuffer(0);\n    const curView = new Uint8Array(this.valueHex);\n    const retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n    const retView = new Uint8Array(retBuf);\n    retView[0] = this.unusedBits;\n\n    for (let i = 0; i < this.valueHex.byteLength; i++) retView[i + 1] = curView[i];\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BitStringValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.unusedBits = this.unusedBits;\n    object.isConstructed = this.isConstructed;\n    object.isHexOnly = this.isHexOnly;\n    object.valueHex = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass BitString extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"BitString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalBitStringValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 3; // BitString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BitString\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    //region Ability to encode empty BitString\n    if (inputLength === 0) return inputOffset; //endregion\n\n    this.valueBlock.isConstructed = this.idBlock.isConstructed;\n    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n    return super.fromBER(inputBuffer, inputOffset, inputLength);\n  } //**********************************************************************************\n\n  /**\r\n   * Checking that two BITSTRINGs are equal\r\n   * @param {BitString} bitString\r\n   */\n\n\n  isEqual(bitString) {\n    //region Check input type\n    if (bitString instanceof BitString === false) return false; //endregion\n    //region Compare two JSON strings\n\n    if (JSON.stringify(this) !== JSON.stringify(bitString)) return false; //endregion\n\n    return true;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Integer type class\n//**************************************************************************************\n\n/**\r\n * @extends ValueBlock\r\n */\n\n\nexports.BitString = BitString;\n\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalIntegerValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    if (\"value\" in parameters) this.valueDec = parameters.value;\n  } //**********************************************************************************\n\n  /**\r\n   * Setter for \"valueHex\"\r\n   * @param {ArrayBuffer} _value\r\n   */\n\n\n  set valueHex(_value) {\n    this._valueHex = _value.slice(0);\n\n    if (_value.byteLength >= 4) {\n      this.warnings.push(\"Too big Integer for decoding, hex only\");\n      this.isHexOnly = true;\n      this._valueDec = 0;\n    } else {\n      this.isHexOnly = false;\n      if (_value.byteLength > 0) this._valueDec = _pvutils.utilDecodeTC.call(this);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Getter for \"valueHex\"\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  get valueHex() {\n    return this._valueHex;\n  } //**********************************************************************************\n\n  /**\r\n   * Getter for \"valueDec\"\r\n   * @param {number} _value\r\n   */\n\n\n  set valueDec(_value) {\n    this._valueDec = _value;\n    this.isHexOnly = false;\n    this._valueHex = (0, _pvutils.utilEncodeTC)(_value);\n  } //**********************************************************************************\n\n  /**\r\n   * Getter for \"valueDec\"\r\n   * @returns {number}\r\n   */\n\n\n  get valueDec() {\n    return this._valueDec;\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from DER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n    const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n    if (offset === -1) return offset;\n    const view = new Uint8Array(this._valueHex);\n\n    if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {\n      const updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n      const updatedView = new Uint8Array(updatedValueHex);\n      updatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n      this._valueHex = updatedValueHex.slice(0);\n    } else {\n      if (expectedLength !== 0) {\n        if (this._valueHex.byteLength < expectedLength) {\n          if (expectedLength - this._valueHex.byteLength > 1) expectedLength = this._valueHex.byteLength + 1;\n          const updatedValueHex = new ArrayBuffer(expectedLength);\n          const updatedView = new Uint8Array(updatedValueHex);\n          updatedView.set(view, expectedLength - this._valueHex.byteLength);\n          this._valueHex = updatedValueHex.slice(0);\n        }\n      }\n    }\n\n    return offset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toDER(sizeOnly = false) {\n    const view = new Uint8Array(this._valueHex);\n\n    switch (true) {\n      case (view[0] & 0x80) !== 0:\n        {\n          const updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\n          const updatedView = new Uint8Array(updatedValueHex);\n          updatedView[0] = 0x00;\n          updatedView.set(view, 1);\n          this._valueHex = updatedValueHex.slice(0);\n        }\n        break;\n\n      case view[0] === 0x00 && (view[1] & 0x80) === 0:\n        {\n          const updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n          const updatedView = new Uint8Array(updatedValueHex);\n          updatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n          this._valueHex = updatedValueHex.slice(0);\n        }\n        break;\n\n      default:\n    }\n\n    return this.toBER(sizeOnly);\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n    if (resultOffset === -1) return resultOffset;\n    this.blockLength = inputLength;\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //noinspection JSCheckFunctionSignatures\n    return this.valueHex.slice(0);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"IntegerValueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.valueDec = this.valueDec;\n    return object;\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current value to decimal string representation\r\n   */\n\n\n  toString() {\n    //region Aux functions\n    function viewAdd(first, second) {\n      //region Initial variables\n      const c = new Uint8Array([0]);\n      let firstView = new Uint8Array(first);\n      let secondView = new Uint8Array(second);\n      let firstViewCopy = firstView.slice(0);\n      const firstViewCopyLength = firstViewCopy.length - 1;\n      let secondViewCopy = secondView.slice(0);\n      const secondViewCopyLength = secondViewCopy.length - 1;\n      let value = 0;\n      const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;\n      let counter = 0; //endregion\n\n      for (let i = max; i >= 0; i--, counter++) {\n        switch (true) {\n          case counter < secondViewCopy.length:\n            value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n            break;\n\n          default:\n            value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n\n        c[0] = value / 10;\n\n        switch (true) {\n          case counter >= firstViewCopy.length:\n            firstViewCopy = (0, _pvutils.utilConcatView)(new Uint8Array([value % 10]), firstViewCopy);\n            break;\n\n          default:\n            firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n      }\n\n      if (c[0] > 0) firstViewCopy = (0, _pvutils.utilConcatView)(c, firstViewCopy);\n      return firstViewCopy.slice(0);\n    }\n\n    function power2(n) {\n      if (n >= powers2.length) {\n        for (let p = powers2.length; p <= n; p++) {\n          const c = new Uint8Array([0]);\n          let digits = powers2[p - 1].slice(0);\n\n          for (let i = digits.length - 1; i >= 0; i--) {\n            const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n            c[0] = newValue[0] / 10;\n            digits[i] = newValue[0] % 10;\n          }\n\n          if (c[0] > 0) digits = (0, _pvutils.utilConcatView)(c, digits);\n          powers2.push(digits);\n        }\n      }\n\n      return powers2[n];\n    }\n\n    function viewSub(first, second) {\n      //region Initial variables\n      let b = 0;\n      let firstView = new Uint8Array(first);\n      let secondView = new Uint8Array(second);\n      let firstViewCopy = firstView.slice(0);\n      const firstViewCopyLength = firstViewCopy.length - 1;\n      let secondViewCopy = secondView.slice(0);\n      const secondViewCopyLength = secondViewCopy.length - 1;\n      let value;\n      let counter = 0; //endregion\n\n      for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n\n        switch (true) {\n          case value < 0:\n            b = 1;\n            firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            break;\n\n          default:\n            b = 0;\n            firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n      }\n\n      if (b > 0) {\n        for (let i = firstViewCopyLength - secondViewCopyLength + 1; i >= 0; i--, counter++) {\n          value = firstViewCopy[firstViewCopyLength - counter] - b;\n\n          if (value < 0) {\n            b = 1;\n            firstViewCopy[firstViewCopyLength - counter] = value + 10;\n          } else {\n            b = 0;\n            firstViewCopy[firstViewCopyLength - counter] = value;\n            break;\n          }\n        }\n      }\n\n      return firstViewCopy.slice();\n    } //endregion\n    //region Initial variables\n\n\n    const firstBit = this._valueHex.byteLength * 8 - 1;\n    let digits = new Uint8Array(this._valueHex.byteLength * 8 / 3);\n    let bitNumber = 0;\n    let currentByte;\n    const asn1View = new Uint8Array(this._valueHex);\n    let result = \"\";\n    let flag = false; //endregion\n    //region Calculate number\n\n    for (let byteNumber = this._valueHex.byteLength - 1; byteNumber >= 0; byteNumber--) {\n      currentByte = asn1View[byteNumber];\n\n      for (let i = 0; i < 8; i++) {\n        if ((currentByte & 1) === 1) {\n          switch (bitNumber) {\n            case firstBit:\n              digits = viewSub(power2(bitNumber), digits);\n              result = \"-\";\n              break;\n\n            default:\n              digits = viewAdd(digits, power2(bitNumber));\n          }\n        }\n\n        bitNumber++;\n        currentByte >>= 1;\n      }\n    } //endregion\n    //region Print number\n\n\n    for (let i = 0; i < digits.length; i++) {\n      if (digits[i]) flag = true;\n      if (flag) result += digitsString.charAt(digits[i]);\n    }\n\n    if (flag === false) result += digitsString.charAt(0); //endregion\n\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass Integer extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Integer\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalIntegerValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 2; // Integer\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Integer\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Compare two Integer object, or Integer and ArrayBuffer objects\r\n   * @param {!Integer|ArrayBuffer} otherValue\r\n   * @returns {boolean}\r\n   */\n\n\n  isEqual(otherValue) {\n    if (otherValue instanceof Integer) {\n      if (this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\n        return (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\n      if (this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly) return this.valueBlock.valueDec === otherValue.valueBlock.valueDec;\n      return false;\n    }\n\n    if (otherValue instanceof ArrayBuffer) return (0, _pvutils.isEqualBuffer)(this.valueBlock.valueHex, otherValue);\n    return false;\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current Integer value from BER into DER format\r\n   * @returns {Integer}\r\n   */\n\n\n  convertToDER() {\n    const integer = new Integer({\n      valueHex: this.valueBlock.valueHex\n    });\n    integer.valueBlock.toDER();\n    return integer;\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current Integer value from DER to BER format\r\n   * @returns {Integer}\r\n   */\n\n\n  convertFromDER() {\n    const expectedLength = this.valueBlock.valueHex.byteLength % 2 ? this.valueBlock.valueHex.byteLength + 1 : this.valueBlock.valueHex.byteLength;\n    const integer = new Integer({\n      valueHex: this.valueBlock.valueHex\n    });\n    integer.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\n    return integer;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Enumerated type class\n//**************************************************************************************\n\n\nexports.Integer = Integer;\n\nclass Enumerated extends Integer {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Enumerated\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 10; // Enumerated\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Enumerated\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 ObjectIdentifier type class\n//**************************************************************************************\n\n\nexports.Enumerated = Enumerated;\n\nclass LocalSidValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalSidValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {number} [valueDec]\r\n   * @property {boolean} [isFirstSid]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.valueDec = (0, _pvutils.getParametersValue)(parameters, \"valueDec\", -1);\n    this.isFirstSid = (0, _pvutils.getParametersValue)(parameters, \"isFirstSid\", false);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"sidBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    if (inputLength === 0) return inputOffset; //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n    this.valueHex = new ArrayBuffer(inputLength);\n    let view = new Uint8Array(this.valueHex);\n\n    for (let i = 0; i < inputLength; i++) {\n      view[i] = intBuffer[i] & 0x7F;\n      this.blockLength++;\n      if ((intBuffer[i] & 0x80) === 0x00) break;\n    } //region Ajust size of valueHex buffer\n\n\n    const tempValueHex = new ArrayBuffer(this.blockLength);\n    const tempView = new Uint8Array(tempValueHex);\n\n    for (let i = 0; i < this.blockLength; i++) tempView[i] = view[i]; //noinspection JSCheckFunctionSignatures\n\n\n    this.valueHex = tempValueHex.slice(0);\n    view = new Uint8Array(this.valueHex); //endregion\n\n    if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n      this.error = \"End of input reached before message was fully decoded\";\n      return -1;\n    }\n\n    if (view[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n    if (this.blockLength <= 8) this.valueDec = (0, _pvutils.utilFromBase)(view, 7);else {\n      this.isHexOnly = true;\n      this.warnings.push(\"Too big SID for decoding, hex only\");\n    }\n    return inputOffset + this.blockLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //region Initial variables\n    let retBuf;\n    let retView; //endregion\n\n    if (this.isHexOnly) {\n      if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);\n      const curView = new Uint8Array(this.valueHex);\n      retBuf = new ArrayBuffer(this.blockLength);\n      retView = new Uint8Array(retBuf);\n\n      for (let i = 0; i < this.blockLength - 1; i++) retView[i] = curView[i] | 0x80;\n\n      retView[this.blockLength - 1] = curView[this.blockLength - 1];\n      return retBuf;\n    }\n\n    const encodedBuf = (0, _pvutils.utilToBase)(this.valueDec, 7);\n\n    if (encodedBuf.byteLength === 0) {\n      this.error = \"Error during encoding SID value\";\n      return new ArrayBuffer(0);\n    }\n\n    retBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n    if (sizeOnly === false) {\n      const encodedView = new Uint8Array(encodedBuf);\n      retView = new Uint8Array(retBuf);\n\n      for (let i = 0; i < encodedBuf.byteLength - 1; i++) retView[i] = encodedView[i] | 0x80;\n\n      retView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Create string representation of current SID block\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    let result = \"\";\n    if (this.isHexOnly === true) result = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);else {\n      if (this.isFirstSid) {\n        let sidValue = this.valueDec;\n        if (this.valueDec <= 39) result = \"0.\";else {\n          if (this.valueDec <= 79) {\n            result = \"1.\";\n            sidValue -= 40;\n          } else {\n            result = \"2.\";\n            sidValue -= 80;\n          }\n        }\n        result += sidValue.toString();\n      } else result = this.valueDec.toString();\n    }\n    return result;\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.valueDec = this.valueDec;\n    object.isFirstSid = this.isFirstSid;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.fromString((0, _pvutils.getParametersValue)(parameters, \"value\", \"\"));\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    let resultOffset = inputOffset;\n\n    while (inputLength > 0) {\n      const sidBlock = new LocalSidValueBlock();\n      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\n      if (resultOffset === -1) {\n        this.blockLength = 0;\n        this.error = sidBlock.error;\n        return resultOffset;\n      }\n\n      if (this.value.length === 0) sidBlock.isFirstSid = true;\n      this.blockLength += sidBlock.blockLength;\n      inputLength -= sidBlock.blockLength;\n      this.value.push(sidBlock);\n    }\n\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    let retBuf = new ArrayBuffer(0);\n\n    for (let i = 0; i < this.value.length; i++) {\n      const valueBuf = this.value[i].toBER(sizeOnly);\n\n      if (valueBuf.byteLength === 0) {\n        this.error = this.value[i].error;\n        return new ArrayBuffer(0);\n      }\n\n      retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n   * @param {string} string Input string to convert from\r\n   * @returns {boolean}\r\n   */\n\n\n  fromString(string) {\n    this.value = []; // Clear existing SID values\n\n    let pos1 = 0;\n    let pos2 = 0;\n    let sid = \"\";\n    let flag = false;\n\n    do {\n      pos2 = string.indexOf(\".\", pos1);\n      if (pos2 === -1) sid = string.substr(pos1);else sid = string.substr(pos1, pos2 - pos1);\n      pos1 = pos2 + 1;\n\n      if (flag) {\n        const sidBlock = this.value[0];\n        let plus = 0;\n\n        switch (sidBlock.valueDec) {\n          case 0:\n            break;\n\n          case 1:\n            plus = 40;\n            break;\n\n          case 2:\n            plus = 80;\n            break;\n\n          default:\n            this.value = []; // clear SID array\n\n            return false;\n          // ???\n        }\n\n        const parsedSID = parseInt(sid, 10);\n        if (isNaN(parsedSID)) return true;\n        sidBlock.valueDec = parsedSID + plus;\n        flag = false;\n      } else {\n        const sidBlock = new LocalSidValueBlock();\n        sidBlock.valueDec = parseInt(sid, 10);\n        if (isNaN(sidBlock.valueDec)) return true;\n\n        if (this.value.length === 0) {\n          sidBlock.isFirstSid = true;\n          flag = true;\n        }\n\n        this.value.push(sidBlock);\n      }\n    } while (pos2 !== -1);\n\n    return true;\n  } //**********************************************************************************\n\n  /**\r\n   * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    let result = \"\";\n    let isHexOnly = false;\n\n    for (let i = 0; i < this.value.length; i++) {\n      isHexOnly = this.value[i].isHexOnly;\n      let sidStr = this.value[i].toString();\n      if (i !== 0) result = `${result}.`;\n\n      if (isHexOnly) {\n        sidStr = `{${sidStr}}`;\n        if (this.value[i].isFirstSid) result = `2.{${sidStr} - 80}`;else result += sidStr;\n      } else result += sidStr;\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"ObjectIdentifierValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.toString();\n    object.sidArray = [];\n\n    for (let i = 0; i < this.value.length; i++) object.sidArray.push(this.value[i].toJSON());\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass ObjectIdentifier extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"ObjectIdentifier\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalObjectIdentifierValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"ObjectIdentifier\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all string's classes\n//**************************************************************************************\n\n\nexports.ObjectIdentifier = ObjectIdentifier;\n\nclass LocalUtf8StringValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Constructor for \"LocalUtf8StringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.isHexOnly = true;\n    this.value = \"\"; // String representation of decoded ArrayBuffer\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Utf8StringValueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.value;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass Utf8String extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Utf8String\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalUtf8StringValueBlock);\n    if (\"value\" in parameters) this.fromString(parameters.value);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 12; // Utf8String\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Utf8String\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\n    try {\n      //noinspection JSDeprecatedSymbols\n      this.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\n    } catch (ex) {\n      this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    //noinspection JSDeprecatedSymbols\n    const str = unescape(encodeURIComponent(inputString));\n    const strLen = str.length;\n    this.valueBlock.valueHex = new ArrayBuffer(strLen);\n    const view = new Uint8Array(this.valueBlock.valueHex);\n\n    for (let i = 0; i < strLen; i++) view[i] = str.charCodeAt(i);\n\n    this.valueBlock.value = inputString;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//region Declaration of ASN.1 RelativeObjectIdentifier type class\n//**************************************************************************************\n\n\nexports.Utf8String = Utf8String;\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalRelativeSidValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {number} [valueDec]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.valueDec = (0, _pvutils.getParametersValue)(parameters, \"valueDec\", -1);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"relativeSidBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    if (inputLength === 0) return inputOffset; //region Basic check for parameters\n    //noinspection JSCheckFunctionSignatures\n\n    if ((0, _pvutils.checkBufferParams)(this, inputBuffer, inputOffset, inputLength) === false) return -1; //endregion\n\n    const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n    this.valueHex = new ArrayBuffer(inputLength);\n    let view = new Uint8Array(this.valueHex);\n\n    for (let i = 0; i < inputLength; i++) {\n      view[i] = intBuffer[i] & 0x7F;\n      this.blockLength++;\n      if ((intBuffer[i] & 0x80) === 0x00) break;\n    } //region Ajust size of valueHex buffer\n\n\n    const tempValueHex = new ArrayBuffer(this.blockLength);\n    const tempView = new Uint8Array(tempValueHex);\n\n    for (let i = 0; i < this.blockLength; i++) tempView[i] = view[i]; //noinspection JSCheckFunctionSignatures\n\n\n    this.valueHex = tempValueHex.slice(0);\n    view = new Uint8Array(this.valueHex); //endregion\n\n    if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n      this.error = \"End of input reached before message was fully decoded\";\n      return -1;\n    }\n\n    if (view[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n    if (this.blockLength <= 8) this.valueDec = (0, _pvutils.utilFromBase)(view, 7);else {\n      this.isHexOnly = true;\n      this.warnings.push(\"Too big SID for decoding, hex only\");\n    }\n    return inputOffset + this.blockLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    //region Initial variables\n    let retBuf;\n    let retView; //endregion\n\n    if (this.isHexOnly) {\n      if (sizeOnly === true) return new ArrayBuffer(this.valueHex.byteLength);\n      const curView = new Uint8Array(this.valueHex);\n      retBuf = new ArrayBuffer(this.blockLength);\n      retView = new Uint8Array(retBuf);\n\n      for (let i = 0; i < this.blockLength - 1; i++) retView[i] = curView[i] | 0x80;\n\n      retView[this.blockLength - 1] = curView[this.blockLength - 1];\n      return retBuf;\n    }\n\n    const encodedBuf = (0, _pvutils.utilToBase)(this.valueDec, 7);\n\n    if (encodedBuf.byteLength === 0) {\n      this.error = \"Error during encoding SID value\";\n      return new ArrayBuffer(0);\n    }\n\n    retBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n    if (sizeOnly === false) {\n      const encodedView = new Uint8Array(encodedBuf);\n      retView = new Uint8Array(retBuf);\n\n      for (let i = 0; i < encodedBuf.byteLength - 1; i++) retView[i] = encodedView[i] | 0x80;\n\n      retView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Create string representation of current SID block\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    let result = \"\";\n    if (this.isHexOnly === true) result = (0, _pvutils.bufferToHexCodes)(this.valueHex, 0, this.valueHex.byteLength);else {\n      result = this.valueDec.toString();\n    }\n    return result;\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.valueDec = this.valueDec;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalRelativeObjectIdentifierValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.fromString((0, _pvutils.getParametersValue)(parameters, \"value\", \"\"));\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    let resultOffset = inputOffset;\n\n    while (inputLength > 0) {\n      const sidBlock = new LocalRelativeSidValueBlock();\n      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\n      if (resultOffset === -1) {\n        this.blockLength = 0;\n        this.error = sidBlock.error;\n        return resultOffset;\n      }\n\n      this.blockLength += sidBlock.blockLength;\n      inputLength -= sidBlock.blockLength;\n      this.value.push(sidBlock);\n    }\n\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    let retBuf = new ArrayBuffer(0);\n\n    for (let i = 0; i < this.value.length; i++) {\n      const valueBuf = this.value[i].toBER(sizeOnly);\n\n      if (valueBuf.byteLength === 0) {\n        this.error = this.value[i].error;\n        return new ArrayBuffer(0);\n      }\n\n      retBuf = (0, _pvutils.utilConcatBuf)(retBuf, valueBuf);\n    }\n\n    return retBuf;\n  } //**********************************************************************************\n\n  /**\r\n   * Create \"LocalRelativeObjectIdentifierValueBlock\" class from string\r\n   * @param {string} string Input string to convert from\r\n   * @returns {boolean}\r\n   */\n\n\n  fromString(string) {\n    this.value = []; // Clear existing SID values\n\n    let pos1 = 0;\n    let pos2 = 0;\n    let sid = \"\";\n\n    do {\n      pos2 = string.indexOf(\".\", pos1);\n      if (pos2 === -1) sid = string.substr(pos1);else sid = string.substr(pos1, pos2 - pos1);\n      pos1 = pos2 + 1;\n      const sidBlock = new LocalRelativeSidValueBlock();\n      sidBlock.valueDec = parseInt(sid, 10);\n      if (isNaN(sidBlock.valueDec)) return true;\n      this.value.push(sidBlock);\n    } while (pos2 !== -1);\n\n    return true;\n  } //**********************************************************************************\n\n  /**\r\n   * Converts \"LocalRelativeObjectIdentifierValueBlock\" class to string\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    let result = \"\";\n    let isHexOnly = false;\n\n    for (let i = 0; i < this.value.length; i++) {\n      isHexOnly = this.value[i].isHexOnly;\n      let sidStr = this.value[i].toString();\n      if (i !== 0) result = `${result}.`;\n\n      if (isHexOnly) {\n        sidStr = `{${sidStr}}`;\n        result += sidStr;\n      } else result += sidStr;\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"RelativeObjectIdentifierValueBlock\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.toString();\n    object.sidArray = [];\n\n    for (let i = 0; i < this.value.length; i++) object.sidArray.push(this.value[i].toJSON());\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass RelativeObjectIdentifier extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"RelativeObjectIdentifier\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {ArrayBuffer} [valueHex]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalRelativeObjectIdentifierValueBlock);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 13; // RELATIVE OBJECT IDENTIFIER\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"RelativeObjectIdentifier\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n\n/**\r\n * @extends LocalBaseBlock\r\n * @extends HexBlock\r\n */\n\n\nexports.RelativeObjectIdentifier = RelativeObjectIdentifier;\n\nclass LocalBmpStringValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalBmpStringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.isHexOnly = true;\n    this.value = \"\";\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BmpStringValueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.value;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass BmpString extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"BmpString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalBmpStringValueBlock);\n    if (\"value\" in parameters) this.fromString(parameters.value);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 30; // BmpString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"BmpString\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    //noinspection JSCheckFunctionSignatures\n    const copyBuffer = inputBuffer.slice(0);\n    const valueView = new Uint8Array(copyBuffer);\n\n    for (let i = 0; i < valueView.length; i += 2) {\n      const temp = valueView[i];\n      valueView[i] = valueView[i + 1];\n      valueView[i + 1] = temp;\n    }\n\n    this.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    const strLength = inputString.length;\n    this.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\n    const valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n    for (let i = 0; i < strLength; i++) {\n      const codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);\n      const codeView = new Uint8Array(codeBuf);\n      if (codeView.length > 2) continue;\n      const dif = 2 - codeView.length;\n\n      for (let j = codeView.length - 1; j >= 0; j--) valueHexView[i * 2 + j + dif] = codeView[j];\n    }\n\n    this.valueBlock.value = inputString;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nexports.BmpString = BmpString;\n\nclass LocalUniversalStringValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalUniversalStringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.isHexOnly = true;\n    this.value = \"\";\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"UniversalStringValueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.value;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass UniversalString extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"UniversalString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalUniversalStringValueBlock);\n    if (\"value\" in parameters) this.fromString(parameters.value);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 28; // UniversalString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"UniversalString\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    //noinspection JSCheckFunctionSignatures\n    const copyBuffer = inputBuffer.slice(0);\n    const valueView = new Uint8Array(copyBuffer);\n\n    for (let i = 0; i < valueView.length; i += 4) {\n      valueView[i] = valueView[i + 3];\n      valueView[i + 1] = valueView[i + 2];\n      valueView[i + 2] = 0x00;\n      valueView[i + 3] = 0x00;\n    }\n\n    this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    const strLength = inputString.length;\n    this.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\n    const valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n    for (let i = 0; i < strLength; i++) {\n      const codeBuf = (0, _pvutils.utilToBase)(inputString.charCodeAt(i), 8);\n      const codeView = new Uint8Array(codeBuf);\n      if (codeView.length > 4) continue;\n      const dif = 4 - codeView.length;\n\n      for (let j = codeView.length - 1; j >= 0; j--) valueHexView[i * 4 + j + dif] = codeView[j];\n    }\n\n    this.valueBlock.value = inputString;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n\nexports.UniversalString = UniversalString;\n\nclass LocalSimpleStringValueBlock extends HexBlock(LocalBaseBlock) {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalSimpleStringValueBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.value = \"\";\n    this.isHexOnly = true;\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"SimpleStringValueBlock\";\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.value = this.value;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends BaseBlock\r\n */\n\n\nclass LocalSimpleStringBlock extends BaseBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"LocalSimpleStringBlock\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters, LocalSimpleStringValueBlock);\n    if (\"value\" in parameters) this.fromString(parameters.value);\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"SIMPLESTRING\";\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    const strLen = inputString.length;\n    this.valueBlock.valueHex = new ArrayBuffer(strLen);\n    const view = new Uint8Array(this.valueBlock.valueHex);\n\n    for (let i = 0; i < strLen; i++) view[i] = inputString.charCodeAt(i);\n\n    this.valueBlock.value = inputString;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nclass NumericString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"NumericString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 18; // NumericString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"NumericString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.NumericString = NumericString;\n\nclass PrintableString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"PrintableString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 19; // PrintableString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"PrintableString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.PrintableString = PrintableString;\n\nclass TeletexString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"TeletexString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 20; // TeletexString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"TeletexString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.TeletexString = TeletexString;\n\nclass VideotexString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"VideotexString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 21; // VideotexString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"VideotexString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.VideotexString = VideotexString;\n\nclass IA5String extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"IA5String\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 22; // IA5String\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"IA5String\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.IA5String = IA5String;\n\nclass GraphicString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"GraphicString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 25; // GraphicString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"GraphicString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.GraphicString = GraphicString;\n\nclass VisibleString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"VisibleString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 26; // VisibleString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"VisibleString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.VisibleString = VisibleString;\n\nclass GeneralString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"GeneralString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 27; // GeneralString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"GeneralString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\n\n\nexports.GeneralString = GeneralString;\n\nclass CharacterString extends LocalSimpleStringBlock {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"CharacterString\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 29; // CharacterString\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"CharacterString\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all date and time classes\n//**************************************************************************************\n\n/**\r\n * @extends VisibleString\r\n */\n\n\nexports.CharacterString = CharacterString;\n\nclass UTCTime extends VisibleString {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"UTCTime\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {string} [value] String representatio of the date\r\n   * @property {Date} [valueDate] JavaScript \"Date\" object\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.year = 0;\n    this.month = 0;\n    this.day = 0;\n    this.hour = 0;\n    this.minute = 0;\n    this.second = 0; //region Create UTCTime from ASN.1 UTC string value\n\n    if (\"value\" in parameters) {\n      this.fromString(parameters.value);\n      this.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n      const view = new Uint8Array(this.valueBlock.valueHex);\n\n      for (let i = 0; i < parameters.value.length; i++) view[i] = parameters.value.charCodeAt(i);\n    } //endregion\n    //region Create GeneralizedTime from JavaScript Date type\n\n\n    if (\"valueDate\" in parameters) {\n      this.fromDate(parameters.valueDate);\n      this.valueBlock.valueHex = this.toBuffer();\n    } //endregion\n\n\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 23; // UTCTime\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    this.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ASN.1 internal string into ArrayBuffer\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBuffer() {\n    const str = this.toString();\n    const buffer = new ArrayBuffer(str.length);\n    const view = new Uint8Array(buffer);\n\n    for (let i = 0; i < str.length; i++) view[i] = str.charCodeAt(i);\n\n    return buffer;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting \"Date\" object into ASN.1 internal string\r\n   * @param {!Date} inputDate JavaScript \"Date\" object\r\n   */\n\n\n  fromDate(inputDate) {\n    this.year = inputDate.getUTCFullYear();\n    this.month = inputDate.getUTCMonth() + 1;\n    this.day = inputDate.getUTCDate();\n    this.hour = inputDate.getUTCHours();\n    this.minute = inputDate.getUTCMinutes();\n    this.second = inputDate.getUTCSeconds();\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Function converting ASN.1 internal string into \"Date\" object\r\n   * @returns {Date}\r\n   */\n\n\n  toDate() {\n    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    //region Parse input string\n    const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n    const parserArray = parser.exec(inputString);\n\n    if (parserArray === null) {\n      this.error = \"Wrong input string for convertion\";\n      return;\n    } //endregion\n    //region Store parsed values\n\n\n    const year = parseInt(parserArray[1], 10);\n    if (year >= 50) this.year = 1900 + year;else this.year = 2000 + year;\n    this.month = parseInt(parserArray[2], 10);\n    this.day = parseInt(parserArray[3], 10);\n    this.hour = parseInt(parserArray[4], 10);\n    this.minute = parseInt(parserArray[5], 10);\n    this.second = parseInt(parserArray[6], 10); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ASN.1 internal class into JavaScript string\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    const outputArray = new Array(7);\n    outputArray[0] = (0, _pvutils.padNumber)(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);\n    outputArray[1] = (0, _pvutils.padNumber)(this.month, 2);\n    outputArray[2] = (0, _pvutils.padNumber)(this.day, 2);\n    outputArray[3] = (0, _pvutils.padNumber)(this.hour, 2);\n    outputArray[4] = (0, _pvutils.padNumber)(this.minute, 2);\n    outputArray[5] = (0, _pvutils.padNumber)(this.second, 2);\n    outputArray[6] = \"Z\";\n    return outputArray.join(\"\");\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"UTCTime\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.year = this.year;\n    object.month = this.month;\n    object.day = this.day;\n    object.hour = this.hour;\n    object.minute = this.minute;\n    object.second = this.second;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends VisibleString\r\n */\n\n\nexports.UTCTime = UTCTime;\n\nclass GeneralizedTime extends VisibleString {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"GeneralizedTime\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {string} [value] String representatio of the date\r\n   * @property {Date} [valueDate] JavaScript \"Date\" object\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.year = 0;\n    this.month = 0;\n    this.day = 0;\n    this.hour = 0;\n    this.minute = 0;\n    this.second = 0;\n    this.millisecond = 0; //region Create UTCTime from ASN.1 UTC string value\n\n    if (\"value\" in parameters) {\n      this.fromString(parameters.value);\n      this.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n      const view = new Uint8Array(this.valueBlock.valueHex);\n\n      for (let i = 0; i < parameters.value.length; i++) view[i] = parameters.value.charCodeAt(i);\n    } //endregion\n    //region Create GeneralizedTime from JavaScript Date type\n\n\n    if (\"valueDate\" in parameters) {\n      this.fromDate(parameters.valueDate);\n      this.valueBlock.valueHex = this.toBuffer();\n    } //endregion\n\n\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 24; // GeneralizedTime\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm === true ? inputLength : this.lenBlock.length);\n\n    if (resultOffset === -1) {\n      this.error = this.valueBlock.error;\n      return resultOffset;\n    }\n\n    this.fromBuffer(this.valueBlock.valueHex);\n    if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n    if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n    if (this.valueBlock.error.length === 0) this.blockLength += this.valueBlock.blockLength;\n    return resultOffset;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ArrayBuffer into ASN.1 internal string\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   */\n\n\n  fromBuffer(inputBuffer) {\n    this.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ASN.1 internal string into ArrayBuffer\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBuffer() {\n    const str = this.toString();\n    const buffer = new ArrayBuffer(str.length);\n    const view = new Uint8Array(buffer);\n\n    for (let i = 0; i < str.length; i++) view[i] = str.charCodeAt(i);\n\n    return buffer;\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting \"Date\" object into ASN.1 internal string\r\n   * @param {!Date} inputDate JavaScript \"Date\" object\r\n   */\n\n\n  fromDate(inputDate) {\n    this.year = inputDate.getUTCFullYear();\n    this.month = inputDate.getUTCMonth() + 1;\n    this.day = inputDate.getUTCDate();\n    this.hour = inputDate.getUTCHours();\n    this.minute = inputDate.getUTCMinutes();\n    this.second = inputDate.getUTCSeconds();\n    this.millisecond = inputDate.getUTCMilliseconds();\n  } //**********************************************************************************\n  //noinspection JSUnusedGlobalSymbols\n\n  /**\r\n   * Function converting ASN.1 internal string into \"Date\" object\r\n   * @returns {Date}\r\n   */\n\n\n  toDate() {\n    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting JavaScript string into ASN.1 internal class\r\n   * @param {!string} inputString ASN.1 BER encoded array\r\n   */\n\n\n  fromString(inputString) {\n    //region Initial variables\n    let isUTC = false;\n    let timeString = \"\";\n    let dateTimeString = \"\";\n    let fractionPart = 0;\n    let parser;\n    let hourDifference = 0;\n    let minuteDifference = 0; //endregion\n    //region Convert as UTC time\n\n    if (inputString[inputString.length - 1] === \"Z\") {\n      timeString = inputString.substr(0, inputString.length - 1);\n      isUTC = true;\n    } //endregion\n    //region Convert as local time\n    else {\n        //noinspection JSPrimitiveTypeWrapperUsage\n        const number = new Number(inputString[inputString.length - 1]);\n        if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n        timeString = inputString;\n      } //endregion\n    //region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\n\n\n    if (isUTC) {\n      if (timeString.indexOf(\"+\") !== -1) throw new Error(\"Wrong input string for convertion\");\n      if (timeString.indexOf(\"-\") !== -1) throw new Error(\"Wrong input string for convertion\");\n    } //endregion\n    //region Get \"UTC time difference\" in case of local time\n    else {\n        let multiplier = 1;\n        let differencePosition = timeString.indexOf(\"+\");\n        let differenceString = \"\";\n\n        if (differencePosition === -1) {\n          differencePosition = timeString.indexOf(\"-\");\n          multiplier = -1;\n        }\n\n        if (differencePosition !== -1) {\n          differenceString = timeString.substr(differencePosition + 1);\n          timeString = timeString.substr(0, differencePosition);\n          if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error(\"Wrong input string for convertion\"); //noinspection JSPrimitiveTypeWrapperUsage\n\n          let number = new Number(differenceString.substr(0, 2));\n          if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n          hourDifference = multiplier * number;\n\n          if (differenceString.length === 4) {\n            //noinspection JSPrimitiveTypeWrapperUsage\n            number = new Number(differenceString.substr(2, 2));\n            if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for convertion\");\n            minuteDifference = multiplier * number;\n          }\n        }\n      } //endregion\n    //region Get position of fraction point\n\n\n    let fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\n\n    if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\n    //endregion\n    //region Get fraction part\n\n    if (fractionPointPosition !== -1) {\n      //noinspection JSPrimitiveTypeWrapperUsage\n      const fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\n      if (isNaN(fractionPartCheck.valueOf())) throw new Error(\"Wrong input string for convertion\");\n      fractionPart = fractionPartCheck.valueOf();\n      dateTimeString = timeString.substr(0, fractionPointPosition);\n    } else dateTimeString = timeString; //endregion\n    //region Parse internal date\n\n\n    switch (true) {\n      case dateTimeString.length === 8:\n        // \"YYYYMMDD\"\n        parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n        if (fractionPointPosition !== -1) throw new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\n\n        break;\n\n      case dateTimeString.length === 10:\n        // \"YYYYMMDDHH\"\n        parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n        if (fractionPointPosition !== -1) {\n          let fractionResult = 60 * fractionPart;\n          this.minute = Math.floor(fractionResult);\n          fractionResult = 60 * (fractionResult - this.minute);\n          this.second = Math.floor(fractionResult);\n          fractionResult = 1000 * (fractionResult - this.second);\n          this.millisecond = Math.floor(fractionResult);\n        }\n\n        break;\n\n      case dateTimeString.length === 12:\n        // \"YYYYMMDDHHMM\"\n        parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n        if (fractionPointPosition !== -1) {\n          let fractionResult = 60 * fractionPart;\n          this.second = Math.floor(fractionResult);\n          fractionResult = 1000 * (fractionResult - this.second);\n          this.millisecond = Math.floor(fractionResult);\n        }\n\n        break;\n\n      case dateTimeString.length === 14:\n        // \"YYYYMMDDHHMMSS\"\n        parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n        if (fractionPointPosition !== -1) {\n          const fractionResult = 1000 * fractionPart;\n          this.millisecond = Math.floor(fractionResult);\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Wrong input string for convertion\");\n    } //endregion\n    //region Put parsed values at right places\n\n\n    const parserArray = parser.exec(dateTimeString);\n    if (parserArray === null) throw new Error(\"Wrong input string for convertion\");\n\n    for (let j = 1; j < parserArray.length; j++) {\n      switch (j) {\n        case 1:\n          this.year = parseInt(parserArray[j], 10);\n          break;\n\n        case 2:\n          this.month = parseInt(parserArray[j], 10);\n          break;\n\n        case 3:\n          this.day = parseInt(parserArray[j], 10);\n          break;\n\n        case 4:\n          this.hour = parseInt(parserArray[j], 10) + hourDifference;\n          break;\n\n        case 5:\n          this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n          break;\n\n        case 6:\n          this.second = parseInt(parserArray[j], 10);\n          break;\n\n        default:\n          throw new Error(\"Wrong input string for convertion\");\n      }\n    } //endregion\n    //region Get final date\n\n\n    if (isUTC === false) {\n      const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n      this.year = tempDate.getUTCFullYear();\n      this.month = tempDate.getUTCMonth();\n      this.day = tempDate.getUTCDay();\n      this.hour = tempDate.getUTCHours();\n      this.minute = tempDate.getUTCMinutes();\n      this.second = tempDate.getUTCSeconds();\n      this.millisecond = tempDate.getUTCMilliseconds();\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Function converting ASN.1 internal class into JavaScript string\r\n   * @returns {string}\r\n   */\n\n\n  toString() {\n    const outputArray = [];\n    outputArray.push((0, _pvutils.padNumber)(this.year, 4));\n    outputArray.push((0, _pvutils.padNumber)(this.month, 2));\n    outputArray.push((0, _pvutils.padNumber)(this.day, 2));\n    outputArray.push((0, _pvutils.padNumber)(this.hour, 2));\n    outputArray.push((0, _pvutils.padNumber)(this.minute, 2));\n    outputArray.push((0, _pvutils.padNumber)(this.second, 2));\n\n    if (this.millisecond !== 0) {\n      outputArray.push(\".\");\n      outputArray.push((0, _pvutils.padNumber)(this.millisecond, 3));\n    }\n\n    outputArray.push(\"Z\");\n    return outputArray.join(\"\");\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"GeneralizedTime\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the block to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let object = {}; //region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\n    try {\n      object = super.toJSON();\n    } catch (ex) {} //endregion\n\n\n    object.year = this.year;\n    object.month = this.month;\n    object.day = this.day;\n    object.hour = this.hour;\n    object.minute = this.minute;\n    object.second = this.second;\n    object.millisecond = this.millisecond;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends Utf8String\r\n */\n\n\nexports.GeneralizedTime = GeneralizedTime;\n\nclass DATE extends Utf8String {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"DATE\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 31; // DATE\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"DATE\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends Utf8String\r\n */\n\n\nexports.DATE = DATE;\n\nclass TimeOfDay extends Utf8String {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"TimeOfDay\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 32; // TimeOfDay\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"TimeOfDay\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends Utf8String\r\n */\n\n\nexports.TimeOfDay = TimeOfDay;\n\nclass DateTime extends Utf8String {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"DateTime\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 33; // DateTime\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"DateTime\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends Utf8String\r\n */\n\n\nexports.DateTime = DateTime;\n\nclass Duration extends Utf8String {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Duration\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 34; // Duration\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"Duration\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * @extends Utf8String\r\n */\n\n\nexports.Duration = Duration;\n\nclass TIME extends Utf8String {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Time\" class\r\n   * @param {Object} [parameters={}]\r\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n    this.idBlock.tagClass = 1; // UNIVERSAL\n\n    this.idBlock.tagNumber = 14; // Time\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function, need to get a block name. Need to have it here for inhiritence\r\n   * @returns {string}\r\n   */\n\n\n  static blockName() {\n    return \"TIME\";\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Choice\n//**************************************************************************************\n\n\nexports.TIME = TIME;\n\nclass Choice {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Choice\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n   * @property {boolean} [optional]\r\n   */\n  constructor(parameters = {}) {\n    this.value = (0, _pvutils.getParametersValue)(parameters, \"value\", []);\n    this.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Any\n//**************************************************************************************\n\n\nexports.Choice = Choice;\n\nclass Any {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Any\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {string} [name]\r\n   * @property {boolean} [optional]\r\n   */\n  constructor(parameters = {}) {\n    this.name = (0, _pvutils.getParametersValue)(parameters, \"name\", \"\");\n    this.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Repeated\n//**************************************************************************************\n\n\nexports.Any = Any;\n\nclass Repeated {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Repeated\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {string} [name]\r\n   * @property {boolean} [optional]\r\n   */\n  constructor(parameters = {}) {\n    this.name = (0, _pvutils.getParametersValue)(parameters, \"name\", \"\");\n    this.optional = (0, _pvutils.getParametersValue)(parameters, \"optional\", false);\n    this.value = (0, _pvutils.getParametersValue)(parameters, \"value\", new Any());\n    this.local = (0, _pvutils.getParametersValue)(parameters, \"local\", false); // Could local or global array to store elements\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type RawData\n//**************************************************************************************\n\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\n\n\nexports.Repeated = Repeated;\n\nclass RawData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for \"Repeated\" class\r\n   * @param {Object} [parameters={}]\r\n   * @property {string} [name]\r\n   * @property {boolean} [optional]\r\n   */\n  constructor(parameters = {}) {\n    this.data = (0, _pvutils.getParametersValue)(parameters, \"data\", new ArrayBuffer(0));\n  } //**********************************************************************************\n\n  /**\r\n   * Base function for converting block from BER encoded array of bytes\r\n   * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n   * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n   * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n   * @returns {number} Offset after least decoded byte\r\n   */\n\n\n  fromBER(inputBuffer, inputOffset, inputLength) {\n    this.data = inputBuffer.slice(inputOffset, inputLength);\n    return inputOffset + inputLength;\n  } //**********************************************************************************\n\n  /**\r\n   * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n   * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n   * @returns {ArrayBuffer}\r\n   */\n\n\n  toBER(sizeOnly = false) {\n    return this.data;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major ASN.1 BER decoding function\n//**************************************************************************************\n\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\n\n\nexports.RawData = RawData;\n\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength) {\n  const incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\n  //region Local function changing a type for ASN.1 classes\n\n  function localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) return inputObject;\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings; //noinspection JSCheckFunctionSignatures\n\n    newObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\n    return newObject;\n  } //endregion\n  //region Create a basic ASN.1 type since we need to return errors and warnings from the function\n\n\n  let returnObject = new BaseBlock({}, Object); //endregion\n  //region Basic check for parameters\n\n  const baseBlock = new LocalBaseBlock();\n\n  if ((0, _pvutils.checkBufferParams)(baseBlock, inputBuffer, inputOffset, inputLength) === false) {\n    returnObject.error = baseBlock.error;\n    return {\n      offset: -1,\n      result: returnObject\n    };\n  } //endregion\n  //region Getting Uint8Array from ArrayBuffer\n\n\n  const intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength); //endregion\n  //region Initial checks\n\n  if (intBuffer.length === 0) {\n    this.error = \"Zero buffer length\";\n    return {\n      offset: -1,\n      result: returnObject\n    };\n  } //endregion\n  //region Decode indentifcation block of ASN.1 BER structure\n\n\n  let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n  returnObject.warnings.concat(returnObject.idBlock.warnings);\n\n  if (resultOffset === -1) {\n    returnObject.error = returnObject.idBlock.error;\n    return {\n      offset: -1,\n      result: returnObject\n    };\n  }\n\n  inputOffset = resultOffset;\n  inputLength -= returnObject.idBlock.blockLength; //endregion\n  //region Decode length block of ASN.1 BER structure\n\n  resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n  returnObject.warnings.concat(returnObject.lenBlock.warnings);\n\n  if (resultOffset === -1) {\n    returnObject.error = returnObject.lenBlock.error;\n    return {\n      offset: -1,\n      result: returnObject\n    };\n  }\n\n  inputOffset = resultOffset;\n  inputLength -= returnObject.lenBlock.blockLength; //endregion\n  //region Check for usign indefinite length form in encoding for primitive types\n\n  if (returnObject.idBlock.isConstructed === false && returnObject.lenBlock.isIndefiniteForm === true) {\n    returnObject.error = \"Indefinite length form used for primitive encoding form\";\n    return {\n      offset: -1,\n      result: returnObject\n    };\n  } //endregion\n  //region Switch ASN.1 block type\n\n\n  let newASN1Type = BaseBlock;\n\n  switch (returnObject.idBlock.tagClass) {\n    //region UNIVERSAL\n    case 1:\n      //region Check for reserved tag numbers\n      if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {\n        returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n        return {\n          offset: -1,\n          result: returnObject\n        };\n      } //endregion\n\n\n      switch (returnObject.idBlock.tagNumber) {\n        //region EndOfContent type\n        case 0:\n          //region Check for EndOfContent type\n          if (returnObject.idBlock.isConstructed === true && returnObject.lenBlock.length > 0) {\n            returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n            return {\n              offset: -1,\n              result: returnObject\n            };\n          } //endregion\n\n\n          newASN1Type = EndOfContent;\n          break;\n        //endregion\n        //region Boolean type\n\n        case 1:\n          newASN1Type = Boolean;\n          break;\n        //endregion\n        //region Integer type\n\n        case 2:\n          newASN1Type = Integer;\n          break;\n        //endregion\n        //region BitString type\n\n        case 3:\n          newASN1Type = BitString;\n          break;\n        //endregion\n        //region OctetString type\n\n        case 4:\n          newASN1Type = OctetString;\n          break;\n        //endregion\n        //region Null type\n\n        case 5:\n          newASN1Type = Null;\n          break;\n        //endregion\n        //region OBJECT IDENTIFIER type\n\n        case 6:\n          newASN1Type = ObjectIdentifier;\n          break;\n        //endregion\n        //region Enumerated type\n\n        case 10:\n          newASN1Type = Enumerated;\n          break;\n        //endregion\n        //region Utf8String type\n\n        case 12:\n          newASN1Type = Utf8String;\n          break;\n        //endregion\n        //region Time type\n        //region RELATIVE OBJECT IDENTIFIER type\n\n        case 13:\n          newASN1Type = RelativeObjectIdentifier;\n          break;\n        //endregion\n\n        case 14:\n          newASN1Type = TIME;\n          break;\n        //endregion\n        //region ASN.1 reserved type\n\n        case 15:\n          returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n          return {\n            offset: -1,\n            result: returnObject\n          };\n        //endregion\n        //region Sequence type\n\n        case 16:\n          newASN1Type = Sequence;\n          break;\n        //endregion\n        //region Set type\n\n        case 17:\n          newASN1Type = Set;\n          break;\n        //endregion\n        //region NumericString type\n\n        case 18:\n          newASN1Type = NumericString;\n          break;\n        //endregion\n        //region PrintableString type\n\n        case 19:\n          newASN1Type = PrintableString;\n          break;\n        //endregion\n        //region TeletexString type\n\n        case 20:\n          newASN1Type = TeletexString;\n          break;\n        //endregion\n        //region VideotexString type\n\n        case 21:\n          newASN1Type = VideotexString;\n          break;\n        //endregion\n        //region IA5String type\n\n        case 22:\n          newASN1Type = IA5String;\n          break;\n        //endregion\n        //region UTCTime type\n\n        case 23:\n          newASN1Type = UTCTime;\n          break;\n        //endregion\n        //region GeneralizedTime type\n\n        case 24:\n          newASN1Type = GeneralizedTime;\n          break;\n        //endregion\n        //region GraphicString type\n\n        case 25:\n          newASN1Type = GraphicString;\n          break;\n        //endregion\n        //region VisibleString type\n\n        case 26:\n          newASN1Type = VisibleString;\n          break;\n        //endregion\n        //region GeneralString type\n\n        case 27:\n          newASN1Type = GeneralString;\n          break;\n        //endregion\n        //region UniversalString type\n\n        case 28:\n          newASN1Type = UniversalString;\n          break;\n        //endregion\n        //region CharacterString type\n\n        case 29:\n          newASN1Type = CharacterString;\n          break;\n        //endregion\n        //region BmpString type\n\n        case 30:\n          newASN1Type = BmpString;\n          break;\n        //endregion\n        //region DATE type\n\n        case 31:\n          newASN1Type = DATE;\n          break;\n        //endregion\n        //region TimeOfDay type\n\n        case 32:\n          newASN1Type = TimeOfDay;\n          break;\n        //endregion\n        //region Date-Time type\n\n        case 33:\n          newASN1Type = DateTime;\n          break;\n        //endregion\n        //region Duration type\n\n        case 34:\n          newASN1Type = Duration;\n          break;\n        //endregion\n        //region default\n\n        default:\n          {\n            let newObject;\n            if (returnObject.idBlock.isConstructed === true) newObject = new Constructed();else newObject = new Primitive();\n            newObject.idBlock = returnObject.idBlock;\n            newObject.lenBlock = returnObject.lenBlock;\n            newObject.warnings = returnObject.warnings;\n            returnObject = newObject;\n            resultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\n          }\n        //endregion\n      }\n\n      break;\n    //endregion\n    //region All other tag classes\n\n    case 2: // APPLICATION\n\n    case 3: // CONTEXT-SPECIFIC\n\n    case 4: // PRIVATE\n\n    default:\n      {\n        if (returnObject.idBlock.isConstructed === true) newASN1Type = Constructed;else newASN1Type = Primitive;\n      }\n    //endregion\n  } //endregion\n  //region Change type and perform BER decoding\n\n\n  returnObject = localChangeType(returnObject, newASN1Type);\n  resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm === true ? inputLength : returnObject.lenBlock.length); //endregion\n  //region Coping incoming buffer for entire ASN.1 block\n\n  returnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength); //endregion\n\n  return {\n    offset: resultOffset,\n    result: returnObject\n  };\n} //**************************************************************************************\n\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\n\n\nfunction fromBER(inputBuffer) {\n  if (inputBuffer.byteLength === 0) {\n    const result = new BaseBlock({}, Object);\n    result.error = \"Input buffer has zero length\";\n    return {\n      offset: -1,\n      result\n    };\n  }\n\n  return LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major scheme verification function\n//**************************************************************************************\n\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\n\n\nfunction compareSchema(root, inputData, inputSchema) {\n  //region Special case for Choice schema element type\n  if (inputSchema instanceof Choice) {\n    const choiceResult = false;\n\n    for (let j = 0; j < inputSchema.value.length; j++) {\n      const result = compareSchema(root, inputData, inputSchema.value[j]);\n\n      if (result.verified === true) {\n        return {\n          verified: true,\n          result: root\n        };\n      }\n    }\n\n    if (choiceResult === false) {\n      const _result = {\n        verified: false,\n        result: {\n          error: \"Wrong values for Choice type\"\n        }\n      };\n      if (inputSchema.hasOwnProperty(\"name\")) _result.name = inputSchema.name;\n      return _result;\n    }\n  } //endregion\n  //region Special case for Any schema element type\n\n\n  if (inputSchema instanceof Any) {\n    //region Add named component of ASN.1 schema\n    if (inputSchema.hasOwnProperty(\"name\")) root[inputSchema.name] = inputData; //endregion\n\n    return {\n      verified: true,\n      result: root\n    };\n  } //endregion\n  //region Initial check\n\n\n  if (root instanceof Object === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong root object\"\n      }\n    };\n  }\n\n  if (inputData instanceof Object === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 data\"\n      }\n    };\n  }\n\n  if (inputSchema instanceof Object === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  if (\"idBlock\" in inputSchema === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  } //endregion\n  //region Comparing idBlock properties in ASN.1 data and ASN.1 schema\n  //region Encode and decode ASN.1 schema idBlock\n  /// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\n\n\n  if (\"fromBER\" in inputSchema.idBlock === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  if (\"toBER\" in inputSchema.idBlock === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  const encodedId = inputSchema.idBlock.toBER(false);\n\n  if (encodedId.byteLength === 0) {\n    return {\n      verified: false,\n      result: {\n        error: \"Error encoding idBlock for ASN.1 schema\"\n      }\n    };\n  }\n\n  const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n\n  if (decodedOffset === -1) {\n    return {\n      verified: false,\n      result: {\n        error: \"Error decoding idBlock for ASN.1 schema\"\n      }\n    };\n  } //endregion\n  //region tagClass\n\n\n  if (inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n    return {\n      verified: false,\n      result: root\n    };\n  } //endregion\n  //region tagNumber\n\n\n  if (inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n    return {\n      verified: false,\n      result: root\n    };\n  } //endregion\n  //region isConstructed\n\n\n  if (inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema\"\n      }\n    };\n  }\n\n  if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n    return {\n      verified: false,\n      result: root\n    };\n  } //endregion\n  //region isHexOnly\n\n\n  if (\"isHexOnly\" in inputSchema.idBlock === false) // Since 'isHexOnly' is an inhirited property\n    {\n      return {\n        verified: false,\n        result: {\n          error: \"Wrong ASN.1 schema\"\n        }\n      };\n    }\n\n  if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n    return {\n      verified: false,\n      result: root\n    };\n  } //endregion\n  //region valueHex\n\n\n  if (inputSchema.idBlock.isHexOnly === true) {\n    if (\"valueHex\" in inputSchema.idBlock === false) // Since 'valueHex' is an inhirited property\n      {\n        return {\n          verified: false,\n          result: {\n            error: \"Wrong ASN.1 schema\"\n          }\n        };\n      }\n\n    const schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\n    const asn1View = new Uint8Array(inputData.idBlock.valueHex);\n\n    if (schemaView.length !== asn1View.length) {\n      return {\n        verified: false,\n        result: root\n      };\n    }\n\n    for (let i = 0; i < schemaView.length; i++) {\n      if (schemaView[i] !== asn1View[1]) {\n        return {\n          verified: false,\n          result: root\n        };\n      }\n    }\n  } //endregion\n  //endregion\n  //region Add named component of ASN.1 schema\n\n\n  if (inputSchema.hasOwnProperty(\"name\")) {\n    inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n    if (inputSchema.name !== \"\") root[inputSchema.name] = inputData;\n  } //endregion\n  //region Getting next ASN.1 block for comparition\n\n\n  if (inputSchema.idBlock.isConstructed === true) {\n    let admission = 0;\n    let result = {\n      verified: false\n    };\n    let maxLength = inputSchema.valueBlock.value.length;\n\n    if (maxLength > 0) {\n      if (inputSchema.valueBlock.value[0] instanceof Repeated) maxLength = inputData.valueBlock.value.length;\n    } //region Special case when constructive value has no elements\n\n\n    if (maxLength === 0) {\n      return {\n        verified: true,\n        result: root\n      };\n    } //endregion\n    //region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\n\n\n    if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {\n      let _optional = true;\n\n      for (let i = 0; i < inputSchema.valueBlock.value.length; i++) _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n\n      if (_optional === true) {\n        return {\n          verified: true,\n          result: root\n        };\n      } //region Delete early added name of block\n\n\n      if (inputSchema.hasOwnProperty(\"name\")) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n        if (inputSchema.name !== \"\") delete root[inputSchema.name];\n      } //endregion\n\n\n      root.error = \"Inconsistent object length\";\n      return {\n        verified: false,\n        result: root\n      };\n    } //endregion\n\n\n    for (let i = 0; i < maxLength; i++) {\n      //region Special case when there is an \"optional\" element of ASN.1 schema at the end\n      if (i - admission >= inputData.valueBlock.value.length) {\n        if (inputSchema.valueBlock.value[i].optional === false) {\n          const _result = {\n            verified: false,\n            result: root\n          };\n          root.error = \"Inconsistent length between ASN.1 data and schema\"; //region Delete early added name of block\n\n          if (inputSchema.hasOwnProperty(\"name\")) {\n            inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\n            if (inputSchema.name !== \"\") {\n              delete root[inputSchema.name];\n              _result.name = inputSchema.name;\n            }\n          } //endregion\n\n\n          return _result;\n        }\n      } //endregion\n      else {\n          //region Special case for Repeated type of ASN.1 schema element\n          if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n            result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n\n            if (result.verified === false) {\n              if (inputSchema.valueBlock.value[0].optional === true) admission++;else {\n                //region Delete early added name of block\n                if (inputSchema.hasOwnProperty(\"name\")) {\n                  inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n                  if (inputSchema.name !== \"\") delete root[inputSchema.name];\n                } //endregion\n\n\n                return result;\n              }\n            }\n\n            if (\"name\" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {\n              let arrayRoot = {};\n              if (\"local\" in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local === true) arrayRoot = inputData;else arrayRoot = root;\n              if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\") arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n              arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n            }\n          } //endregion\n          else {\n              result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n\n              if (result.verified === false) {\n                if (inputSchema.valueBlock.value[i].optional === true) admission++;else {\n                  //region Delete early added name of block\n                  if (inputSchema.hasOwnProperty(\"name\")) {\n                    inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n                    if (inputSchema.name !== \"\") delete root[inputSchema.name];\n                  } //endregion\n\n\n                  return result;\n                }\n              }\n            }\n        }\n    }\n\n    if (result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\n      {\n        const _result = {\n          verified: false,\n          result: root\n        }; //region Delete early added name of block\n\n        if (inputSchema.hasOwnProperty(\"name\")) {\n          inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\n          if (inputSchema.name !== \"\") {\n            delete root[inputSchema.name];\n            _result.name = inputSchema.name;\n          }\n        } //endregion\n\n\n        return _result;\n      }\n\n    return {\n      verified: true,\n      result: root\n    };\n  } //endregion\n  //region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\n\n\n  if (\"primitiveSchema\" in inputSchema && \"valueHex\" in inputData.valueBlock) {\n    //region Decoding of raw ASN.1 data\n    const asn1 = fromBER(inputData.valueBlock.valueHex);\n\n    if (asn1.offset === -1) {\n      const _result = {\n        verified: false,\n        result: asn1.result\n      }; //region Delete early added name of block\n\n      if (inputSchema.hasOwnProperty(\"name\")) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\n        if (inputSchema.name !== \"\") {\n          delete root[inputSchema.name];\n          _result.name = inputSchema.name;\n        }\n      } //endregion\n\n\n      return _result;\n    } //endregion\n\n\n    return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n  }\n\n  return {\n    verified: true,\n    result: root\n  }; //endregion\n} //**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\n\n\nfunction verifySchema(inputBuffer, inputSchema) {\n  //region Initial check\n  if (inputSchema instanceof Object === false) {\n    return {\n      verified: false,\n      result: {\n        error: \"Wrong ASN.1 schema type\"\n      }\n    };\n  } //endregion\n  //region Decoding of raw ASN.1 data\n\n\n  const asn1 = fromBER(inputBuffer);\n\n  if (asn1.offset === -1) {\n    return {\n      verified: false,\n      result: asn1.result\n    };\n  } //endregion\n  //region Compare ASN.1 struct with input schema\n\n\n  return compareSchema(asn1.result, asn1.result, inputSchema); //endregion\n} //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major function converting JSON to ASN.1 objects\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\n\n\nfunction fromJSON(json) {} // TODO Implement\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//# sourceMappingURL=asn1.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/asn1js/build/asn1.js\n// module id = ./node_modules/asn1js/build/asn1.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AlgorithmIdentifier  ::=  Sequence  {\r\n\t *    algorithm               OBJECT IDENTIFIER,\r\n\t *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/AlgorithmIdentifier.js\n// module id = ./node_modules/pkijs/src/AlgorithmIdentifier.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class Attribute {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for attribute (string representation)\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Attribute.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Any attribute values\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", Attribute.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n\t *    type   ATTRIBUTE.&id({IOSet}),\r\n\t *    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tname: (names.setName || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Any()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"values\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Attribute\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.values = asn1.result.values;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: this.values\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/Attribute.js\n// module id = ./node_modules/pkijs/src/Attribute.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"AttributeTypeAndValue\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tconst stringBlockNames = [\r\n\t\t\tasn1js.Utf8String.blockName(),\r\n\t\t\tasn1js.BmpString.blockName(),\r\n\t\t\tasn1js.UniversalString.blockName(),\r\n\t\t\tasn1js.NumericString.blockName(),\r\n\t\t\tasn1js.PrintableString.blockName(),\r\n\t\t\tasn1js.TeletexString.blockName(),\r\n\t\t\tasn1js.VideotexString.blockName(),\r\n\t\t\tasn1js.IA5String.blockName(),\r\n\t\t\tasn1js.GraphicString.blockName(),\r\n\t\t\tasn1js.VisibleString.blockName(),\r\n\t\t\tasn1js.GeneralString.blockName(),\r\n\t\t\tasn1js.CharacterString.blockName()\r\n\t\t];\r\n\r\n\t\tif(compareTo.constructor.blockName() === AttributeTypeAndValue.blockName())\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t//region Check we do have both strings\r\n\t\t\tlet isString = false;\r\n\t\t\tconst thisName = this.value.constructor.blockName();\r\n\r\n\t\t\tif(thisName === compareTo.value.constructor.blockName())\r\n\t\t\t{\r\n\t\t\t\tfor(const name of stringBlockNames)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(thisName === name)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisString = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(isString)\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/AttributeTypeAndValue.js\n// module id = ./node_modules/pkijs/src/AttributeTypeAndValue.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificationRequest ::= SEQUENCE {\r\n\t *    certificationRequestInfo CertificationRequestInfo,\r\n\t *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t *    signature                BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"CertificationRequestInfo\",\r\n\t\t\t\"CertificationRequestInfo.version\",\r\n\t\t\t\"CertificationRequestInfo.subject\",\r\n\t\t\t\"CertificationRequestInfo.subjectPublicKeyInfo\",\r\n\t\t\t\"CertificationRequestInfo.attributes\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificationRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/CertificationRequest.js\n// module id = ./node_modules/pkijs/src/CertificationRequest.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"decrypt\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSAES-PKCS1-v1_5\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/CryptoEngine.js\n// module id = ./node_modules/pkijs/src/CryptoEngine.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5915\r\n */\r\nexport default class ECPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"namedCurve\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @desc namedCurve\r\n\t\t\t */\r\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\r\n\r\n\t\tif(\"publicKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey}\r\n\t\t\t * @desc publicKey\r\n\t\t\t */\r\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new ECPublicKey();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ECPrivateKey ::= SEQUENCE {\r\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n\t * privateKey     OCTET STRING,\r\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n\t * publicKey  [1] BIT STRING OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [namedCurve]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"namedCurve\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tnamedCurve: \"namedCurve\",\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"namedCurve\" in asn1.result)\r\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n\r\n\t\tif(\"publicKey\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n\t\t\tif(\"namedCurve\" in this)\r\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\r\n\r\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"namedCurve\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\r\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst privateKeyJSON = {\r\n\t\t\tcrv: crvName,\r\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\r\n\t\t};\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\r\n\r\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\r\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\r\n\t\t}\r\n\r\n\t\treturn privateKeyJSON;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t\t\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif((\"x\" in json) && (\"y\" in json))\r\n\t\t\tthis.publicKey = new ECPublicKey({ json });\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/ECPrivateKey.js\n// module id = ./node_modules/pkijs/src/ECPrivateKey.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/ECPublicKey.js\n// module id = ./node_modules/pkijs/src/ECPublicKey.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/EncryptedContentInfo.js\n// module id = ./node_modules/pkijs/src/EncryptedContentInfo.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherPrimeInfo ::= Sequence {\r\n\t *    prime             Integer,  -- ri\r\n\t *    exponent          Integer,  -- di\r\n\t *    coefficient       Integer   -- ti\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/OtherPrimeInfo.js\n// module id = ./node_modules/pkijs/src/OtherPrimeInfo.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBES2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBES2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyDerivationFunc\r\n\t\t */\r\n\t\tthis.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionScheme\r\n\t\t */\r\n\t\tthis.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyDerivationFunc\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptionScheme\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBES2-params ::= SEQUENCE {\r\n\t *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n\t *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationFunc]\r\n\t\t * @property {string} [encryptionScheme]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyDerivationFunc\",\r\n\t\t\t\"encryptionScheme\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBES2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyDerivationFunc: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptionScheme: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionScheme\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBES2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n\t\tthis.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.keyDerivationFunc.toSchema(),\r\n\t\t\t\tthis.encryptionScheme.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/PBES2Params.js\n// module id = ./node_modules/pkijs/src/PBES2Params.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBKDF2-params ::= SEQUENCE {\r\n\t *    salt CHOICE {\r\n\t *        specified OCTET STRING,\r\n\t *        otherSource AlgorithmIdentifier },\r\n\t *  iterationCount INTEGER (1..MAX),\r\n\t *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t *  prf AlgorithmIdentifier\r\n\t *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"salt\",\r\n\t\t\t\"iterationCount\",\r\n\t\t\t\"keyLength\",\r\n\t\t\t\"prf\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/PBKDF2Params.js\n// module id = ./node_modules/pkijs/src/PBKDF2Params.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/PrivateKeyInfo.js\n// module id = ./node_modules/pkijs/src/PrivateKeyInfo.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getCrypto } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\nimport RSAPublicKey from \"./RSAPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\t\t\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t *    algorithm            AlgorithmIdentifier,\r\n\t *    subjectPublicKey     BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"subjectPublicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\t\t\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\t\t\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} exportedKey\r\n\t\t\t */\r\n\t\t\texportedKey =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(exception)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn undefined;\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/PublicKeyInfo.js\n// module id = ./node_modules/pkijs/src/PublicKeyInfo.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc modulus\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc publicExponent\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc privateExponent\r\n\t\t */\r\n\t\tthis.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime1\r\n\t\t */\r\n\t\tthis.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime2\r\n\t\t */\r\n\t\tthis.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent1\r\n\t\t */\r\n\t\tthis.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent2\r\n\t\t */\r\n\t\tthis.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\r\n\r\n\t\tif(\"otherPrimeInfos\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<OtherPrimeInfo>}\r\n\t\t\t * @desc otherPrimeInfos\r\n\t\t\t */\r\n\t\t\tthis.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"privateExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"otherPrimeInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPrivateKey ::= Sequence {\r\n\t *    version           Version,\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer,  -- e\r\n\t *    privateExponent   Integer,  -- d\r\n\t *    prime1            Integer,  -- p\r\n\t *    prime2            Integer,  -- q\r\n\t *    exponent1         Integer,  -- d mod (p-1)\r\n\t *    exponent2         Integer,  -- d mod (q-1)\r\n\t *    coefficient       Integer,  -- (inverse of q) mod p\r\n\t *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n\t * }\r\n\t *\r\n\t * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [modulus]\r\n\t\t * @property {string} [publicExponent]\r\n\t\t * @property {string} [privateExponent]\r\n\t\t * @property {string} [prime1]\r\n\t\t * @property {string} [prime2]\r\n\t\t * @property {string} [exponent1]\r\n\t\t * @property {string} [exponent2]\r\n\t\t * @property {string} [coefficient]\r\n\t\t * @property {string} [otherPrimeInfosName]\r\n\t\t * @property {Object} [otherPrimeInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.privateExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.otherPrimeInfosName || \"\"),\r\n\t\t\t\t\t\t\tvalue: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\",\r\n\t\t\t\"privateExponent\",\r\n\t\t\t\"prime1\",\r\n\t\t\t\"prime2\",\r\n\t\t\t\"exponent1\",\r\n\t\t\t\"exponent2\",\r\n\t\t\t\"coefficient\",\r\n\t\t\t\"otherPrimeInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\",\r\n\t\t\t\t\tprivateExponent: \"privateExponent\",\r\n\t\t\t\t\tprime1: \"prime1\",\r\n\t\t\t\t\tprime2: \"prime2\",\r\n\t\t\t\t\texponent1: \"exponent1\",\r\n\t\t\t\t\texponent2: \"exponent2\",\r\n\t\t\t\t\tcoefficient: \"coefficient\",\r\n\t\t\t\t\totherPrimeInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherPrimeInfos\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\tthis.privateExponent = asn1.result.privateExponent.convertFromDER(256);\r\n\t\tthis.prime1 = asn1.result.prime1.convertFromDER(128);\r\n\t\tthis.prime2 = asn1.result.prime2.convertFromDER(128);\r\n\t\tthis.exponent1 = asn1.result.exponent1.convertFromDER(128);\r\n\t\tthis.exponent2 = asn1.result.exponent2.convertFromDER(128);\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER(128);\r\n\r\n\t\tif(\"otherPrimeInfos\" in asn1.result)\r\n\t\t\tthis.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.modulus.convertToDER());\r\n\t\toutputArray.push(this.publicExponent);\r\n\t\toutputArray.push(this.privateExponent.convertToDER());\r\n\t\toutputArray.push(this.prime1.convertToDER());\r\n\t\toutputArray.push(this.prime2.convertToDER());\r\n\t\toutputArray.push(this.exponent1.convertToDER());\r\n\t\toutputArray.push(this.exponent2.convertToDER());\r\n\t\toutputArray.push(this.coefficient.convertToDER());\r\n\t\t\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.otherPrimeInfos, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst jwk = {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\tp: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\r\n\t\t\tq: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\r\n\t\t\tdp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\r\n\t\t\tdq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\r\n\t\t\tqi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t\tjwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\r\n\r\n\t\treturn jwk;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.n, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.privateExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"p\" in json)\r\n\t\t\tthis.prime1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.p, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"p\\\"\");\r\n\r\n\t\tif(\"q\" in json)\r\n\t\t\tthis.prime2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.q, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"q\\\"\");\r\n\r\n\t\tif(\"dp\" in json)\r\n\t\t\tthis.exponent1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dp\\\"\");\r\n\r\n\t\tif(\"dq\" in json)\r\n\t\t\tthis.exponent2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dq\\\"\");\r\n\r\n\t\tif(\"qi\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"qi\\\"\");\r\n\r\n\t\tif(\"oth\" in json)\r\n\t\t\tthis.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({ json: element }));\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/RSAPrivateKey.js\n// module id = ./node_modules/pkijs/src/RSAPrivateKey.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPublicKey ::= Sequence {\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer   -- e\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/RSAPublicKey.js\n// module id = ./node_modules/pkijs/src/RSAPublicKey.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC4055\r\n */\r\nexport default class RSASSAPSSParams\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSASSAPSSParams class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithms of hashing (DEFAULT sha1)\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", RSASSAPSSParams.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm of \"mask generaion function (MGF)\" (DEFAULT mgf1SHA1)\r\n\t\t */\r\n\t\tthis.maskGenAlgorithm = getParametersValue(parameters, \"maskGenAlgorithm\", RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Salt length (DEFAULT 20)\r\n\t\t */\r\n\t\tthis.saltLength = getParametersValue(parameters, \"saltLength\", RSASSAPSSParams.defaultValues(\"saltLength\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc (DEFAULT 1)\r\n\t\t */\r\n\t\tthis.trailerField = getParametersValue(parameters, \"trailerField\", RSASSAPSSParams.defaultValues(\"trailerField\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tcase \"maskGenAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\talgorithmParams: (new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t})).toSchema()\r\n\t\t\t\t});\r\n\t\t\tcase \"saltLength\":\r\n\t\t\t\treturn 20;\r\n\t\t\tcase \"trailerField\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSASSAPSSParams class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSASSA-PSS-params  ::=  Sequence  {\r\n\t *    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n\t *    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n\t *    saltLength         [2] Integer DEFAULT 20,\r\n\t *    trailerField       [3] Integer DEFAULT 1  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [maskGenAlgorithm]\r\n\t\t * @property {string} [saltLength]\r\n\t\t * @property {string} [trailerField]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.saltLength || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.trailerField || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"maskGenAlgorithm\",\r\n\t\t\t\"saltLength\",\r\n\t\t\t\"trailerField\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSASSAPSSParams.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmaskGenAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"maskGenAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsaltLength: \"saltLength\",\r\n\t\t\t\t\ttrailerField: \"trailerField\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSASSAPSSParams\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"hashAlgorithm\" in asn1.result)\r\n\t\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\r\n\t\tif(\"maskGenAlgorithm\" in asn1.result)\r\n\t\t\tthis.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\r\n\r\n\t\tif(\"saltLength\" in asn1.result)\r\n\t\t\tthis.saltLength = asn1.result.saltLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"trailerField\" in asn1.result)\r\n\t\t\tthis.trailerField = asn1.result.trailerField.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.hashAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.maskGenAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.saltLength })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.trailerField })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t\tobject.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t\tobject.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t\tobject.saltLength = this.saltLength;\r\n\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t\tobject.trailerField = this.trailerField;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/RSASSAPSSParams.js\n// module id = ./node_modules/pkijs/src/RSASSAPSSParams.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/RelativeDistinguishedNames.js\n// module id = ./node_modules/pkijs/src/RelativeDistinguishedNames.js\n// module chunks = 0 1 2 3 4","import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf } from \"pvutils\";\r\nimport CryptoEngine from \"./CryptoEngine.js\";\r\n//**************************************************************************************\r\n//region Crypto engine related function\r\n//**************************************************************************************\r\nlet engine = {\r\n\tname: \"none\",\r\n\tcrypto: null,\r\n\tsubtle: null\r\n};\r\n//**************************************************************************************\r\nexport function setEngine(name, crypto, subtle)\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\t// noinspection ES6ModulesDependencies, JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid] === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid] = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid] !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid} already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid].pkijs === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid].pkijs = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid].pkijs !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tglobal[process.pid].pkijs.engine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region We are in browser\r\n\telse\r\n\t{\r\n\t\tif(engine.name !== name)\r\n\t\t{\r\n\t\t\tengine = {\r\n\t\t\t\tname: name,\r\n\t\t\t\tcrypto: crypto,\r\n\t\t\t\tsubtle: subtle\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\nexport function getEngine()\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\tlet _engine;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t_engine = global[process.pid].pkijs.engine;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthrow new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn _engine;\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn engine;\r\n}\r\n//**************************************************************************************\r\n(function initCryptoEngine()\r\n{\r\n\tif(typeof self !== \"undefined\")\r\n\t{\r\n\t\tif(\"crypto\" in self)\r\n\t\t{\r\n\t\t\tlet engineName = \"webcrypto\";\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Standard crypto object\r\n\t\t\t * @type {Object}\r\n\t\t\t * @property {Object} [webkitSubtle] Subtle object from Apple\r\n\t\t\t */\r\n\t\t\tconst cryptoObject = self.crypto;\r\n\t\t\tlet subtleObject;\r\n\t\t\t\r\n\t\t\t// Apple Safari support\r\n\t\t\tif(\"webkitSubtle\" in self.crypto)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tengineName = \"safari\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"subtle\" in self.crypto)\r\n\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\r\n\r\n\t\t\tif(typeof subtleObject === \"undefined\")\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: new CryptoEngine({name: engineName, crypto: self.crypto, subtle: subtleObject})\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetEngine(engine.name, engine.crypto, engine.subtle);\r\n})();\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of common functions\r\n//**************************************************************************************\r\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\r\nexport function getCrypto()\r\n{\r\n\tconst _engine = getEngine();\r\n\t\r\n\tif(_engine.subtle !== null)\r\n\t\treturn _engine.subtle;\r\n\t\r\n\treturn undefined;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\r\nexport function getRandomValues(view)\r\n{\r\n\treturn getEngine().subtle.getRandomValues(view);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\r\nexport function getOIDByAlgorithm(algorithm)\r\n{\r\n\treturn getEngine().subtle.getOIDByAlgorithm(algorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\r\nexport function getAlgorithmParameters(algorithmName, operation)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createCMSECDSASignature(signatureBuffer)\r\n{\r\n\t//region Initial check for correct length\r\n\tif((signatureBuffer.byteLength % 2) !== 0)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\t\r\n\tconst rBuffer = new ArrayBuffer(length);\r\n\tconst rView = new Uint8Array(rBuffer);\r\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\r\n\t\r\n\tconst rInteger = new asn1js.Integer({ valueHex: rBuffer });\r\n\t\r\n\tconst sBuffer = new ArrayBuffer(length);\r\n\tconst sView = new Uint8Array(sBuffer);\r\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\r\n\t\r\n\tconst sInteger = new asn1js.Integer({ valueHex: sBuffer });\r\n\t//endregion\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tvalue: [\r\n\t\t\trInteger.convertToDER(),\r\n\t\t\tsInteger.convertToDER()\r\n\t\t]\r\n\t})).toBER(false);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\r\nexport function stringPrep(inputString)\r\n{\r\n\t//region Initial variables\r\n\tlet isSpace = false;\r\n\tlet cuttedResult = \"\";\r\n\t//endregion\r\n\t\r\n\tconst result = inputString.trim(); // Trim input string\r\n\t\r\n\t//region Change all sequence of SPACE down to SPACE char\r\n\tfor(let i = 0; i < result.length; i++)\r\n\t{\r\n\t\tif(result.charCodeAt(i) === 32)\r\n\t\t{\r\n\t\t\tif(isSpace === false)\r\n\t\t\t\tisSpace = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(isSpace)\r\n\t\t\t{\r\n\t\t\t\tcuttedResult += \" \";\r\n\t\t\t\tisSpace = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcuttedResult += result[i];\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn cuttedResult.toLowerCase();\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createECDSASignatureFromCMS(cmsSignature)\r\n{\r\n\t//region Check input variables\r\n\tif((cmsSignature instanceof asn1js.Sequence) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif(cmsSignature.valueBlock.value.length !== 2)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[0] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[1] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\tconst rValue = cmsSignature.valueBlock.value[0].convertFromDER();\r\n\tconst sValue = cmsSignature.valueBlock.value[1].convertFromDER();\r\n\t\r\n\t//region Check the lengths of two parts are equal\r\n\tswitch(true)\r\n\t{\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = sValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValue.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValueBufferCorrected);\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\t//region In case we have equal length and the length is not even with 2\r\n\t\t\t\tif(rValue.valueBlock.valueHex.byteLength % 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst correctedLength = (rValue.valueBlock.valueHex.byteLength + 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValueBufferCorrected);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\r\nexport function getAlgorithmByOID(oid)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmByOID(oid);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\r\nexport function getHashAlgorithm(signatureAlgorithm)\r\n{\r\n\treturn getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo)\r\n{\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\tcase \"SHA-256\":\r\n\t\tcase \"SHA-384\":\r\n\t\tcase \"SHA-512\":\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Counter > 255)\r\n\t\treturn Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst counterBuffer = new ArrayBuffer(4);\r\n\tconst counterView = new Uint8Array(counterBuffer);\r\n\tcounterView[0] = 0x00;\r\n\tcounterView[1] = 0x00;\r\n\tcounterView[2] = 0x00;\r\n\tcounterView[3] = Counter;\r\n\t\r\n\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Create a combined ArrayBuffer for digesting\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);\r\n\t//endregion\r\n\t\r\n\t//region Return digest of combined ArrayBuffer and information about current counter\r\n\treturn crypto.digest({\r\n\t\tname: hashFunction\r\n\t},\r\n\tcombinedBuffer)\r\n\t\t.then(result =>\r\n\t\t\t({\r\n\t\t\t\tcounter: Counter,\r\n\t\t\t\tresult\r\n\t\t\t}));\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo)\r\n{\r\n\t//region Initial variables\r\n\tlet hashLength = 0;\r\n\tlet maxCounter = 1;\r\n\t\r\n\tconst kdfArray = [];\r\n\t//endregion\r\n\t\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\thashLength = 160; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\thashLength = 256; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\thashLength = 384; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\thashLength = 512; // In bits\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t//endregion\r\n\t\r\n\t//region Calculated maximum value of \"Counter\" variable\r\n\tconst quotient = keydatalen / hashLength;\r\n\t\r\n\tif(Math.floor(quotient) > 0)\r\n\t{\r\n\t\tmaxCounter = Math.floor(quotient);\r\n\t\t\r\n\t\tif((quotient - maxCounter) > 0)\r\n\t\t\tmaxCounter++;\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Create an array of \"kdfWithCounter\"\r\n\tfor(let i = 1; i <= maxCounter; i++)\r\n\t\tkdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\r\n\t//endregion\r\n\t\r\n\t//region Return combined digest with specified length\r\n\treturn Promise.all(kdfArray).then(incomingResult =>\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t\tlet currentCounter = 1;\r\n\t\tlet found = true;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine all buffer together\r\n\t\twhile(found)\r\n\t\t{\r\n\t\t\tfound = false;\r\n\t\t\t\r\n\t\t\tfor(const result of incomingResult)\r\n\t\t\t{\r\n\t\t\t\tif(result.counter === currentCounter)\r\n\t\t\t\t{\r\n\t\t\t\t\tcombinedBuffer = utilConcatBuf(combinedBuffer, result.result);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurrentCounter++;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create output buffer with specified length\r\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\r\n\t\t\r\n\t\tif(combinedBuffer.byteLength > keydatalen)\r\n\t\t{\r\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\r\n\t\t\tconst newView = new Uint8Array(newBuffer);\r\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < keydatalen; i++)\r\n\t\t\t\tnewView[i] = combinedView[i];\r\n\t\t\t\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\r\n\t\t//endregion\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pkijs/src/common.js\n// module id = ./node_modules/pkijs/src/common.js\n// module chunks = 0 1 2 3 4","/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.pvtsutils = {}));\n}(this, (function (exports) { 'use strict';\n\n  class BufferSourceConverter {\r\n      static isArrayBuffer(data) {\r\n          return Object.prototype.toString.call(data) === '[object ArrayBuffer]';\r\n      }\r\n      static toArrayBuffer(data) {\r\n          const buf = this.toUint8Array(data);\r\n          if (buf.byteOffset || buf.length) {\r\n              return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\r\n          }\r\n          return buf.buffer;\r\n      }\r\n      static toUint8Array(data) {\r\n          if (typeof Buffer !== \"undefined\" && Buffer.isBuffer(data)) {\r\n              return new Uint8Array(data);\r\n          }\r\n          if (ArrayBuffer.isView(data)) {\r\n              return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n          }\r\n          if (this.isArrayBuffer(data)) {\r\n              return new Uint8Array(data);\r\n          }\r\n          throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n      }\r\n      static isBufferSource(data) {\r\n          return this.isArrayBufferView(data)\r\n              || this.isArrayBuffer(data);\r\n      }\r\n      static isArrayBufferView(data) {\r\n          return ArrayBuffer.isView(data)\r\n              || (data && this.isArrayBuffer(data.buffer));\r\n      }\r\n  }\n\n  function PrepareBuffer(buffer) {\r\n      if (typeof Buffer !== \"undefined\" && Buffer.isBuffer(buffer)) {\r\n          return new Uint8Array(buffer);\r\n      }\r\n      else if (BufferSourceConverter.isArrayBufferView(buffer)) {\r\n          return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n      }\r\n      else {\r\n          return new Uint8Array(buffer);\r\n      }\r\n  }\r\n  class Convert {\r\n      static isHex(data) {\r\n          return typeof data === \"string\"\r\n              && /^[a-z0-9]+$/i.test(data);\r\n      }\r\n      static isBase64(data) {\r\n          return typeof data === \"string\"\r\n              && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n      }\r\n      static isBase64Url(data) {\r\n          return typeof data === \"string\"\r\n              && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n      }\r\n      static ToString(buffer, enc = \"utf8\") {\r\n          const buf = PrepareBuffer(buffer);\r\n          switch (enc.toLowerCase()) {\r\n              case \"utf8\":\r\n                  return this.ToUtf8String(buf);\r\n              case \"binary\":\r\n                  return this.ToBinary(buf);\r\n              case \"hex\":\r\n                  return this.ToHex(buf);\r\n              case \"base64\":\r\n                  return this.ToBase64(buf);\r\n              case \"base64url\":\r\n                  return this.ToBase64Url(buf);\r\n              default:\r\n                  throw new Error(`Unknown type of encoding '${enc}'`);\r\n          }\r\n      }\r\n      static FromString(str, enc = \"utf8\") {\r\n          if (!str) {\r\n              return new ArrayBuffer(0);\r\n          }\r\n          switch (enc.toLowerCase()) {\r\n              case \"utf8\":\r\n                  return this.FromUtf8String(str);\r\n              case \"binary\":\r\n                  return this.FromBinary(str);\r\n              case \"hex\":\r\n                  return this.FromHex(str);\r\n              case \"base64\":\r\n                  return this.FromBase64(str);\r\n              case \"base64url\":\r\n                  return this.FromBase64Url(str);\r\n              default:\r\n                  throw new Error(`Unknown type of encoding '${enc}'`);\r\n          }\r\n      }\r\n      static ToBase64(buffer) {\r\n          const buf = PrepareBuffer(buffer);\r\n          if (typeof btoa !== \"undefined\") {\r\n              const binary = this.ToString(buf, \"binary\");\r\n              return btoa(binary);\r\n          }\r\n          else {\r\n              return Buffer.from(buf).toString(\"base64\");\r\n          }\r\n      }\r\n      static FromBase64(base64) {\r\n          const formatted = this.formatString(base64);\r\n          if (!formatted) {\r\n              return new ArrayBuffer(0);\r\n          }\r\n          if (!Convert.isBase64(formatted)) {\r\n              throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n          }\r\n          if (typeof atob !== \"undefined\") {\r\n              return this.FromBinary(atob(formatted));\r\n          }\r\n          else {\r\n              return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n          }\r\n      }\r\n      static FromBase64Url(base64url) {\r\n          const formatted = this.formatString(base64url);\r\n          if (!formatted) {\r\n              return new ArrayBuffer(0);\r\n          }\r\n          if (!Convert.isBase64Url(formatted)) {\r\n              throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n          }\r\n          return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n      }\r\n      static ToBase64Url(data) {\r\n          return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n      }\r\n      static FromUtf8String(text) {\r\n          const s = unescape(encodeURIComponent(text));\r\n          const uintArray = new Uint8Array(s.length);\r\n          for (let i = 0; i < s.length; i++) {\r\n              uintArray[i] = s.charCodeAt(i);\r\n          }\r\n          return uintArray.buffer;\r\n      }\r\n      static ToUtf8String(buffer) {\r\n          const buf = PrepareBuffer(buffer);\r\n          const encodedString = String.fromCharCode.apply(null, buf);\r\n          const decodedString = decodeURIComponent(escape(encodedString));\r\n          return decodedString;\r\n      }\r\n      static FromBinary(text) {\r\n          const stringLength = text.length;\r\n          const resultView = new Uint8Array(stringLength);\r\n          for (let i = 0; i < stringLength; i++) {\r\n              resultView[i] = text.charCodeAt(i);\r\n          }\r\n          return resultView.buffer;\r\n      }\r\n      static ToBinary(buffer) {\r\n          const buf = PrepareBuffer(buffer);\r\n          let resultString = \"\";\r\n          const len = buf.length;\r\n          for (let i = 0; i < len; i++) {\r\n              resultString = resultString + String.fromCharCode(buf[i]);\r\n          }\r\n          return resultString;\r\n      }\r\n      static ToHex(buffer) {\r\n          const buf = PrepareBuffer(buffer);\r\n          const splitter = \"\";\r\n          const res = [];\r\n          const len = buf.length;\r\n          for (let i = 0; i < len; i++) {\r\n              const char = buf[i].toString(16);\r\n              res.push(char.length === 1 ? \"0\" + char : char);\r\n          }\r\n          return res.join(splitter);\r\n      }\r\n      static FromHex(hexString) {\r\n          let formatted = this.formatString(hexString);\r\n          if (!formatted) {\r\n              return new ArrayBuffer(0);\r\n          }\r\n          if (!Convert.isHex(formatted)) {\r\n              throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n          }\r\n          if (formatted.length % 2) {\r\n              formatted = `0${formatted}`;\r\n          }\r\n          const res = new Uint8Array(formatted.length / 2);\r\n          for (let i = 0; i < formatted.length; i = i + 2) {\r\n              const c = formatted.slice(i, i + 2);\r\n              res[i / 2] = parseInt(c, 16);\r\n          }\r\n          return res.buffer;\r\n      }\r\n      static Base64Padding(base64) {\r\n          const padCount = 4 - (base64.length % 4);\r\n          if (padCount < 4) {\r\n              for (let i = 0; i < padCount; i++) {\r\n                  base64 += \"=\";\r\n              }\r\n          }\r\n          return base64;\r\n      }\r\n      static formatString(data) {\r\n          return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n      }\r\n  }\n\n  function assign(target, ...sources) {\r\n      const res = arguments[0];\r\n      for (let i = 1; i < arguments.length; i++) {\r\n          const obj = arguments[i];\r\n          for (const prop in obj) {\r\n              res[prop] = obj[prop];\r\n          }\r\n      }\r\n      return res;\r\n  }\r\n  function combine(...buf) {\r\n      const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n      const res = new Uint8Array(totalByteLength);\r\n      let currentPos = 0;\r\n      buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n          for (const item2 of arr) {\r\n              res[currentPos++] = item2;\r\n          }\r\n      });\r\n      return res.buffer;\r\n  }\r\n  function isEqual(bytes1, bytes2) {\r\n      if (!(bytes1 && bytes2)) {\r\n          return false;\r\n      }\r\n      if (bytes1.byteLength !== bytes2.byteLength) {\r\n          return false;\r\n      }\r\n      const b1 = new Uint8Array(bytes1);\r\n      const b2 = new Uint8Array(bytes2);\r\n      for (let i = 0; i < bytes1.byteLength; i++) {\r\n          if (b1[i] !== b2[i]) {\r\n              return false;\r\n          }\r\n      }\r\n      return true;\r\n  }\n\n  exports.BufferSourceConverter = BufferSourceConverter;\n  exports.Convert = Convert;\n  exports.assign = assign;\n  exports.combine = combine;\n  exports.isEqual = isEqual;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pvtsutils/build/index.js\n// module id = ./node_modules/pvtsutils/build/index.js\n// module chunks = 0 1 2 3 4","//**************************************************************************************\r\n/**\r\n * Making UTC date from local date\r\n * @param {Date} date Date to convert from\r\n * @returns {Date}\r\n */\r\nexport function getUTCDate(date)\r\n{\r\n\t// noinspection NestedFunctionCallJS, MagicNumberJS\r\n\treturn new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Get value for input parameters, or set a default value\r\n * @param {Object} parameters\r\n * @param {string} name\r\n * @param defaultValue\r\n */\r\nexport function getParametersValue(parameters, name, defaultValue)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tif((parameters instanceof Object) === false)\r\n\t\treturn defaultValue;\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(name in parameters)\r\n\t\treturn parameters[name];\r\n\t\r\n\treturn defaultValue;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Converts \"ArrayBuffer\" into a hexdecimal string\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} [inputOffset=0]\r\n * @param {number} [inputLength=inputBuffer.byteLength]\r\n * @param {boolean} [insertSpace=false]\r\n * @returns {string}\r\n */\r\nexport function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false)\r\n{\r\n\tlet result = \"\";\r\n\t\r\n\tfor(const item of (new Uint8Array(inputBuffer, inputOffset, inputLength)))\r\n\t{\r\n\t\t// noinspection ChainedFunctionCallJS\r\n\t\tconst str = item.toString(16).toUpperCase();\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(str.length === 1)\r\n\t\t\tresult += \"0\";\r\n\t\t\r\n\t\tresult += str;\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(insertSpace)\r\n\t\t\tresult += \" \";\r\n\t}\r\n\t\r\n\treturn result.trim();\r\n}\r\n//**************************************************************************************\r\n// noinspection JSValidateJSDoc, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Check input \"ArrayBuffer\" for common functions\r\n * @param {LocalBaseBlock} baseBlock\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} inputOffset\r\n * @param {number} inputLength\r\n * @returns {boolean}\r\n */\r\nexport function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif((inputBuffer instanceof ArrayBuffer) === false)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputOffset < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputLength < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif((inputBuffer.byteLength - inputOffset - inputLength) < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Convert number from 2^base to 2^10\r\n * @param {Uint8Array} inputBuffer\r\n * @param {number} inputBase\r\n * @returns {number}\r\n */\r\nexport function utilFromBase(inputBuffer, inputBase)\r\n{\r\n\tlet result = 0;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tif(inputBuffer.length === 1)\r\n\t\treturn inputBuffer[0];\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tfor(let i = (inputBuffer.length - 1); i >= 0; i--)\r\n\t\tresult += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n\t\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Convert number from 2^10 to 2^base\r\n * @param {!number} value The number to convert\r\n * @param {!number} base The base for 2^base\r\n * @param {number} [reserved=0] Pre-defined number of bytes in output array (-1 = limited by function itself)\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function utilToBase(value, base, reserved = (-1))\r\n{\r\n\tconst internalReserved = reserved;\r\n\tlet internalValue = value;\r\n\t\r\n\tlet result = 0;\r\n\tlet biggest = Math.pow(2, base);\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tfor(let i = 1; i < 8; i++)\r\n\t{\r\n\t\tif(value < biggest)\r\n\t\t{\r\n\t\t\tlet retBuf;\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(internalReserved < 0)\r\n\t\t\t{\r\n\t\t\t\tretBuf = new ArrayBuffer(i);\r\n\t\t\t\tresult = i;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(internalReserved < i)\r\n\t\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t\t\r\n\t\t\t\tretBuf = new ArrayBuffer(internalReserved);\r\n\t\t\t\t\r\n\t\t\t\tresult = internalReserved;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst retView = new Uint8Array(retBuf);\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tfor(let j = (i - 1); j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tconst basis = Math.pow(2, j * base);\r\n\t\t\t\t\r\n\t\t\t\tretView[result - j - 1] = Math.floor(internalValue / basis);\r\n\t\t\t\tinternalValue -= (retView[result - j - 1]) * basis;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\t\t\r\n\t\tbiggest *= Math.pow(2, base);\r\n\t}\r\n\t\r\n\treturn new ArrayBuffer(0);\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Concatenate two ArrayBuffers\r\n * @param {...ArrayBuffer} buffers Set of ArrayBuffer\r\n */\r\nexport function utilConcatBuf(...buffers)\r\n{\r\n\t//region Initial variables\r\n\tlet outputLength = 0;\r\n\tlet prevLength = 0;\r\n\t//endregion\r\n\t\r\n\t//region Calculate output length\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const buffer of buffers)\r\n\t\toutputLength += buffer.byteLength;\r\n\t//endregion\r\n\t\r\n\tconst retBuf = new ArrayBuffer(outputLength);\r\n\tconst retView = new Uint8Array(retBuf);\r\n\t\r\n\tfor(const buffer of buffers)\r\n\t{\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tretView.set(new Uint8Array(buffer), prevLength);\r\n\t\tprevLength += buffer.byteLength;\r\n\t}\r\n\t\r\n\treturn retBuf;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Concatenate two Uint8Array\r\n * @param {...Uint8Array} views Set of Uint8Array\r\n */\r\nexport function utilConcatView(...views)\r\n{\r\n\t//region Initial variables\r\n\tlet outputLength = 0;\r\n\tlet prevLength = 0;\r\n\t//endregion\r\n\t\r\n\t//region Calculate output length\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const view of views)\r\n\t\toutputLength += view.length;\r\n\t//endregion\r\n\t\r\n\tconst retBuf = new ArrayBuffer(outputLength);\r\n\tconst retView = new Uint8Array(retBuf);\r\n\t\r\n\tfor(const view of views)\r\n\t{\r\n\t\tretView.set(view, prevLength);\r\n\t\tprevLength += view.length;\r\n\t}\r\n\t\r\n\treturn retView;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Decoding of \"two complement\" values\r\n * The function must be called in scope of instance of \"hexBlock\" class (\"valueHex\" and \"warnings\" properties must be present)\r\n * @returns {number}\r\n */\r\nexport function utilDecodeTC()\r\n{\r\n\tconst buf = new Uint8Array(this.valueHex);\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(this.valueHex.byteLength >= 2)\r\n\t{\r\n\t\t//noinspection JSBitwiseOperatorUsage, ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(condition1 || condition2)\r\n\t\t\tthis.warnings.push(\"Needlessly long format\");\r\n\t}\r\n\t\r\n\t//region Create big part of the integer\r\n\tconst bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n\tconst bigIntView = new Uint8Array(bigIntBuffer);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\tbigIntView[i] = 0;\r\n\t\r\n\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\tbigIntView[0] = (buf[0] & 0x80); // mask only the biggest bit\r\n\t\r\n\tconst bigInt = utilFromBase(bigIntView, 8);\r\n\t//endregion\r\n\t\r\n\t//region Create small part of the integer\r\n\tconst smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n\tconst smallIntView = new Uint8Array(smallIntBuffer);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let j = 0; j < this.valueHex.byteLength; j++)\r\n\t\tsmallIntView[j] = buf[j];\r\n\t\r\n\t// noinspection MagicNumberJS\r\n\tsmallIntView[0] &= 0x7F; // mask biggest bit\r\n\t\r\n\tconst smallInt = utilFromBase(smallIntView, 8);\r\n\t//endregion\r\n\t\r\n\treturn (smallInt - bigInt);\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Encode integer value to \"two complement\" format\r\n * @param {number} value Value to encode\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function utilEncodeTC(value)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS\r\n\tconst modValue = (value < 0) ? (value * (-1)) : value;\r\n\tlet bigInt = 128;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tfor(let i = 1; i < 8; i++)\r\n\t{\r\n\t\tif(modValue <= bigInt)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(value < 0)\r\n\t\t\t{\r\n\t\t\t\tconst smallInt = bigInt - modValue;\r\n\t\t\t\t\r\n\t\t\t\tconst retBuf = utilToBase(smallInt, 8, i);\r\n\t\t\t\tconst retView = new Uint8Array(retBuf);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tretView[0] |= 0x80;\r\n\t\t\t\t\r\n\t\t\t\treturn retBuf;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet retBuf = utilToBase(modValue, 8, i);\r\n\t\t\tlet retView = new Uint8Array(retBuf);\r\n\t\t\t\r\n\t\t\t//noinspection JSBitwiseOperatorUsage, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\t\tif(retView[0] & 0x80)\r\n\t\t\t{\r\n\t\t\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t\t\tconst tempBuf = retBuf.slice(0);\r\n\t\t\t\tconst tempView = new Uint8Array(tempBuf);\r\n\t\t\t\t\r\n\t\t\t\tretBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n\t\t\t\t// noinspection ReuseOfLocalVariableJS\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tfor(let k = 0; k < tempBuf.byteLength; k++)\r\n\t\t\t\t\tretView[k + 1] = tempView[k];\r\n\t\t\t\t\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tretView[0] = 0x00;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\t\t\r\n\t\tbigInt *= Math.pow(2, 8);\r\n\t}\r\n\t\r\n\treturn (new ArrayBuffer(0));\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS, ParameterNamingConventionJS\r\n/**\r\n * Compare two array buffers\r\n * @param {!ArrayBuffer} inputBuffer1\r\n * @param {!ArrayBuffer} inputBuffer2\r\n * @returns {boolean}\r\n */\r\nexport function isEqualBuffer(inputBuffer1, inputBuffer2)\r\n{\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(inputBuffer1.byteLength !== inputBuffer2.byteLength)\r\n\t\treturn false;\r\n\t\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tconst view1 = new Uint8Array(inputBuffer1);\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tconst view2 = new Uint8Array(inputBuffer2);\r\n\t\r\n\tfor(let i = 0; i < view1.length; i++)\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(view1[i] !== view2[i])\r\n\t\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Pad input number with leade \"0\" if needed\r\n * @returns {string}\r\n * @param {number} inputNumber\r\n * @param {number} fullLength\r\n */\r\nexport function padNumber(inputNumber, fullLength)\r\n{\r\n\tconst str = inputNumber.toString(10);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(fullLength < str.length)\r\n\t\treturn \"\";\r\n\t\r\n\tconst dif = fullLength - str.length;\r\n\t\r\n\tconst padding = new Array(dif);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < dif; i++)\r\n\t\tpadding[i] = \"0\";\r\n\t\r\n\tconst paddingString = padding.join(\"\");\r\n\t\r\n\treturn paddingString.concat(str);\r\n}\r\n//**************************************************************************************\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionTooLongJS, FunctionNamingConventionJS\r\n/**\r\n * Encode string into BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} useUrlTemplate If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} skipPadding Skip BASE-64 padding or not\r\n * @param {boolean} skipLeadingZeros Skip leading zeros in input data or not\r\n * @returns {string}\r\n */\r\nexport function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false)\r\n{\r\n\tlet i = 0;\r\n\t\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tlet flag1 = 0;\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tlet flag2 = 0;\r\n\t\r\n\tlet output = \"\";\r\n\t\r\n\t// noinspection ConditionalExpressionJS\r\n\tconst template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n\t\r\n\tif(skipLeadingZeros)\r\n\t{\r\n\t\tlet nonZeroPosition = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < input.length; i++)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(input.charCodeAt(i) !== 0)\r\n\t\t\t{\r\n\t\t\t\tnonZeroPosition = i;\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tinput = input.slice(nonZeroPosition);\r\n\t}\r\n\t\r\n\twhile(i < input.length)\r\n\t{\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr1 = input.charCodeAt(i++);\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(i >= input.length)\r\n\t\t\tflag1 = 1;\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr2 = input.charCodeAt(i++);\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(i >= input.length)\r\n\t\t\tflag2 = 1;\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr3 = input.charCodeAt(i++);\r\n\t\t\r\n\t\t// noinspection LocalVariableNamingConventionJS\r\n\t\tconst enc1 = chr1 >> 2;\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tlet enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tlet enc4 = chr3 & 0x3F;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\tif(flag1 === 1)\r\n\t\t{\r\n\t\t\t// noinspection NestedAssignmentJS, AssignmentResultUsedJS, MagicNumberJS\r\n\t\t\tenc3 = enc4 = 64;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(flag2 === 1)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tenc4 = 64;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(skipPadding)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\t\tif(enc3 === 64)\r\n\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\t\t\tif(enc4 === 64)\r\n\t\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n\t}\r\n\t\r\n\treturn output;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMoreThanThreeNegationsJS, FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionNamingConventionJS\r\n/**\r\n * Decode string from BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} [useUrlTemplate=false] If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} [cutTailZeros=false] If \"true\" then cut tailing zeroz from function result\r\n * @returns {string}\r\n */\r\nexport function fromBase64(input, useUrlTemplate = false, cutTailZeros = false)\r\n{\r\n\t// noinspection ConditionalExpressionJS\r\n\tconst template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n\t\r\n\t//region Aux functions\r\n\t// noinspection FunctionWithMultipleReturnPointsJS, NestedFunctionJS\r\n\tfunction indexof(toSearch)\r\n\t{\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, MagicNumberJS\r\n\t\tfor(let i = 0; i < 64; i++)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\tif(template.charAt(i) === toSearch)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection MagicNumberJS\r\n\t\treturn 64;\r\n\t}\r\n\t\r\n\t// noinspection NestedFunctionJS\r\n\tfunction test(incoming)\r\n\t{\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS, MagicNumberJS\r\n\t\treturn ((incoming === 64) ? 0x00 : incoming);\r\n\t}\r\n\t//endregion\r\n\t\r\n\tlet i = 0;\r\n\t\r\n\tlet output = \"\";\r\n\t\r\n\twhile(i < input.length)\r\n\t{\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc1 = indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc2 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc3 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc4 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t\r\n\t\t// noinspection LocalVariableNamingConventionJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n\t\t\r\n\t\toutput += String.fromCharCode(chr1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\tif(enc3 !== 64)\r\n\t\t\toutput += String.fromCharCode(chr2);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\tif(enc4 !== 64)\r\n\t\t\toutput += String.fromCharCode(chr3);\r\n\t}\r\n\t\r\n\tif(cutTailZeros)\r\n\t{\r\n\t\tconst outputLength = output.length;\r\n\t\tlet nonZeroStart = (-1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\tfor(let i = (outputLength - 1); i >= 0; i--)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(output.charCodeAt(i) !== 0)\r\n\t\t\t{\r\n\t\t\t\tnonZeroStart = i;\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS, NegatedIfStatementJS\r\n\t\tif(nonZeroStart !== (-1))\r\n\t\t\toutput = output.slice(0, nonZeroStart + 1);\r\n\t\telse\r\n\t\t\toutput = \"\";\r\n\t}\r\n\t\r\n\treturn output;\r\n}\r\n//**************************************************************************************\r\nexport function arrayBufferToString(buffer)\r\n{\r\n\tlet resultString = \"\";\r\n\tconst view = new Uint8Array(buffer);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const element of view)\r\n\t\tresultString += String.fromCharCode(element);\r\n\t\r\n\treturn resultString;\r\n}\r\n//**************************************************************************************\r\nexport function stringToArrayBuffer(str)\r\n{\r\n\tconst stringLength = str.length;\r\n\t\r\n\tconst resultBuffer = new ArrayBuffer(stringLength);\r\n\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < stringLength; i++)\r\n\t\tresultView[i] = str.charCodeAt(i);\r\n\t\r\n\treturn resultBuffer;\r\n}\r\n//**************************************************************************************\r\nconst log2 = Math.log(2);\r\n//**************************************************************************************\r\n// noinspection FunctionNamingConventionJS\r\n/**\r\n * Get nearest to input length power of 2\r\n * @param {number} length Current length of existing array\r\n * @returns {number}\r\n */\r\nexport function nearestPowerOf2(length)\r\n{\r\n\tconst base = (Math.log(length) / log2);\r\n\t\r\n\tconst floor = Math.floor(base);\r\n\tconst round = Math.round(base);\r\n\t\r\n\t// noinspection ConditionalExpressionJS\r\n\treturn ((floor === round) ? floor : round);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Delete properties by name from specified object\r\n * @param {Object} object Object to delete properties from\r\n * @param {Array.<string>} propsArray Array of properties names\r\n */\r\nexport function clearProps(object, propsArray)\r\n{\r\n\tfor(const prop of propsArray)\r\n\t\tdelete object[prop];\r\n}\r\n//**************************************************************************************\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pvutils/src/utils.js\n// module id = ./node_modules/pvutils/src/utils.js\n// module chunks = 0 1 2 3 4","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Organization {\n    address: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    country: string;\n\n    createdAt?: Date;\n\n    email: string;\n\n    /**\n     * Type of identity federation used by organization\n     */\n    federationType?: Organization.FederationTypeEnum;\n\n    id?: number;\n\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    /**\n     * The name of the organization\n     */\n    name: string;\n\n    updatedAt?: Date;\n\n    url: string;\n\n}\nexport namespace Organization {\n    export enum FederationTypeEnum {\n        TestIdp = <any> 'test-idp',\n        OwnIdp = <any> 'own-idp',\n        ExternalIdp = <any> 'external-idp'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Service {\n    /**\n     * The domain name the service will be available on. Used in the issued certificates for the service.\n     */\n    certDomainName?: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    createdAt?: Date;\n\n    id?: number;\n\n    /**\n     * The version of this service instance.\n     */\n    instanceVersion: string;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    name: string;\n\n    /**\n     * Access type of the OpenId Connect client\n     */\n    oidcAccessType?: Service.OidcAccessTypeEnum;\n\n    /**\n     * The client id of the service in MCP. Will be generated.\n     */\n    oidcClientId?: string;\n\n    /**\n     * The client secret of the service in MCP. Will be generated.\n     */\n    oidcClientSecret?: string;\n\n    /**\n     * The OpenId Connect redirect uri of service.\n     */\n    oidcRedirectUri?: string;\n\n    /**\n     * Permissions as assigned from the organization\n     */\n    permissions?: string;\n\n    updatedAt?: Date;\n\n    /**\n     * The vessel that is linked to this service.\n     */\n    vessel?: models.Vessel;\n\n}\nexport namespace Service {\n    export enum OidcAccessTypeEnum {\n        Public = <any> 'public',\n        BearerOnly = <any> 'bearer-only',\n        Confidential = <any> 'confidential'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Service.ts","import {EnumsHelper} from \"../../../../shared/enums-helper\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\n\nexport interface OidcAccessTypeViewModel {\n\tvalue?:string;\n\tlabel?:string;\n}\n\nexport class ServiceViewModel {\n\n\n\tpublic static getAllOidcAccessTypes(): Array<OidcAccessTypeViewModel> {\n\t\tlet models:Array<OidcAccessTypeViewModel> = [];\n\n\t\tlet keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);\n\t\tkeysAndValues.forEach(enumKeyAndValue => {\n\t\t\tlet model:OidcAccessTypeViewModel = {};\n\t\t\tmodel.value = enumKeyAndValue.value;\n\t\t\tmodel.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);\n\t\t\tmodels.push(model);\n\t\t});\n\t\treturn models;\n\t}\n\n\n\tpublic static getLabelForEnum(oidcAccessTypeEnum:OidcAccessTypeEnum):string {\n\t\tif (!oidcAccessTypeEnum) {\n\t\t\treturn '';\n\t\t}\n\t\tvar text = '';\n\t\tswitch (oidcAccessTypeEnum) {\n\t\t\tcase OidcAccessTypeEnum.BearerOnly: {\n\t\t\t\ttext = 'Bearer only';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Confidential: {\n\t\t\t\ttext = 'Confidential';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Public: {\n\t\t\t\ttext = 'Public';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault : {\n\t\t\t\ttext = OidcAccessTypeEnum[oidcAccessTypeEnum];\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = ''+ oidcAccessTypeEnum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {ServiceRegistrySearchRequest} from \"../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\n\n@Injectable()\nexport class SrSearchRequestsService {\n\tprivate searchRequests: { [key: string]: ServiceRegistrySearchRequest } = {};\n  constructor() {\n  }\n\n  // Returns null if none found\n  public getSearchRequest(key:string) : ServiceRegistrySearchRequest {\n  \treturn this.searchRequests[key];\n\t}\n\n\tpublic addSearchRequest(key:string, searchRequest:ServiceRegistrySearchRequest) {\n  \tthis.searchRequests[key] = searchRequest;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\nimport {isNullOrUndefined} from \"util\";\n\n@Injectable()\nexport class SrViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  public generateLabelValuesForSpecification(specification:Specification, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (specification) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: specification.specificationId});\n      labelValues.push({label: 'Name', valueHtml: specification.name});\n      labelValues.push({label: 'Version', valueHtml: specification.version});\n\t    labelValues.push({label: 'Status', valueHtml: specification.status});\n\t\t  labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: specification.description});\n    }\n    return labelValues\n  }\n\n  public generateLabelValuesForDesign(design:Design, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (design) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: design.designId});\n      labelValues.push({label: 'Name', valueHtml: design.name});\n      labelValues.push({label: 'Version', valueHtml: design.version});\n      labelValues.push({label: 'Status', valueHtml: design.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: design.description});\n    }\n    return labelValues;\n  }\n\n  public generateLabelValuesForInstance(instance:Instance, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (instance) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: instance.instanceId});\n      labelValues.push({label: 'Name', valueHtml: instance.name});\n      labelValues.push({label: 'Version', valueHtml: instance.version});\n      labelValues.push({label: 'Status', valueHtml: instance.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: instance.description});\n\t    labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\n\n\t    if (!isNullOrUndefined(instance.compliant)) {\n\t    \tlet compliantClass =  instance.compliant ? '' : 'label-danger';\n\t\t    labelValues.push({label: 'Compliant', valueHtml: McUtils.getYesNoString(instance.compliant), linkClass: compliantClass});\n\t    }\n    }\n    return labelValues;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\n\n@Component({\n  selector: 'organization-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-details.html'),\n  styles: []\n})\nexport class OrganizationDetailsComponent {\n\tpublic shouldDisplayDelete:boolean;\n\tpublic isLoading:boolean;\n\tpublic organization:Organization;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tconstructor(private authService:AuthService, private orgService: OrganizationsService, private router:Router, private route: ActivatedRoute, private notifications:MCNotificationsService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.loadOrganization();\n\t}\n\n\tprivate loadOrganization() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tthis.orgService.getOrganization(mrn).subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.setShouldDisplayDelete();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate setShouldDisplayDelete() {\n\t\tthis.shouldDisplayDelete = !this.authService.isMyOrg(this.organization.mrn) && this.authService.authState.hasPermission(AuthPermission.SiteAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.modalDescription = \"Are you sure you want to delete the organization?<br><br>All entities will be deleted and all issued certificates will be revoked.\";\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoading = true;\n\t\tthis.showModal = false;\n\t\tthis.orgService.deleteOrganization(this.organization.mrn).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/organization-details/organization-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <organization-details-table [isLoading]=\\\"isLoading\\\" [organization]=\\\"organization\\\"></organization-details-table>\\n      <ul *ngIf=\\\"!isLoading && shouldDisplayDelete\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"shouldDisplayDelete\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Organization</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n    <div *ngIf=\\\"!isLoading && organization\\\">\\n      <ba-card title=\\\"Certificates for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <certificates-table [isAdmin]=\\\"false\\\" [entityMrn]=\\\"organization.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"organization.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"organization.certificates\\\"></certificates-table>\\n      </ba-card>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete organization'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/organizations/components/organization-details/organization-details.html\n// module id = ./src/app/pages/organizations/components/organization-details/organization-details.html\n// module chunks = 3","import {Component, ViewEncapsulation} from '@angular/core';\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {EntityImageModel} from \"../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {Observable} from \"rxjs\";\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\n\n@Component({\n  selector: 'organization-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-list.html'),\n  styles: []\n})\nexport class OrganizationListComponent {\n\tprivate organizations:Array<Organization>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public isLoading: boolean;\n  constructor(private logoService: LogoService, private authService: AuthService, private router:Router, private route:ActivatedRoute, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n\t  this.loadOrganizations();\n  }\n\n\tprivate loadOrganizations() {\n\t\tthis.orgService.getAllOrganizations().subscribe(\n\t\t\torganizations => {\n\t\t\t\tthis.organizations = organizations;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organizations', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (this.isMyOrg(entityModel.entityId)) {\n\t\t\tthis.router.navigate(['/']);\n\t\t} else {\n\t\t\tthis.router.navigate([entityModel.entityId], {relativeTo: this.route});\n\t\t}\n\t}\n\n\tprivate isMyOrg(orgMrn) {\n\t\treturn this.authService.authState.orgMrn === orgMrn;\n\t}\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.organizations) {\n\t\t  this.organizations.forEach(organization => {\n\t\t\t    var htmlContent = '&nbsp;';\n\t\t\t    if (organization.email) {\n\t\t\t\t    htmlContent = \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\";\n\t\t\t    }\n\t\t\t    this.entityImageList.push({imageSourceObservable:this.createImgObservable(organization), entityId:organization.mrn, title:organization.name, htmlContent:htmlContent});\n\t\t\t  }\n\t\t  );\n\t  }\n  }\n  private createImgObservable(organization:Organization):Observable<string> {\n\t  let imageSrc = 'assets/img/no_organization.png';\n\t  return Observable.create(observer => {\n\t\t  this.logoService.getLogoForOrganization(organization.mrn).subscribe(\n\t\t\t  logo => {\n\t\t\t\t  observer.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  observer.next(imageSrc);\n\t\t\t  }\n\t\t  );\n\t  });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/organization-list/organization-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Organizations in the Maritime Connectivity Platform\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/organizations/components/organization-list/organization-list.html\n// module id = ./src/app/pages/organizations/components/organization-list/organization-list.html\n// module chunks = 3","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'organizations',\n  template: '<router-outlet></router-outlet>'\n})\nexport class OrganizationsComponent{\n\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/organizations.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport { NgaModule } from '../../theme/nga.module';\nimport { OrganizationsComponent } from './organizations.component';\nimport { routing }       from './organizations.routing';\nimport {SharedModule} from \"../shared/shared.module\";\nimport {OrganizationListComponent} from \"./components/organization-list/organization-list.component\";\nimport {OrganizationDetailsComponent} from \"./components/organization-details/organization-details.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgaModule,\n    routing\n  ],\n  declarations: [\n    OrganizationsComponent,\n\t  OrganizationListComponent,\n\t  OrganizationDetailsComponent\n  ]\n})\nexport default class OrganizationsModule {}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/organizations.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {OrganizationsComponent} from \"./organizations.component\";\nimport {OrganizationListComponent} from \"./components/organization-list/organization-list.component\";\nimport {OrganizationDetailsComponent} from \"./components/organization-details/organization-details.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrganizationsComponent,\n    data:{breadcrumb: 'Organizations'},\n    children: [\n\t    {\n\t\t    path: '',\n\t\t    component: OrganizationListComponent\n\t    },\n\t    {\n\t\t    path: ':id',\n\t\t    component: OrganizationDetailsComponent,\n\t\t    data:{breadcrumb: 'Details'},\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/organizations.routing.ts","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n  MCNotificationsService,\n  MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { NavigationHelperService, queryKeys } from \"../../../../shared/navigation-helper.service\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { CertificateEntityType } from \"../../services/certificate-helper.service\";\nimport { CertificatesService } from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport { LabelValueModel } from \"../../../../theme/components\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../shared/app.constants\";\nimport { PemCertificate } from '../../../../backend-api/identity-registry/autogen/model/PemCertificate';\nimport CertificationRequest from 'pkijs/src/CertificationRequest';\nimport AttributeTypeAndValue from 'pkijs/src/AttributeTypeAndValue';\nimport { PrintableString } from 'asn1js';\nimport { Convert } from 'pvtsutils';\n\n@Component({\n  selector: 'certificate-issue-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-issue-new.html'),\n  styles: []\n})\nexport class CertificateIssueNewComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n  public entityTitle: string;\n  public isLoading: boolean;\n  public pemCertificate: PemCertificate;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = false;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n    this.generateLabelValues();\n  }\n\n  public zipAndDownload() {\n    this.fileHelper.downloadPemCertificate(this.pemCertificate, this.entityTitle);\n  }\n\n  public issueNew() {\n    this.isLoading = true;\n    let ecKeyGenParams = {name: \"ECDSA\", namedCurve: \"P-384\", typedCurve: \"\"};\n    let keyResult = crypto.subtle.generateKey(ecKeyGenParams, true, [\"sign\", \"verify\"]);\n    keyResult.then(keyPair => {\n      let csr = new CertificationRequest();\n      csr.subject.typesAndValues.push(new AttributeTypeAndValue({\n        type: \"2.5.4.3\", // Common name\n        value: new PrintableString({ value: \"Test\" })\n      }));\n      csr.subjectPublicKeyInfo.importKey(keyPair.publicKey).then(() => {\n        csr.sign(keyPair.privateKey, \"SHA-384\").then(() => {\n          let csrBytes = csr.toSchema().toBER(false);\n          let pemCsr = this.toPem(csrBytes, \"CERTIFICATE REQUEST\");\n          this.certificateService.issueNewCertificate(pemCsr, this.entityType, this.entityMrn).subscribe(\n              certificateBundle => {\n                crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey).then(rawPrivKey => {\n                  crypto.subtle.exportKey(\"spki\", keyPair.publicKey).then(rawPubKey => {\n                    this.pemCertificate = {\n                      certificate: certificateBundle,\n                      privateKey: this.toPem(rawPrivKey, \"PRIVATE KEY\"),\n                      publicKey: this.toPem(rawPubKey, \"PUBLIC KEY\")\n                    };\n                    this.isLoading = false;\n                  }, err => {\n                    console.error(\"Public key could not be exported\", err);\n                    this.isLoading = false;\n                  });\n                }, err => {\n                  console.error(\"Private key could not be exported\", err);\n                  this.isLoading = false;\n                });\n              },\n              err => {\n                this.isLoading = false;\n                this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\n              }\n          );\n        });\n      });\n    }, err => {\n      this.isLoading = false;\n      this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\n    });\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn.split(TOKEN_DELIMITER)[0]});\n  }\n\n  private toPem(arrayBuffer: ArrayBuffer, type: string) {\n    let b64 = Convert.ToBase64(arrayBuffer);\n    let finalString = '';\n    while(b64.length > 0) {\n      finalString += b64.substring(0, 64) + '\\n';\n      b64 = b64.substring(64);\n    }\n    return `-----BEGIN ${type}-----\\n${finalString}-----END ${type}-----\\n`;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !pemCertificate && !isLoading\\\">\\n        <h5>Issuing a new certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n\\n      <!-- After issue and success -->\\n      <div *ngIf=\\\"pemCertificate\\\">\\n        Certificate issued with success\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, McFormControlModelDatepicker, SelectModel\n} from \"../../../../theme/components/mcForm/mcFormControlModel\";\nimport {SelectValidator} from \"../../../../theme/validators/select.validator\";\nimport {CertificateRevocation} from \"../../../../backend-api/identity-registry/autogen/model/CertificateRevocation\";\nimport RevokationReasonEnum = CertificateRevocation.RevokationReasonEnum;\n\n\n@Component({\n  selector: 'certificate-revoke',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-revoke.html'),\n  styles: []\n})\nexport class CertificateRevokeComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n\tpublic entityTitle: string;\n\tpublic certificateId: string;\n  public isLoading: boolean;\n  \n\tpublic isRevoking = false;\n\tpublic revokeTitle = \"Revoke\";\n\tpublic revokeForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private certificateHelper:CertificateHelperService, private formBuilder: FormBuilder, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n\t  let entityTitle = this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n\t  let certificateId = this.route.snapshot.queryParams[queryKeys.CERT_ID];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to revoke certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n\t  this.certificateId = certificateId;\n    this.generateLabelValues();\n    this.generateForm();\n\n\t  this.isLoading = false;\n  }\n\n  public revoke() {\n    this.isRevoking = true;\n    let revokeDate:Date = this.revokeForm.value.revokedAt;\n\t  let tempRevocationReason = this.revokeForm.value.revocationReason;\n\t  var revocationReason:RevokationReasonEnum = null;\n\t  if (tempRevocationReason && tempRevocationReason.toLowerCase().indexOf('undefined') < 0) {\n\t\t  revocationReason = tempRevocationReason;\n\t  }\n    let certificateRevocation:CertificateRevocation = {revokationReason:revocationReason, revokedAt:revokeDate.getTime()+''}\n    this.certificateService.revokeCertificate(this.entityType, this.entityMrn, this.certificateId, certificateRevocation).subscribe(\n      _ => {\n        this.isRevoking = false;\n        this.navigationHelper.cancelNavigateCertificates();\n      },\n      err => {\n        this.isRevoking = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to revoke certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\n  }\n  \n\tprivate generateForm() {\n\t\tthis.revokeForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tlet selectValues = this.selectValues();\n\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.revokeForm, elementId: 'revocationReason', controlType: McFormControlType.Select, labelName: '', placeholder: '', validator:SelectValidator.validate, showCheckmark:false};\n\t\tvar formControl = new FormControl('', formControlModelSelect.validator);\n\t\tthis.revokeForm.addControl(formControlModelSelect.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\tlet formControlModel:McFormControlModelDatepicker = {minDate:new Date(), formGroup: this.revokeForm, elementId: 'revokedAt', controlType: McFormControlType.Datepicker, labelName: '', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.revokeForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose reason...', isSelected: true});\n\t\tlet allrevokeTypes = this.certificateHelper.getAllRevocationTypes();\n\t\tallrevokeTypes.forEach(revokeType => {\n\t\t\tselectValues.push({value:revokeType.value, label:revokeType.label, isSelected: false});\n\t\t});\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Revoke certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !isLoading\\\">\\n        <h5>Revoking certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <br>\\n        <h5>\\n          Please choose a reason and date for revocation.\\n        </h5>\\n        <mc-form [formGroup]=\\\"revokeForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRevoking\\\" [registerTitle]=\\\"revokeTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"revoke()\\\"></mc-form>\\n      </div>\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module id = ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module chunks = 0 1 2 3 4","import { Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { Certificate } from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\nimport {\n    CertificateEntityType,\n    CertificateHelperService\n} from \"../../services/certificate-helper.service\";\nimport { DATE_FORMAT } from \"../../../../theme/theme.constants\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { CertificateViewModel } from \"../../view-models/CertificateViewModel\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { MCNotificationsService } from \"../../../../shared/mc-notifications.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { PemCertificate } from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {\n    TableActionButton,\n    TableCell,\n    TableCellActionButtons,\n    TableHeader,\n    TableRow\n} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport { DatePipe } from \"@angular/common\";\nimport { CertificateBundle } from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\n\n@Component({\n  selector: 'certificates-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificates-table.html'),\n  styles: [require('./certificates-table.scss')]\n})\nexport class CertificatesTableComponent implements OnChanges{\n  @Input() certificates: Array<Certificate>;\n  @Input() certificateEntityType: CertificateEntityType;\n  @Input() entityMrn: string;\n  @Input() isLoading: boolean;\n  @Input() certificateTitle: string;\n  @Input() isAdmin: boolean;\n\n\tpublic tableHeaders: Array<TableHeader>;\n\tpublic tableRows: Array<TableRow>;\n  public newCertificateTitle = \"Issue new Certificate\";\n  public certificateViewModels: Array<CertificateViewModel>;\n  public tableClass:string;\n  public onIssueCertificate: Function;\n\n\tpublic onDownload:Function;\n\n  constructor(private datePipe: DatePipe, private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\n    this.onIssueCertificate = this.issueCertificate.bind(this);\n  }\n\n\tngOnInit() {\n\t\tif (!this.authService.authState.rolesLoaded) {\n\t\t\tthis.authService.rolesLoaded.subscribe((mode)=> {\n\t\t\t\tthis.generateHeadersAndRows();\n\t\t\t});\n\t\t}\n\t}\n\n  ngOnChanges() {\n    if (this.certificates) {\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\n      this.sortCertificates();\n\t    this.generateHeadersAndRows();\n    }\n  }\n\tprivate generateHeadersAndRows() {\n\t\tvar tableHeaders: Array<TableHeader> = [];\n\t\tvar tableRows: Array<TableRow> = [];\n\n\t\tvar tableHeader: TableHeader = {title:'Certificate', class:''};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid from', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid to', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'', class:'table-buttons'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\tfor (let certificate of this.certificateViewModels) {\n\t\t\tvar cells:Array<TableCell> = [];\n\n\t\t\tvar tableCell: TableCell = {valueHtml:'Certificate for ' + this.certificateTitle, class:'', truncateNumber:50};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.start, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.end, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\tif (certificate.revoked) {\n\t\t\t\ttableCell = {valueHtml:'Revoked (' + certificate.revokeReasonText + ')', class:'red-text', truncateNumber:50};\n\t\t\t\tcells.push(tableCell);\n\t\t\t} else {\n\t\t\t\tlet actionButtons:Array<TableActionButton> = [];\n\t\t\t\tlet actionButton:TableActionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick:() => {this.download(certificate)}};\n\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\tif (this.isAdmin) {\n\t\t\t\t\tactionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Revoke certificate', onClick:() => {this.revoke(certificate)}};\n\t\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\t}\n\t\t\t\tlet tableCellActionButtons: TableCellActionButtons = {valueHtml:'', class:'table-buttons', truncateNumber:0, actionButtons:actionButtons};\n\t\t\t\tcells.push(tableCellActionButtons);\n\t\t\t}\n\n\t\t\tlet tableRow: TableRow = {cells: cells};\n\t\t\ttableRows.push(tableRow);\n\t\t}\n\n\t\tthis.tableHeaders = tableHeaders;\n\t\tthis.tableRows = tableRows;\n\t}\n  private sortCertificates() {\n    // We are sorting with longest due date on top\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\n      var obj1Time:number;\n      var obj2Time:number;\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\n      if (typeof obj1.end === \"Date\") {\n        obj1Time = obj1.end.getTime();\n      } else {\n        obj1Time = obj1.end;\n      }\n      if (typeof obj2.end === \"Date\") {\n        obj2Time = obj2.end.getTime();\n      } else {\n        obj2Time = obj2.end;\n      }\n\n      if (obj1.revoked && obj2.revoked) {\n        return obj2Time - obj1Time;\n      }\n      if (obj1.revoked) {\n        return 1;\n      }\n      if (obj2.revoked) {\n        return -1;\n      }\n      return obj2Time - obj1Time;\n    });\n  }\n\n  public issueCertificate() {\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\n  }\n\n  public revoke(certificate:Certificate) {\n  \tthis.navigationHelper.navigateToRevokeCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle, certificate.serialNumber);\n  }\n\n  public download(certificate:Certificate) {\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\n    let certBundle:CertificateBundle = {pemCertificate:pemCertificate};\n    this.fileHelper.downloadPemCertificate(certBundle, this.certificateTitle);\n  }\n\n  public canCreate(): boolean {\n      return this.isAdmin;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\"></mc-table>\\n<div *ngIf=\\\"!isLoading\\\">\\n  <mc-create-button [isAdmin]=\\\"canCreate()\\\" [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3 4","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'designs-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./designs-table.html'),\n  styles: []\n})\nexport class DesignsTableComponent implements OnChanges {\n  @Input() designs: Array<Design>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.designs) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let design of this.designs) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, design.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input} from '@angular/core';\nimport {EntityImageModel} from \"../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {Observable} from \"rxjs\";\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport {Endorsement} from \"../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'endorsed-by-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./endorsed-by-list.html'),\n  styles: []\n})\nexport class EndorsedByListComponent {\n\t@Input() endorsements:Array<Endorsement>;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\tprivate cardTitle:string;\n\n\tprivate oldEndorsements:Array<Endorsement>;\n\tpublic entityImageList: Array<EntityImageModel>;\n\n  constructor(private logoService: LogoService, private authService: AuthService, private orgService:OrganizationsService, private navigationHelper:NavigationHelperService) {\n  }\n\n  ngOnInit() {\n  \tthis.cardTitle = this.title;\n\t  this.generateEntityImageList();\n  }\n\n\tngOnChanges() {\n\t\tthis.cardTitle = this.title;\n\t\tthis.generateEntityImageList();\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (this.isMyOrg(entityModel.entityId)) {\n\t\t\tthis.navigationHelper.takeMeHome();\n\t\t} else {\n\t\t\tthis.navigationHelper.navigateToOrganizationDetails(entityModel.entityId)\n\t\t}\n\t}\n\n\tprivate isMyOrg(orgMrn) {\n\t\treturn this.authService.authState.orgMrn === orgMrn;\n\t}\n\n  private generateEntityImageList() {\n  \tif (this.endorsements) {\n  \t\tif (this.endorsements !== this.oldEndorsements) { // Check to see if the endorsements is the same as last time we generated the list, because no need to do all this load again if not needed\n\t\t\t\tthis.oldEndorsements = this.endorsements;\n\t\t\t  this.entityImageList = [];\n\t\t\t  this.endorsements.forEach(endorsement => {\n\t\t\t\t\t\tlet entityImage:EntityImageModel = {imageSourceObservable:this.createImgObservable(endorsement.orgMrn), entityId:endorsement.orgMrn, title:endorsement.orgName};\n\n\t\t\t\t    this.entityImageList.push(entityImage);\n\t\t\t\t  }\n\t\t\t  );\n\t\t  }\n\t  }\n  }\n\n  private createImgObservable(orgMrn:string):Observable<string> {\n\t  let imageSrc = 'assets/img/no_organization.png';\n\t  return Observable.create(observer => {\n\t\t  this.logoService.getLogoForOrganization(orgMrn).subscribe(\n\t\t\t  logo => {\n\t\t\t\t  observer.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  observer.next(imageSrc);\n\t\t\t  }\n\t\t  );\n\t  });\n  }\n\n\tprivate setRealOrganizationName(entityImage:EntityImageModel, organizationMrn:string) {\n\t\tthis.orgService.getOrganizationName(organizationMrn).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tentityImage.title = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// Do nothing. We already have a name set, which should be correct 99% of the time\n\t\t\t}\n\t\t);\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [noDataText]=\\\"'None'\\\" [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module id = ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\n\n@Component({\n  selector: 'instances-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instances-table.html'),\n  styles: []\n})\nexport class InstancesTableComponent implements OnChanges {\n  @Input() instances: Array<Instance>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.instances) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Compliant', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Service endpoint', class:''};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Description', class:''};\n\t  tableHeaders.push(tableHeader);\n\n    for (let instance of this.instances) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:45};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    let compliantClass = instance.compliant ? '' : 'label-danger';\n\t    tableCell = {valueHtml:McUtils.getYesNoString(instance.compliant), class:'nowrap ' + compliantClass, truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:25};\n\t    this.setOrganizationCell(tableCell, instance.organizationId);\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.endpointUri, class:'list-endpoint', truncateNumber:60};\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.description, class:'table-description-short', truncateNumber:150};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3 4","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationViewModelService } from \"../../services/organization-view-model.service\";\nimport { LogoService } from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'organization-details-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-details-table.html'),\n  styles: []\n})\nexport class OrganizationDetailsTableComponent implements OnChanges {\n  private labelValues:Array<LabelValueModel>;\n\t@Input() displayLogo:boolean = true;\n  @Input() isLoading:boolean;\n\t@Input() organization: Organization;\n\t@Output() onLogoLoaded: EventEmitter<any> = new EventEmitter<any>();\n\tpublic logo:string;\n\tpublic canChangeLogo:boolean;\n\tpublic isLoadingOrgAndLogo:boolean = true;\n\tpublic uploadingLogo:boolean = false;\n  constructor(private authService:AuthService, private logoService: LogoService, private orgViewModelService: OrganizationViewModelService, private notifications:MCNotificationsService) {\n  }\n  ngOnChanges() {\n    if (this.organization) {\n\t    this.canChangeLogo = this.canChangeTheLogo();\n\t    this.loadLogo();\n    }\n  }\n\n  public uploadLogo(logo:any) {\n\t  let oldLogo = this.logo;\n\t  this.uploadingLogo = true;\n\t  this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(\n\t\t  logo => {\n\t\t\t  this.loadLogo();\n\t\t  },\n\t\t  err => {\n\t\t\t  this.logo = oldLogo;\n\t\t\t  this.uploadingLogo = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to upload logo', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n\n  private setLabelValues() {\n\t  this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\n\t  this.isLoadingOrgAndLogo = false;\n  }\n\n\tprivate loadLogo(){\n\t\tthis.logoService.getLogoForOrganization(this.organization.mrn).subscribe(\n\t\t\tlogo => {\n\t\t\t\tthis.logo = URL.createObjectURL(new Blob([logo]));\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (this.canChangeTheLogo()) {\n\t\t\t\t\tthis.logo = 'assets/img/no_organization.png';\n\t\t\t\t}\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t}\n\t\t);\n\t}\n\tprivate canChangeTheLogo():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<div *ngIf=\\\"displayLogo && logo\\\" style=\\\"margin-bottom: 10px;\\\">\\n  <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"logo | sanitizeUrl\\\" *ngIf=\\\"logo && !canChangeLogo\\\">\\n  <mc-logo-uploader [logo]=\\\"logo\\\" [uploadingLogo]=\\\"uploadingLogo\\\" (onUpload)=\\\"uploadLogo($event)\\\" *ngIf=\\\"logo && canChangeLogo\\\"></mc-logo-uploader>\\n</div>\\n<mc-label-value-table [isLoading]=\\\"isLoadingOrgAndLogo\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3 4","import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Service } from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { CertificateEntityType } from \"../../services/certificate-helper.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { ServiceViewModel } from \"../../../org-identity-registry/services/view-models/ServiceViewModel\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { IdServicesService } from \"../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../shared/app.constants\";\nimport { InstancesService } from \"../../../../backend-api/service-registry/services/instances.service\";\n\n@Component({\n  selector: 'service-details-view',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details-view.html'),\n  styles: []\n})\nexport class ServiceDetailsViewComponent {\n\t@Input() service:Service;\n\t@Input() shouldShowDelete:boolean = true;\n\t@Input() shouldShowUpdate:boolean = true;\n\t@Input() shouldShowLinkToInstance:boolean = true;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\t@Output() deleteAction:EventEmitter<any> = new EventEmitter<any>();\n\t@Output() updateAction:EventEmitter<any> = new EventEmitter<any>();\n\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic entityType: CertificateEntityType;\n\tpublic entityMrn:string;\n\tpublic onGotoVessel: Function;\n\tpublic onGotoInstance: Function;\n\tprivate linkToInstance:boolean = false;\n\tpublic isLoadingInstance:boolean = false;\n\n\tconstructor(private fileHelperService:FileHelperService, private authService: AuthService, private servicesService: IdServicesService, private notifications:MCNotificationsService, private navigationHelperService: NavigationHelperService, private instancesService:InstancesService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isLoadingInstance = true;\n\t\tthis.entityType = CertificateEntityType.Service;\n\t\tthis.onGotoVessel = this.gotoVessel.bind(this);\n\t\tthis.onGotoInstance = this.gotoInstance.bind(this);\n\t}\n\n\tngOnChanges() {\n\t\tif (this.service) {\n\t\t\tthis.entityMrn = this.service.mrn + TOKEN_DELIMITER + this.service.instanceVersion;\n\t\t\tif (this.shouldShowLinkToInstance) {\n\t\t\t\tthis.loadInstance();\n\t\t\t} else {\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadInstance() {\n\t\tthis.instancesService.getInstance(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.linkToInstance = true;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.linkToInstance = false;\n\t\t\t\t\tthis.generateLabelValues();\n\t\t\t\t} else {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the Instance for the ID service', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic showDownload():boolean {\n\t\treturn this.service.oidcClientId && this.isAdmin();\n\t}\n\n\tpublic downloadXML() {\n\t\tthis.servicesService.getIdServiceJbossXml(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\txmlString => {\n\t\t\t\tthis.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the XML', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic downloadJSON() {\n\t\tthis.servicesService.getServiceKeycloakJson(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tjsonString => {\n\t\t\t\tthis.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the JSON', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.service) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.service.mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.service.name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.service.permissions});\n\t\t\tthis.labelValues.push({label: 'Certificate domain name', valueHtml: this.service.certDomainName});\n\t\t\tif (this.service.oidcRedirectUri) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri});\n\t\t\t}\n\t\t\tif (this.service.oidcClientId) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client ID', valueHtml: this.service.oidcClientId});\n\t\t\t}\n\t\t\tif (this.service.oidcClientSecret) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret});\n\t\t\t}\n\n\t\t\tif (this.service.oidcAccessType) {\n\t\t\t\tthis.labelValues.push({label: 'Access type', valueHtml: ServiceViewModel.getLabelForEnum(this.service.oidcAccessType)});\n\t\t\t}\n\n\t\t\tthis.generateLabelValueForVessel();\n\n\t\t\tthis.generateLabelValueForInstance();\n\t\t}\n\t}\n\n\tprivate generateLabelValueForVessel() {\n\t\tlet vessel = this.service.vessel;\n\t\tif (vessel) {\n\t\t\tlet label = 'Linked vessel';\n\t\t\tthis.labelValues.push({label: label, valueHtml: vessel.name, linkFunction: this.onGotoVessel, linkValue: [vessel.mrn]});\n\t\t}\n\t}\n\n\tprivate generateLabelValueForInstance() {\n\t\tif (this.shouldShowLinkToInstance && this.linkToInstance) {\n\t\t\tlet label = 'Linked Instance';\n\t\t\tthis.labelValues.push({label: label, valueHtml: this.service.name, linkFunction: this.onGotoInstance, linkValue: [this.service.mrn, this.service.instanceVersion]});\n\t\t}\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.shouldShowDelete && this.isAdmin() && this.service != null;\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.shouldShowUpdate && this.isAdmin() && this.service != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.deleteAction.emit('');\n\t}\n\n\tprivate update() {\n\t\tthis.updateAction.emit('');\n\t}\n\n\tprivate gotoInstance(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToOrgInstance(linkValue[0], linkValue[1]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\n\t\t}\n\t}\n\n\tprivate gotoVessel(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToVessel(linkValue[0]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to vessel', MCNotificationType.Error, error);\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","module.exports = \"<ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n  <mc-label-value-table [isLoading]=\\\"isLoading || isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n  <ul *ngIf=\\\"!isLoading && service && (showDownload() || showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXML()\\\">Download JBOSS XML</button>\\n    </li>\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadJSON()\\\">Download Keycloak JSON</button>\\n    </li>\\n    <li *ngIf=\\\"showUpdate()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update</button>\\n    </li>\\n    <li *ngIf=\\\"showDelete()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Service</button>\\n    </li>\\n  </ul>\\n</ba-card>\\n\\n<div *ngIf=\\\"service\\\">\\n  <ba-card title=\\\"Certificates for {{service.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n    <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"entityMrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"service.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"service.certificates\\\"></certificates-table>\\n  </ba-card>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module id = ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {ServiceRegistrySearchRequest} from \"./ServiceRegistrySearchRequest\";\nimport {FormGroup, FormBuilder, FormControl} from \"@angular/forms\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {SrSearchRequestsService} from \"../../../org-service-registry/shared/services/sr-search-requests.service\";\nimport {SHOW_ENDORSEMENTS} from \"../../../../shared/app.constants\";\n\ninterface SelectModel {\n\tlabel:string;\n\tvalue:string;\n}\n\n@Component({\n  selector: 'service-registry-search',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-registry-search.html'),\n\tstyles: [require('./service-registry-search.scss')]\n})\nexport class ServiceRegistrySearchComponent implements OnDestroy {\n\t@Input() searchTitle: string;\n\t@Input() searchKey: string;\n\t@Input() isSearching: boolean;\n\t@Input() preFilterMyOrg: boolean;\n\t@Input() showEndorsement: boolean;\n\t@Input() showKeywords: boolean = true;\n\t@Output() onSearch:EventEmitter<ServiceRegistrySearchRequest> = new EventEmitter<ServiceRegistrySearchRequest>();\n\tprivate endorsementMainSwitch = SHOW_ENDORSEMENTS;\n\n\tpublic isLoading: boolean;\n\tpublic formGroup: FormGroup;\n\tpublic selectValuesOrganizations:Array<SelectModel>;\n\tpublic selectValuesOrganizationsForEndorsement:Array<SelectModel>;\n\tpublic onSearchFunction: Function;\n\tpublic isCollapsed:boolean;\n\tpublic collapsedClass:string;\n\tpublic toggleClass:string;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private changeDetector: ChangeDetectorRef, private authService:AuthService, formBuilder:FormBuilder, private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  \tthis.formGroup = formBuilder.group({});\n  }\n\n\tngOnDestroy() {\n\t\tthis.changeDetector.detach();\n\t}\n\n\tngOnInit() {\n\t\tthis.onSearchFunction = this.search.bind(this);\n\t\tthis.isCollapsed = false;\n\t\tthis.setClass();\n  \tthis.isLoading = true;\n\t\tthis.generateForm();\n  \tthis.loadOrganizations();\n\t}\n\n\tpublic toggle() {\n\t\tthis.isCollapsed = !this.isCollapsed;\n\t\tthis.setClass();\n\t}\n\n\tprivate setClass() {\n\t\tthis.toggleClass = this.isCollapsed ? 'fa fa-caret-square-o-down' : 'fa fa-caret-square-o-up';\n\t}\n\n\tpublic search() {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\t\tlet registeredBy:string;\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromRegisteredBy(registeredBy) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\n\t\tif (registeredBy && registeredBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tregisteredBy = undefined;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromEndorsedBy(endorsedBy:string) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet registeredBy:string;\n\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tif (endorsedBy && endorsedBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tendorsedBy = undefined;\n\t\t}\n\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate doSearch(keywords:string, registeredBy:string, endorsedBy:string) {\n\t\tlet searchRequest: ServiceRegistrySearchRequest = {keywords:keywords, registeredBy:registeredBy, endorsedBy:endorsedBy};\n\t\tthis.searchRequestsService.addSearchRequest(this.searchKey, searchRequest);\n\t\tthis.notifications.errorLog = null; // Remove error log if it is present\n\t\tthis.onSearch.emit(searchRequest);\n\t}\n\n\tprivate generateForm() {\n\t\tvar formControl = new FormControl('');\n\t\tthis.formGroup.addControl('keywords', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('registeredBy', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('endorsedBy', formControl);\n\t}\n\n\tprivate loadOrganizations() {\n\t\tthis.orgsService.getAllOrganizations().subscribe(\n\t\t\torganizations => {\n\t\t\t\tthis.setupSearchRequest(organizations);\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.setupSearchRequest([]);\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organizations', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate setupSearchRequest(organizations:Array<Organization>) {\n\t\tthis.selectValuesOrganizations = [];\n\t\tthis.selectValuesOrganizations.push({value:undefined, label:'All'});\n\t\tthis.selectValuesOrganizationsForEndorsement = [];\n\t\tthis.selectValuesOrganizationsForEndorsement.push({value:undefined, label:'No filter'});\n\n\t\torganizations.forEach(organization => {\n\t\t\tthis.selectValuesOrganizations.push({value:organization.mrn, label:organization.name});\n\t\t\tthis.selectValuesOrganizationsForEndorsement.push({value:organization.mrn, label:organization.name});\n\t\t});\n\t\tvar registeredBy:string;\n\t\tvar endorsedBy:string;\n\t\tvar keywords:string = '';\n\t\tlet searchRequest = this.searchRequestsService.getSearchRequest(this.searchKey);\n\t\tif (searchRequest) {\n\t\t\tregisteredBy = searchRequest.registeredBy;\n\t\t\tendorsedBy = searchRequest.endorsedBy;\n\t\t\tif (searchRequest.keywords) {\n\t\t\t\tkeywords = searchRequest.keywords;\n\t\t\t}\n\t\t} else if (this.preFilterMyOrg){\n\t\t\tregisteredBy = this.authService.authState.orgMrn;\n\t\t}\n\t\tthis.formGroup.patchValue({registeredBy: registeredBy});\n\t\tthis.formGroup.patchValue({endorsedBy: endorsedBy});\n\t\tthis.formGroup.patchValue({keywords: keywords});\n\n\t\tthis.formGroup.controls['registeredBy'].valueChanges.subscribe(param => this.searchFromRegisteredBy(param));\n\t\tthis.formGroup.controls['endorsedBy'].valueChanges.subscribe(param => this.searchFromEndorsedBy(param));\n\n\t\tthis.changeDetector.detectChanges();\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts","module.exports = \"<a class=\\\"search-link\\\" (click)=\\\"toggle()\\\">\\n  <h4>{{searchTitle}} <i style=\\\"margin-left:2px;color: white; font-size: 16px;\\\" class=\\\"{{toggleClass}}\\\" aria-hidden=\\\"true\\\"></i></h4>\\n</a>\\n<div class=\\\"mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\" *ngIf=\\\"!isCollapsed && !isLoading && formGroup\\\">\\n  <form [formGroup]=\\\"formGroup\\\">\\n    <div *ngIf=\\\"showKeywords\\\" class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\">\\n          <label class=\\\"mc-form-label\\\">Keywords\\n            <div class=\\\"input-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control mc-form-control\\\" formControlName=\\\"keywords\\\">\\n              <span class=\\\"mc-form-control-input-group-btn input-group-btn\\\">\\n                <mc-loading-button [type]=\\\"'submit'\\\" [class]=\\\"'btn btn-primary search-button'\\\" [isLoading]=\\\"isSearching\\\" [title]=\\\"'Search'\\\" [onClick]=\\\"onSearchFunction\\\" ></mc-loading-button>\\n              </span>\\n            </div>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Registered by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"registeredBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizations\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"showEndorsement && endorsementMainSwitch\\\" class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Endorsed by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"endorsedBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizationsForEndorsement\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<div *ngIf=\\\"!isCollapsed\\\">\\n  <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module chunks = 0 1 2 3 4","module.exports = \".mc-form-label {\\n  width: 100%; }\\n\\n.mc-form-control {\\n  margin-top: 5px; }\\n\\n.mc-form-control:read-only {\\n  cursor: not-allowed;\\n  color: rgba(255, 255, 255, 0.7); }\\n\\n.mc-form-control-success {\\n  border: 1px solid #8bd22f !important; }\\n  .mc-form-control-success:focus {\\n    border: 1px solid #aee06d !important; }\\n\\n.mc-form-control-error {\\n  border: 1px solid #f95372 !important; }\\n  .mc-form-control-error:focus {\\n    border: 1px solid #fb879c !important; }\\n\\n.mc-form-group {\\n  max-width: 450px;\\n  margin-bottom: 0.5rem !important; }\\n\\n.mc-form-control-feedback {\\n  top: 20px !important;\\n  right: 10px !important; }\\n\\n.mc-form-control-select:read-only {\\n  cursor: default !important;\\n  color: #ffffff !important; }\\n\\n.search-link {\\n  cursor: pointer;\\n  color: #ffffff; }\\n  .search-link:hover {\\n    transform: none;\\n    color: #ffffff; }\\n\\n.mc-form-control-input-group-btn {\\n  padding-top: 5px; }\\n\\n.search-button {\\n  border-bottom-left-radius: 0 !important;\\n  border-top-left-radius: 0 !important; }\\n  .search-button:hover {\\n    transform: none; }\\n\\n.input-group {\\n  margin-bottom: 0px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module chunks = 0 1 2 3 4","import {Component, Input, OnChanges, ViewEncapsulation} from '@angular/core';\nimport {TableCell, TableHeader, TableRow} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {InstancesService} from \"../../../../backend-api/service-registry/services/instances.service\";\nimport {BugReportingService} from \"../../../../backend-api/identity-registry/services/bug-reporting.service\";\nimport {BugReport} from \"../../../../backend-api/identity-registry/autogen/model/BugReport\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'services-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./services-table.html'),\n  styles: []\n})\nexport class ServicesTableComponent implements OnChanges {\n  @Input() services: Array<Service>;\n  @Input() isLoading: boolean;\n\tpublic onRowClick: Function;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private navigationHelperService:NavigationHelperService, private orgsService:OrganizationsService, private notifications: MCNotificationsService, private instancesService: InstancesService, private bugService: BugReportingService) {\n  }\n  ngOnInit() {\n\t  this.onRowClick = this.gotoService.bind(this);\n  }\n  ngOnChanges() {\n    if (this.services) {\n\t    this.loadMyOrganization();\n    }\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgsService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.generateHeadersAndRows(organization.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private generateHeadersAndRows(orgMrn:string) {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    for (let service of this.services) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:service.name, class:'', truncateNumber:250};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:service.instanceVersion, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, orgMrn);\n\t    cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate gotoService(index:number) {\n  \tlet mrn = this.services[index].mrn;\n  \tlet version = this.services[index].instanceVersion;\n  \tthis.isLoading = true;\n\t\tthis.instancesService.getInstance(mrn, version).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t// when using the portal only to register instances, this should never happen. However, if someone uses the SR api only then there might be something missing. We log it for further investigation\n\t\t\t\t\tlet bugReport:BugReport = {subject:\"Missing instance\", description:\"There is a service in the IR that doesn't exist in the SR.\\n\\n MRN: \" + mrn + \",\\nVersion: \" + version};\n\t\t\t\t\tthis.bugService.reportBug(bugReport)\n\t\t\t\t}\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\n\t\t\t},\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/services-table/services-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/services-table/services-table.html\n// module id = ./src/app/pages/shared/components/services-table/services-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'specifications-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specifications-table.html'),\n  styles: []\n})\nexport class SpecificationsTableComponent implements OnChanges {\n  @Input() specifications: Array<Specification>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.specifications) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Status', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let specification of this.specifications) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, specification.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t  this.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t  organizationName => {\n\t\t\t  tableCell.valueHtml = organizationName;\n\t\t  },\n\t\t  err => {\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3 4","import {Injectable, OnInit} from '@angular/core';\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\n\n@Injectable()\nexport class OrganizationViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (organization) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\n\t    labelValues.push({label: 'Name', valueHtml: organization.name});\n      labelValues.push({label: 'Address', valueHtml: organization.address});\n      labelValues.push({label: 'Country', valueHtml: organization.country});\n      if (organization.email) {\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\n      }\n      if (organization.url) {\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\n      }\n    }\n    return labelValues;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\nimport {NgaModule} from \"../../theme/nga.module\";\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceDetailsViewComponent} from \"./components/service-details-view/service-details-view.component\";\nimport {CertificateRevokeComponent} from \"./components/certificate-revoke/certificate-revoke.component\";\nimport {ServiceRegistrySearchComponent} from \"./components/service-registry-search/service-registry-search.component\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {SrSearchRequestsService} from \"../org-service-registry/shared/services/sr-search-requests.service\";\nimport {EndorsedByListComponent} from \"./components/endorsed-by-list/endorsed-by-list.component\";\nimport {ServicesTableComponent} from \"./components/services-table/services-table.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n\t  ReactiveFormsModule\n  ],\n  declarations: [\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    OrganizationDetailsTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent\n  ],\n  exports: [\n    OrganizationDetailsTableComponent,\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent,\n  ],\n  providers: [\n    SrViewModelService,\n    CertificateHelperService,\n    OrganizationViewModelService,\n\t  SrSearchRequestsService\n  ]\n})\nexport class SharedModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts"],"mappingsnrtnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtpjplhhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvhpkvjrBA;;;;;;;;;;AAUA;;AA0CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AC1DA;;;;;;;;;;AAUA;;AAgEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;;AChFA;AACA;AACA;AAOA;AAAA;AA6CA;AA1CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7CA;;;;;;;;;;ACTA;AAQA;AAEA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAbA;AAAA;;AAAA;AAcA;AAAA;AAbA;;;;;;;;;;ACRA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;;AAAA;AAyDA;AAAA;AAxDA;;;;;;;;;;ACTA;AACA;AACA;AAKA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AA5DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwDA;;AAAA;AAvDA;;;;;;;;AChBA;;;;;;;;;ACAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AArEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkEA;;AAAA;AAjEA;;;;;;;;AChBA;;;;;;;;;ACAA;AAMA;AAEA;AACA;AAPA;AAAA;AACA;AACA;AACA;;AAAA;AAKA;AAAA;AAJA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;ACtBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACzBA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAQA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAiGA;;AAAA;AAhGA;;;;;;;;ACxBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAWA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8FA;;AAAA;AA7FA;;;;;;;;ACvBA;;;;;;;;;ACAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AASA;AASA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3BA;AADA;AAAA;;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnIA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsIA;;AAAA;AArIA;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;;;ACAA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACZA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAxEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4EA;;AAAA;AA3EA;;;;;;;;ACfA;;;;;;;;;ACAA;AAGA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAlFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqFA;;AAAA;AApFA;;;;;;;;ACbA;;;;;;;;;ACAA;AASA;AACA;AACA;AACA;AACA;AAWA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6DA;;AAAA;AA5DA;;;;;;;;ACxBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjpKA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuKA;;AAAA;AAtKA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA/JA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkKA;;AAAA;AAjKA;;;;;;;;ACrBA;;;;;;;ACAA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA1FA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6FA;;AAAA;AA5FA;;;;;;;;AChBA;;;;;;;;;ACAA;AAIA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACbA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AAyBA;AAAA;AAxBA;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;AAAA;AACA;AAxCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;","sourceRoot":""}