{"version":3,"file":"4.31badbec5da4ba6d5039.chunk.js","sources":["webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts?e7eb***","webpack:///./src/app/backend-api/identity-registry/autogen/model/Service.ts?20ea***","webpack:///./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts?73cd***","webpack:///./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts?51f0***","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts?f923***","webpack:///./src/app/pages/organizations/components/my-organization-update/my-organization-update.component.ts","webpack:///./src/app/pages/organizations/components/my-organization-update/my-organization-update.html","webpack:///./src/app/pages/organizations/components/my-organization/my-organization.component.ts","webpack:///./src/app/pages/organizations/components/my-organization/my-organization.html","webpack:///./src/app/pages/organizations/components/my-organization/my-organization.module.ts","webpack:///./src/app/pages/organizations/components/my-organization/my-organization.routing.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts?34e7***","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html?9ab8***","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts?4ec2***","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html?6ce5***","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts?7f64***","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html?947c***","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss?89ae***","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts?c517***","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html?4ed3***","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts?2512***","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html?a249***","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts?af65***","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html?c375***","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts?2a4e***","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html?0ef1***","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.component.ts?ff71***","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.html?e0c6***","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts?c1a4***","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.html?4ed3***","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.scss?370b***","webpack:///./src/app/pages/shared/components/services-table/services-table.component.ts?dc51***","webpack:///./src/app/pages/shared/components/services-table/services-table.html?441e***","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts?6ac4***","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html?334b***","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts?5d8c***","webpack:///./src/app/pages/shared/shared.module.ts?42d6***"],"sourcesContent":["/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Organization {\n    address: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    country: string;\n\n    createdAt?: Date;\n\n    email: string;\n\n    /**\n     * Type of identity federation used by organization\n     */\n    federationType?: Organization.FederationTypeEnum;\n\n    id?: number;\n\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    /**\n     * The name of the organization\n     */\n    name: string;\n\n    updatedAt?: Date;\n\n    url: string;\n\n}\nexport namespace Organization {\n    export enum FederationTypeEnum {\n        TestIdp = <any> 'test-idp',\n        OwnIdp = <any> 'own-idp',\n        ExternalIdp = <any> 'external-idp'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Service {\n    /**\n     * The domain name the service will be available on. Used in the issued certificates for the service.\n     */\n    certDomainName?: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    createdAt?: Date;\n\n    id?: number;\n\n    /**\n     * The version of this service instance.\n     */\n    instanceVersion: string;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    name: string;\n\n    /**\n     * Access type of the OpenId Connect client\n     */\n    oidcAccessType?: Service.OidcAccessTypeEnum;\n\n    /**\n     * The client id of the service in MCP. Will be generated.\n     */\n    oidcClientId?: string;\n\n    /**\n     * The client secret of the service in MCP. Will be generated.\n     */\n    oidcClientSecret?: string;\n\n    /**\n     * The OpenId Connect redirect uri of service.\n     */\n    oidcRedirectUri?: string;\n\n    /**\n     * Permissions as assigned from the organization\n     */\n    permissions?: string;\n\n    updatedAt?: Date;\n\n    /**\n     * The vessel that is linked to this service.\n     */\n    vessel?: models.Vessel;\n\n}\nexport namespace Service {\n    export enum OidcAccessTypeEnum {\n        Public = <any> 'public',\n        BearerOnly = <any> 'bearer-only',\n        Confidential = <any> 'confidential'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Service.ts","import {EnumsHelper} from \"../../../../shared/enums-helper\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\n\nexport interface OidcAccessTypeViewModel {\n\tvalue?:string;\n\tlabel?:string;\n}\n\nexport class ServiceViewModel {\n\n\n\tpublic static getAllOidcAccessTypes(): Array<OidcAccessTypeViewModel> {\n\t\tlet models:Array<OidcAccessTypeViewModel> = [];\n\n\t\tlet keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);\n\t\tkeysAndValues.forEach(enumKeyAndValue => {\n\t\t\tlet model:OidcAccessTypeViewModel = {};\n\t\t\tmodel.value = enumKeyAndValue.value;\n\t\t\tmodel.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);\n\t\t\tmodels.push(model);\n\t\t});\n\t\treturn models;\n\t}\n\n\n\tpublic static getLabelForEnum(oidcAccessTypeEnum:OidcAccessTypeEnum):string {\n\t\tif (!oidcAccessTypeEnum) {\n\t\t\treturn '';\n\t\t}\n\t\tvar text = '';\n\t\tswitch (oidcAccessTypeEnum) {\n\t\t\tcase OidcAccessTypeEnum.BearerOnly: {\n\t\t\t\ttext = 'Bearer only';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Confidential: {\n\t\t\t\ttext = 'Confidential';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Public: {\n\t\t\t\ttext = 'Public';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault : {\n\t\t\t\ttext = OidcAccessTypeEnum[oidcAccessTypeEnum];\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = ''+ oidcAccessTypeEnum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {ServiceRegistrySearchRequest} from \"../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\n\n@Injectable()\nexport class SrSearchRequestsService {\n\tprivate searchRequests: { [key: string]: ServiceRegistrySearchRequest } = {};\n  constructor() {\n  }\n\n  // Returns null if none found\n  public getSearchRequest(key:string) : ServiceRegistrySearchRequest {\n  \treturn this.searchRequests[key];\n\t}\n\n\tpublic addSearchRequest(key:string, searchRequest:ServiceRegistrySearchRequest) {\n  \tthis.searchRequests[key] = searchRequest;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\nimport {isNullOrUndefined} from \"util\";\n\n@Injectable()\nexport class SrViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  public generateLabelValuesForSpecification(specification:Specification, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (specification) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: specification.specificationId});\n      labelValues.push({label: 'Name', valueHtml: specification.name});\n      labelValues.push({label: 'Version', valueHtml: specification.version});\n\t    labelValues.push({label: 'Status', valueHtml: specification.status});\n\t\t  labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: specification.description});\n    }\n    return labelValues\n  }\n\n  public generateLabelValuesForDesign(design:Design, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (design) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: design.designId});\n      labelValues.push({label: 'Name', valueHtml: design.name});\n      labelValues.push({label: 'Version', valueHtml: design.version});\n      labelValues.push({label: 'Status', valueHtml: design.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: design.description});\n    }\n    return labelValues;\n  }\n\n  public generateLabelValuesForInstance(instance:Instance, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (instance) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: instance.instanceId});\n      labelValues.push({label: 'Name', valueHtml: instance.name});\n      labelValues.push({label: 'Version', valueHtml: instance.version});\n      labelValues.push({label: 'Status', valueHtml: instance.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: instance.description});\n\t    labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\n\n\t    if (!isNullOrUndefined(instance.compliant)) {\n\t    \tlet compliantClass =  instance.compliant ? '' : 'label-danger';\n\t\t    labelValues.push({label: 'Compliant', valueHtml: McUtils.getYesNoString(instance.compliant), linkClass: compliantClass});\n\t    }\n    }\n    return labelValues;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {McFormControlModel, McFormControlType} from \"../../../../theme/components/mcForm/mcFormControlModel\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\nimport {UrlValidator} from \"../../../../theme/validators/url.validator\";\n\n\n@Component({\n  selector: 'organization-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./my-organization-update.html'),\n  styles: []\n})\nexport class MyOrganizationUpdateComponent implements OnInit {\n\tpublic organization: Organization;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update organization\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadOrganization();\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.takeMeHome();\n\t}\n\n\tpublic update() {\n\t\tthis.isUpdating = true;\n\t\tthis.organization.name = this.updateForm.value.name;\n\t\tthis.organization.address = this.updateForm.value.address;\n\t\tthis.organization.country = this.updateForm.value.country;\n\t\tthis.organization.email = this.updateForm.value.emails.email;\n\t\tthis.organization.url = this.updateForm.value.url;\n\n\t\tthis.updateOrganization(this.organization);\n\t}\n\n\tprivate updateOrganization(organization:Organization) {\n\t\tthis.orgService.updateOrganization(organization).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.takeMeHome();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadOrganization() {\n\t\tthis.isLoading = true;\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the organization', MCNotificationType.Error, err);\n\n\t\t\t\tthis.navigationService.takeMeHome();\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.organization.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Organization name', placeholder: 'Name is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.organization.name, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'address', controlType: McFormControlType.Text, labelName: 'Address', placeholder: 'Address is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.organization.address, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'country', controlType: McFormControlType.Text, labelName: 'Country', placeholder: 'Country is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.organization.country, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tMcUtils.generateEmailConfirmGroup(this.formBuilder, this.updateForm, this.formControlModels, this.organization.email);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'url', controlType: McFormControlType.Text, labelName: 'URL to homepage', placeholder: 'URL is required', validator:Validators.compose([Validators.required, UrlValidator.validate]), errorText:'Url not valid. E.g. http://www.maritimecp.net'};\n\t\tformControl = new FormControl(this.organization.url, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/my-organization-update/my-organization-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Organization - {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/organizations/components/my-organization-update/my-organization-update.html\n// module id = ./src/app/pages/organizations/components/my-organization-update/my-organization-update.html\n// module chunks = 4","import { ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { OrganizationsService } from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { CertificateEntityType } from \"../../../shared/services/certificate-helper.service\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { ActingService } from '../../../../shared/acting.service';\n\n@Component({\n  selector: 'my-organization',\n  encapsulation: ViewEncapsulation.None,\n  styles: [],\n  template: require('./my-organization.html')\n})\nexport class MyOrganization implements OnInit {\n  private organization: Organization;\n  public isLoading = true;\n  public entityType: CertificateEntityType;\n  public certificateTitle: string;\n  public titleName:string;\n  public showModal: boolean = false;\n  public modalDescription: string;\n\n\n  constructor(private actingService: ActingService, private changeDetector: ChangeDetectorRef, private notifications: MCNotificationsService, private orgService: OrganizationsService, private authService: AuthService, private navigationHelper: NavigationHelperService) {\n    this.entityType = CertificateEntityType.Organization;\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadOrganization();\n  }\n\n  private loadOrganization() {\n      this.orgService.getMyOrganization().subscribe(\n          organization => {\n              this.organization = organization;\n              this.titleName = organization.name;\n              this.certificateTitle = organization.name;\n          },\n          err => {\n              this.isLoading = false;\n              this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n          }\n      );\n  }\n\n  private reset() {\n      this.organization = null;\n      this.isLoading = true;\n      this.certificateTitle = null;\n      this.titleName = null;\n      this.showModal = false;\n      this.modalDescription = null;\n      this.loadOrganization();\n  }\n\n\n\tngOnDestroy() {\n\t\tthis.changeDetector.detach();\n\t}\n\n  public logoLoaded() {\n\t  this.isLoading = false;\n\t  this.changeDetector.detectChanges();\n  }\n\n\tprivate shouldDisplayUpdate() :boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n\n\tpublic shouldDisplayStopActing(): boolean {\n      return this.authService.authState.acting;\n    }\n\n\tpublic isOrgAdmin(): boolean {\n        return this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n    }\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateMyOrg();\n\t}\n\n\tpublic stopActing() {\n      this.modalDescription = 'Are you sure you want to stop acting on behalf of ' + this.organization.name + '?';\n      this.showModal = true;\n    }\n\n    public stopActingForSure() {\n      this.actingService.stopActing();\n      this.reset();\n    }\n\n    public cancelModal() {\n      this.showModal = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/my-organization/my-organization.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{titleName}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <organization-details-table (onLogoLoaded)=\\\"logoLoaded()\\\" [isLoading]=\\\"isLoading\\\" [organization]=\\\"organization\\\"></organization-details-table>\\n      <ul *ngIf=\\\"!isLoading && shouldDisplayUpdate()\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"shouldDisplayUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Organization</button>\\n        </li>\\n        <li *ngIf=\\\"shouldDisplayStopActing()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"stopActing()\\\">Stop Acting</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"!isLoading && organization\\\">\\n      <ba-card title=\\\"Certificates for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <certificates-table [isAdmin]=\\\"isOrgAdmin()\\\" [entityMrn]=\\\"organization.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"certificateTitle\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"organization.certificates\\\"></certificates-table>\\n      </ba-card>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"stopActingForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Stop Acting'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Stop Acting'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/organizations/components/my-organization/my-organization.html\n// module id = ./src/app/pages/organizations/components/my-organization/my-organization.html\n// module chunks = 4","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {routing} from \"./my-organization.routing\";\nimport {NgaModule} from \"../../../../theme/nga.module\";\nimport {SharedModule} from \"../../../shared/shared.module\";\nimport {MyOrganization} from \"./my-organization.component\";\nimport {MyOrganizationUpdateComponent} from \"../my-organization-update/my-organization-update.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgaModule,\n    routing\n  ],\n  declarations: [\n    MyOrganization,\n\t  MyOrganizationUpdateComponent\n  ]\n})\nexport default class MyOrganizationModule {}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/my-organization/my-organization.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {MyOrganization} from \"./my-organization.component\";\nimport {CertificateIssueNewComponent} from \"../../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {MyOrganizationUpdateComponent} from \"../my-organization-update/my-organization-update.component\";\nimport {CertificateRevokeComponent} from \"../../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: '',\n    component: MyOrganization,\n    data:{breadcrumb: 'My Organization'},\n    children: [\n    ]\n  },\n  {\n    path: 'issuecert',\n    component: CertificateIssueNewComponent,\n    data:{breadcrumb: 'New Certificate'},\n    children: [\n    ]\n  },\n\t{\n\t\tpath: 'revokecert',\n\t\tcomponent: CertificateRevokeComponent,\n\t\tdata:{breadcrumb: 'Revoke Certificate'},\n\t\tchildren: [\n\t\t]\n\t},\n\t{\n\t\tpath: 'update',\n\t\tcomponent: MyOrganizationUpdateComponent,\n\t\tdata:{breadcrumb: 'Update'}\n\t}\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/organizations/components/my-organization/my-organization.routing.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\nimport {CertificateBundle} from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\nimport {TOKEN_DELIMITER} from \"../../../../shared/app.constants\";\n\n\n@Component({\n  selector: 'certificate-issue-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-issue-new.html'),\n  styles: []\n})\nexport class CertificateIssueNewComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n  public entityTitle: string;\n  public isLoading: boolean;\n  public certificate: CertificateBundle;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = false;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n    this.generateLabelValues();\n  }\n\n  public zipAndDownload() {\n    this.fileHelper.downloadPemCertificate(this.certificate, this.entityTitle);\n  }\n\n  public issueNew() {\n    this.isLoading = true;\n    this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(\n      certificateBundle => {\n        this.certificate = certificateBundle;\n        this.isLoading = false;\n      },\n      err => {\n        this.isLoading = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn.split(TOKEN_DELIMITER)[0]});\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !certificate && !isLoading\\\">\\n        <h5>Issuing a new certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n\\n      <!-- After issue and success -->\\n      <div *ngIf=\\\"certificate\\\">\\n        Certificate issued with success\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, McFormControlModelDatepicker, SelectModel\n} from \"../../../../theme/components/mcForm/mcFormControlModel\";\nimport {SelectValidator} from \"../../../../theme/validators/select.validator\";\nimport {CertificateRevocation} from \"../../../../backend-api/identity-registry/autogen/model/CertificateRevocation\";\nimport RevokationReasonEnum = CertificateRevocation.RevokationReasonEnum;\n\n\n@Component({\n  selector: 'certificate-revoke',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-revoke.html'),\n  styles: []\n})\nexport class CertificateRevokeComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n\tpublic entityTitle: string;\n\tpublic certificateId: string;\n  public isLoading: boolean;\n  \n\tpublic isRevoking = false;\n\tpublic revokeTitle = \"Revoke\";\n\tpublic revokeForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private certificateHelper:CertificateHelperService, private formBuilder: FormBuilder, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n\t  let entityTitle = this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n\t  let certificateId = this.route.snapshot.queryParams[queryKeys.CERT_ID];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to revoke certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n\t  this.certificateId = certificateId;\n    this.generateLabelValues();\n    this.generateForm();\n\n\t  this.isLoading = false;\n  }\n\n  public revoke() {\n    this.isRevoking = true;\n    let revokeDate:Date = this.revokeForm.value.revokedAt;\n\t  let tempRevocationReason = this.revokeForm.value.revocationReason;\n\t  var revocationReason:RevokationReasonEnum = null;\n\t  if (tempRevocationReason && tempRevocationReason.toLowerCase().indexOf('undefined') < 0) {\n\t\t  revocationReason = tempRevocationReason;\n\t  }\n    let certificateRevocation:CertificateRevocation = {revokationReason:revocationReason, revokedAt:revokeDate.getTime()+''}\n    this.certificateService.revokeCertificate(this.entityType, this.entityMrn, this.certificateId, certificateRevocation).subscribe(\n      _ => {\n        this.isRevoking = false;\n        this.navigationHelper.cancelNavigateCertificates();\n      },\n      err => {\n        this.isRevoking = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to revoke certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\n  }\n  \n\tprivate generateForm() {\n\t\tthis.revokeForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tlet selectValues = this.selectValues();\n\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.revokeForm, elementId: 'revocationReason', controlType: McFormControlType.Select, labelName: '', placeholder: '', validator:SelectValidator.validate, showCheckmark:false};\n\t\tvar formControl = new FormControl('', formControlModelSelect.validator);\n\t\tthis.revokeForm.addControl(formControlModelSelect.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\tlet formControlModel:McFormControlModelDatepicker = {minDate:new Date(), formGroup: this.revokeForm, elementId: 'revokedAt', controlType: McFormControlType.Datepicker, labelName: '', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.revokeForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose reason...', isSelected: true});\n\t\tlet allrevokeTypes = this.certificateHelper.getAllRevocationTypes();\n\t\tallrevokeTypes.forEach(revokeType => {\n\t\t\tselectValues.push({value:revokeType.value, label:revokeType.label, isSelected: false});\n\t\t});\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Revoke certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !isLoading\\\">\\n        <h5>Revoking certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <br>\\n        <h5>\\n          Please choose a reason and date for revocation.\\n        </h5>\\n        <mc-form [formGroup]=\\\"revokeForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRevoking\\\" [registerTitle]=\\\"revokeTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"revoke()\\\"></mc-form>\\n      </div>\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module id = ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module chunks = 0 1 2 3 4","import { Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { Certificate } from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\nimport {\n    CertificateEntityType,\n    CertificateHelperService\n} from \"../../services/certificate-helper.service\";\nimport { DATE_FORMAT } from \"../../../../theme/theme.constants\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { CertificateViewModel } from \"../../view-models/CertificateViewModel\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { MCNotificationsService } from \"../../../../shared/mc-notifications.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { PemCertificate } from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {\n    TableActionButton,\n    TableCell,\n    TableCellActionButtons,\n    TableHeader,\n    TableRow\n} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport { DatePipe } from \"@angular/common\";\nimport { CertificateBundle } from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\n\n@Component({\n  selector: 'certificates-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificates-table.html'),\n  styles: [require('./certificates-table.scss')]\n})\nexport class CertificatesTableComponent implements OnChanges{\n  @Input() certificates: Array<Certificate>;\n  @Input() certificateEntityType: CertificateEntityType;\n  @Input() entityMrn: string;\n  @Input() isLoading: boolean;\n  @Input() certificateTitle: string;\n  @Input() isAdmin: boolean;\n\n\tpublic tableHeaders: Array<TableHeader>;\n\tpublic tableRows: Array<TableRow>;\n  public newCertificateTitle = \"Issue new Certificate\";\n  public certificateViewModels: Array<CertificateViewModel>;\n  public tableClass:string;\n  public onIssueCertificate: Function;\n\n\tpublic onDownload:Function;\n\n  constructor(private datePipe: DatePipe, private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\n    this.onIssueCertificate = this.issueCertificate.bind(this);\n  }\n\n\tngOnInit() {\n\t\tif (!this.authService.authState.rolesLoaded) {\n\t\t\tthis.authService.rolesLoaded.subscribe((mode)=> {\n\t\t\t\tthis.generateHeadersAndRows();\n\t\t\t});\n\t\t}\n\t}\n\n  ngOnChanges() {\n    if (this.certificates) {\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\n      this.sortCertificates();\n\t    this.generateHeadersAndRows();\n    }\n  }\n\tprivate generateHeadersAndRows() {\n\t\tvar tableHeaders: Array<TableHeader> = [];\n\t\tvar tableRows: Array<TableRow> = [];\n\n\t\tvar tableHeader: TableHeader = {title:'Certificate', class:''};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid from', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid to', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'', class:'table-buttons'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\tfor (let certificate of this.certificateViewModels) {\n\t\t\tvar cells:Array<TableCell> = [];\n\n\t\t\tvar tableCell: TableCell = {valueHtml:'Certificate for ' + this.certificateTitle, class:'', truncateNumber:50};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.start, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.end, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\tif (certificate.revoked) {\n\t\t\t\ttableCell = {valueHtml:'Revoked (' + certificate.revokeReasonText + ')', class:'red-text', truncateNumber:50};\n\t\t\t\tcells.push(tableCell);\n\t\t\t} else {\n\t\t\t\tlet actionButtons:Array<TableActionButton> = [];\n\t\t\t\tlet actionButton:TableActionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick:() => {this.download(certificate)}};\n\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\tif (this.isAdmin) {\n\t\t\t\t\tactionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Revoke certificate', onClick:() => {this.revoke(certificate)}};\n\t\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\t}\n\t\t\t\tlet tableCellActionButtons: TableCellActionButtons = {valueHtml:'', class:'table-buttons', truncateNumber:0, actionButtons:actionButtons};\n\t\t\t\tcells.push(tableCellActionButtons);\n\t\t\t}\n\n\t\t\tlet tableRow: TableRow = {cells: cells};\n\t\t\ttableRows.push(tableRow);\n\t\t}\n\n\t\tthis.tableHeaders = tableHeaders;\n\t\tthis.tableRows = tableRows;\n\t}\n  private sortCertificates() {\n    // We are sorting with longest due date on top\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\n      var obj1Time:number;\n      var obj2Time:number;\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\n      if (typeof obj1.end === \"Date\") {\n        obj1Time = obj1.end.getTime();\n      } else {\n        obj1Time = obj1.end;\n      }\n      if (typeof obj2.end === \"Date\") {\n        obj2Time = obj2.end.getTime();\n      } else {\n        obj2Time = obj2.end;\n      }\n\n      if (obj1.revoked && obj2.revoked) {\n        return obj2Time - obj1Time;\n      }\n      if (obj1.revoked) {\n        return 1;\n      }\n      if (obj2.revoked) {\n        return -1;\n      }\n      return obj2Time - obj1Time;\n    });\n  }\n\n  public issueCertificate() {\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\n  }\n\n  public revoke(certificate:Certificate) {\n  \tthis.navigationHelper.navigateToRevokeCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle, certificate.serialNumber);\n  }\n\n  public download(certificate:Certificate) {\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\n    let certBundle:CertificateBundle = {pemCertificate:pemCertificate};\n    this.fileHelper.downloadPemCertificate(certBundle, this.certificateTitle);\n  }\n\n  public canCreate(): boolean {\n      return this.isAdmin;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\"></mc-table>\\n<div *ngIf=\\\"!isLoading\\\">\\n  <mc-create-button [isAdmin]=\\\"canCreate()\\\" [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3 4","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'designs-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./designs-table.html'),\n  styles: []\n})\nexport class DesignsTableComponent implements OnChanges {\n  @Input() designs: Array<Design>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.designs) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let design of this.designs) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, design.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input} from '@angular/core';\nimport {EntityImageModel} from \"../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {Observable} from \"rxjs\";\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport {Endorsement} from \"../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'endorsed-by-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./endorsed-by-list.html'),\n  styles: []\n})\nexport class EndorsedByListComponent {\n\t@Input() endorsements:Array<Endorsement>;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\tprivate cardTitle:string;\n\n\tprivate oldEndorsements:Array<Endorsement>;\n\tpublic entityImageList: Array<EntityImageModel>;\n\n  constructor(private logoService: LogoService, private authService: AuthService, private orgService:OrganizationsService, private navigationHelper:NavigationHelperService) {\n  }\n\n  ngOnInit() {\n  \tthis.cardTitle = this.title;\n\t  this.generateEntityImageList();\n  }\n\n\tngOnChanges() {\n\t\tthis.cardTitle = this.title;\n\t\tthis.generateEntityImageList();\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (this.isMyOrg(entityModel.entityId)) {\n\t\t\tthis.navigationHelper.takeMeHome();\n\t\t} else {\n\t\t\tthis.navigationHelper.navigateToOrganizationDetails(entityModel.entityId)\n\t\t}\n\t}\n\n\tprivate isMyOrg(orgMrn) {\n\t\treturn this.authService.authState.orgMrn === orgMrn;\n\t}\n\n  private generateEntityImageList() {\n  \tif (this.endorsements) {\n  \t\tif (this.endorsements !== this.oldEndorsements) { // Check to see if the endorsements is the same as last time we generated the list, because no need to do all this load again if not needed\n\t\t\t\tthis.oldEndorsements = this.endorsements;\n\t\t\t  this.entityImageList = [];\n\t\t\t  this.endorsements.forEach(endorsement => {\n\t\t\t\t\t\tlet entityImage:EntityImageModel = {imageSourceObservable:this.createImgObservable(endorsement.orgMrn), entityId:endorsement.orgMrn, title:endorsement.orgName};\n\n\t\t\t\t    this.entityImageList.push(entityImage);\n\t\t\t\t  }\n\t\t\t  );\n\t\t  }\n\t  }\n  }\n\n  private createImgObservable(orgMrn:string):Observable<string> {\n\t  let imageSrc = 'assets/img/no_organization.png';\n\t  return Observable.create(observer => {\n\t\t  this.logoService.getLogoForOrganization(orgMrn).subscribe(\n\t\t\t  logo => {\n\t\t\t\t  observer.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  observer.next(imageSrc);\n\t\t\t  }\n\t\t  );\n\t  });\n  }\n\n\tprivate setRealOrganizationName(entityImage:EntityImageModel, organizationMrn:string) {\n\t\tthis.orgService.getOrganizationName(organizationMrn).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tentityImage.title = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// Do nothing. We already have a name set, which should be correct 99% of the time\n\t\t\t}\n\t\t);\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [noDataText]=\\\"'None'\\\" [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module id = ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\n\n@Component({\n  selector: 'instances-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instances-table.html'),\n  styles: []\n})\nexport class InstancesTableComponent implements OnChanges {\n  @Input() instances: Array<Instance>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.instances) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Compliant', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Service endpoint', class:''};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Description', class:''};\n\t  tableHeaders.push(tableHeader);\n\n    for (let instance of this.instances) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:45};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    let compliantClass = instance.compliant ? '' : 'label-danger';\n\t    tableCell = {valueHtml:McUtils.getYesNoString(instance.compliant), class:'nowrap ' + compliantClass, truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:25};\n\t    this.setOrganizationCell(tableCell, instance.organizationId);\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.endpointUri, class:'list-endpoint', truncateNumber:60};\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.description, class:'table-description-short', truncateNumber:150};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3 4","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationViewModelService } from \"../../services/organization-view-model.service\";\nimport { LogoService } from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'organization-details-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-details-table.html'),\n  styles: []\n})\nexport class OrganizationDetailsTableComponent implements OnChanges {\n  private labelValues:Array<LabelValueModel>;\n\t@Input() displayLogo:boolean = true;\n  @Input() isLoading:boolean;\n\t@Input() organization: Organization;\n\t@Output() onLogoLoaded: EventEmitter<any> = new EventEmitter<any>();\n\tpublic logo:string;\n\tpublic canChangeLogo:boolean;\n\tpublic isLoadingOrgAndLogo:boolean = true;\n\tpublic uploadingLogo:boolean = false;\n  constructor(private authService:AuthService, private logoService: LogoService, private orgViewModelService: OrganizationViewModelService, private notifications:MCNotificationsService) {\n  }\n  ngOnChanges() {\n    if (this.organization) {\n\t    this.canChangeLogo = this.canChangeTheLogo();\n\t    this.loadLogo();\n    }\n  }\n\n  public uploadLogo(logo:any) {\n\t  let oldLogo = this.logo;\n\t  this.uploadingLogo = true;\n\t  this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(\n\t\t  logo => {\n\t\t\t  this.loadLogo();\n\t\t  },\n\t\t  err => {\n\t\t\t  this.logo = oldLogo;\n\t\t\t  this.uploadingLogo = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to upload logo', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n\n  private setLabelValues() {\n\t  this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\n\t  this.isLoadingOrgAndLogo = false;\n  }\n\n\tprivate loadLogo(){\n\t\tthis.logoService.getLogoForOrganization(this.organization.mrn).subscribe(\n\t\t\tlogo => {\n\t\t\t\tthis.logo = URL.createObjectURL(new Blob([logo]));\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (this.canChangeTheLogo()) {\n\t\t\t\t\tthis.logo = 'assets/img/no_organization.png';\n\t\t\t\t}\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t}\n\t\t);\n\t}\n\tprivate canChangeTheLogo():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<div *ngIf=\\\"displayLogo && logo\\\" style=\\\"margin-bottom: 10px;\\\">\\n  <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"logo | sanitizeUrl\\\" *ngIf=\\\"logo && !canChangeLogo\\\">\\n  <mc-logo-uploader [logo]=\\\"logo\\\" [uploadingLogo]=\\\"uploadingLogo\\\" (onUpload)=\\\"uploadLogo($event)\\\" *ngIf=\\\"logo && canChangeLogo\\\"></mc-logo-uploader>\\n</div>\\n<mc-label-value-table [isLoading]=\\\"isLoadingOrgAndLogo\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3 4","import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Service } from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { CertificateEntityType } from \"../../services/certificate-helper.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { ServiceViewModel } from \"../../../org-identity-registry/services/view-models/ServiceViewModel\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { IdServicesService } from \"../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../shared/app.constants\";\nimport { InstancesService } from \"../../../../backend-api/service-registry/services/instances.service\";\n\n@Component({\n  selector: 'service-details-view',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details-view.html'),\n  styles: []\n})\nexport class ServiceDetailsViewComponent {\n\t@Input() service:Service;\n\t@Input() shouldShowDelete:boolean = true;\n\t@Input() shouldShowUpdate:boolean = true;\n\t@Input() shouldShowLinkToInstance:boolean = true;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\t@Output() deleteAction:EventEmitter<any> = new EventEmitter<any>();\n\t@Output() updateAction:EventEmitter<any> = new EventEmitter<any>();\n\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic entityType: CertificateEntityType;\n\tpublic entityMrn:string;\n\tpublic onGotoVessel: Function;\n\tpublic onGotoInstance: Function;\n\tprivate linkToInstance:boolean = false;\n\tpublic isLoadingInstance:boolean = false;\n\n\tconstructor(private fileHelperService:FileHelperService, private authService: AuthService, private servicesService: IdServicesService, private notifications:MCNotificationsService, private navigationHelperService: NavigationHelperService, private instancesService:InstancesService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isLoadingInstance = true;\n\t\tthis.entityType = CertificateEntityType.Service;\n\t\tthis.onGotoVessel = this.gotoVessel.bind(this);\n\t\tthis.onGotoInstance = this.gotoInstance.bind(this);\n\t}\n\n\tngOnChanges() {\n\t\tif (this.service) {\n\t\t\tthis.entityMrn = this.service.mrn + TOKEN_DELIMITER + this.service.instanceVersion;\n\t\t\tif (this.shouldShowLinkToInstance) {\n\t\t\t\tthis.loadInstance();\n\t\t\t} else {\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadInstance() {\n\t\tthis.instancesService.getInstance(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.linkToInstance = true;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.linkToInstance = false;\n\t\t\t\t\tthis.generateLabelValues();\n\t\t\t\t} else {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the Instance for the ID service', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic showDownload():boolean {\n\t\treturn this.service.oidcClientId && this.isAdmin();\n\t}\n\n\tpublic downloadXML() {\n\t\tthis.servicesService.getIdServiceJbossXml(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\txmlString => {\n\t\t\t\tthis.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the XML', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic downloadJSON() {\n\t\tthis.servicesService.getServiceKeycloakJson(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tjsonString => {\n\t\t\t\tthis.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the JSON', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.service) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.service.mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.service.name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.service.permissions});\n\t\t\tthis.labelValues.push({label: 'Certificate domain name', valueHtml: this.service.certDomainName});\n\t\t\tif (this.service.oidcRedirectUri) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri});\n\t\t\t}\n\t\t\tif (this.service.oidcClientId) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client ID', valueHtml: this.service.oidcClientId});\n\t\t\t}\n\t\t\tif (this.service.oidcClientSecret) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret});\n\t\t\t}\n\n\t\t\tif (this.service.oidcAccessType) {\n\t\t\t\tthis.labelValues.push({label: 'Access type', valueHtml: ServiceViewModel.getLabelForEnum(this.service.oidcAccessType)});\n\t\t\t}\n\n\t\t\tthis.generateLabelValueForVessel();\n\n\t\t\tthis.generateLabelValueForInstance();\n\t\t}\n\t}\n\n\tprivate generateLabelValueForVessel() {\n\t\tlet vessel = this.service.vessel;\n\t\tif (vessel) {\n\t\t\tlet label = 'Linked vessel';\n\t\t\tthis.labelValues.push({label: label, valueHtml: vessel.name, linkFunction: this.onGotoVessel, linkValue: [vessel.mrn]});\n\t\t}\n\t}\n\n\tprivate generateLabelValueForInstance() {\n\t\tif (this.shouldShowLinkToInstance && this.linkToInstance) {\n\t\t\tlet label = 'Linked Instance';\n\t\t\tthis.labelValues.push({label: label, valueHtml: this.service.name, linkFunction: this.onGotoInstance, linkValue: [this.service.mrn, this.service.instanceVersion]});\n\t\t}\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.shouldShowDelete && this.isAdmin() && this.service != null;\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.shouldShowUpdate && this.isAdmin() && this.service != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.deleteAction.emit('');\n\t}\n\n\tprivate update() {\n\t\tthis.updateAction.emit('');\n\t}\n\n\tprivate gotoInstance(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToOrgInstance(linkValue[0], linkValue[1]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\n\t\t}\n\t}\n\n\tprivate gotoVessel(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToVessel(linkValue[0]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to vessel', MCNotificationType.Error, error);\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","module.exports = \"<ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n  <mc-label-value-table [isLoading]=\\\"isLoading || isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n  <ul *ngIf=\\\"!isLoading && service && (showDownload() || showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXML()\\\">Download JBOSS XML</button>\\n    </li>\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadJSON()\\\">Download Keycloak JSON</button>\\n    </li>\\n    <li *ngIf=\\\"showUpdate()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update</button>\\n    </li>\\n    <li *ngIf=\\\"showDelete()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Service</button>\\n    </li>\\n  </ul>\\n</ba-card>\\n\\n<div *ngIf=\\\"service\\\">\\n  <ba-card title=\\\"Certificates for {{service.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n    <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"entityMrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"service.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"service.certificates\\\"></certificates-table>\\n  </ba-card>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module id = ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {ServiceRegistrySearchRequest} from \"./ServiceRegistrySearchRequest\";\nimport {FormGroup, FormBuilder, FormControl} from \"@angular/forms\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {SrSearchRequestsService} from \"../../../org-service-registry/shared/services/sr-search-requests.service\";\nimport {SHOW_ENDORSEMENTS} from \"../../../../shared/app.constants\";\n\ninterface SelectModel {\n\tlabel:string;\n\tvalue:string;\n}\n\n@Component({\n  selector: 'service-registry-search',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-registry-search.html'),\n\tstyles: [require('./service-registry-search.scss')]\n})\nexport class ServiceRegistrySearchComponent implements OnDestroy {\n\t@Input() searchTitle: string;\n\t@Input() searchKey: string;\n\t@Input() isSearching: boolean;\n\t@Input() preFilterMyOrg: boolean;\n\t@Input() showEndorsement: boolean;\n\t@Input() showKeywords: boolean = true;\n\t@Output() onSearch:EventEmitter<ServiceRegistrySearchRequest> = new EventEmitter<ServiceRegistrySearchRequest>();\n\tprivate endorsementMainSwitch = SHOW_ENDORSEMENTS;\n\n\tpublic isLoading: boolean;\n\tpublic formGroup: FormGroup;\n\tpublic selectValuesOrganizations:Array<SelectModel>;\n\tpublic selectValuesOrganizationsForEndorsement:Array<SelectModel>;\n\tpublic onSearchFunction: Function;\n\tpublic isCollapsed:boolean;\n\tpublic collapsedClass:string;\n\tpublic toggleClass:string;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private changeDetector: ChangeDetectorRef, private authService:AuthService, formBuilder:FormBuilder, private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  \tthis.formGroup = formBuilder.group({});\n  }\n\n\tngOnDestroy() {\n\t\tthis.changeDetector.detach();\n\t}\n\n\tngOnInit() {\n\t\tthis.onSearchFunction = this.search.bind(this);\n\t\tthis.isCollapsed = false;\n\t\tthis.setClass();\n  \tthis.isLoading = true;\n\t\tthis.generateForm();\n  \tthis.loadOrganizations();\n\t}\n\n\tpublic toggle() {\n\t\tthis.isCollapsed = !this.isCollapsed;\n\t\tthis.setClass();\n\t}\n\n\tprivate setClass() {\n\t\tthis.toggleClass = this.isCollapsed ? 'fa fa-caret-square-o-down' : 'fa fa-caret-square-o-up';\n\t}\n\n\tpublic search() {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\t\tlet registeredBy:string;\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromRegisteredBy(registeredBy) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\n\t\tif (registeredBy && registeredBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tregisteredBy = undefined;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromEndorsedBy(endorsedBy:string) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet registeredBy:string;\n\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tif (endorsedBy && endorsedBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tendorsedBy = undefined;\n\t\t}\n\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate doSearch(keywords:string, registeredBy:string, endorsedBy:string) {\n\t\tlet searchRequest: ServiceRegistrySearchRequest = {keywords:keywords, registeredBy:registeredBy, endorsedBy:endorsedBy};\n\t\tthis.searchRequestsService.addSearchRequest(this.searchKey, searchRequest);\n\t\tthis.notifications.errorLog = null; // Remove error log if it is present\n\t\tthis.onSearch.emit(searchRequest);\n\t}\n\n\tprivate generateForm() {\n\t\tvar formControl = new FormControl('');\n\t\tthis.formGroup.addControl('keywords', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('registeredBy', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('endorsedBy', formControl);\n\t}\n\n\tprivate loadOrganizations() {\n\t\tthis.orgsService.getAllOrganizations().subscribe(\n\t\t\torganizations => {\n\t\t\t\tthis.setupSearchRequest(organizations);\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.setupSearchRequest([]);\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organizations', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate setupSearchRequest(organizations:Array<Organization>) {\n\t\tthis.selectValuesOrganizations = [];\n\t\tthis.selectValuesOrganizations.push({value:undefined, label:'All'});\n\t\tthis.selectValuesOrganizationsForEndorsement = [];\n\t\tthis.selectValuesOrganizationsForEndorsement.push({value:undefined, label:'No filter'});\n\n\t\torganizations.forEach(organization => {\n\t\t\tthis.selectValuesOrganizations.push({value:organization.mrn, label:organization.name});\n\t\t\tthis.selectValuesOrganizationsForEndorsement.push({value:organization.mrn, label:organization.name});\n\t\t});\n\t\tvar registeredBy:string;\n\t\tvar endorsedBy:string;\n\t\tvar keywords:string = '';\n\t\tlet searchRequest = this.searchRequestsService.getSearchRequest(this.searchKey);\n\t\tif (searchRequest) {\n\t\t\tregisteredBy = searchRequest.registeredBy;\n\t\t\tendorsedBy = searchRequest.endorsedBy;\n\t\t\tif (searchRequest.keywords) {\n\t\t\t\tkeywords = searchRequest.keywords;\n\t\t\t}\n\t\t} else if (this.preFilterMyOrg){\n\t\t\tregisteredBy = this.authService.authState.orgMrn;\n\t\t}\n\t\tthis.formGroup.patchValue({registeredBy: registeredBy});\n\t\tthis.formGroup.patchValue({endorsedBy: endorsedBy});\n\t\tthis.formGroup.patchValue({keywords: keywords});\n\n\t\tthis.formGroup.controls['registeredBy'].valueChanges.subscribe(param => this.searchFromRegisteredBy(param));\n\t\tthis.formGroup.controls['endorsedBy'].valueChanges.subscribe(param => this.searchFromEndorsedBy(param));\n\n\t\tthis.changeDetector.detectChanges();\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts","module.exports = \"<a class=\\\"search-link\\\" (click)=\\\"toggle()\\\">\\n  <h4>{{searchTitle}} <i style=\\\"margin-left:2px;color: white; font-size: 16px;\\\" class=\\\"{{toggleClass}}\\\" aria-hidden=\\\"true\\\"></i></h4>\\n</a>\\n<div class=\\\"mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\" *ngIf=\\\"!isCollapsed && !isLoading && formGroup\\\">\\n  <form [formGroup]=\\\"formGroup\\\">\\n    <div *ngIf=\\\"showKeywords\\\" class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\">\\n          <label class=\\\"mc-form-label\\\">Keywords\\n            <div class=\\\"input-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control mc-form-control\\\" formControlName=\\\"keywords\\\">\\n              <span class=\\\"mc-form-control-input-group-btn input-group-btn\\\">\\n                <mc-loading-button [type]=\\\"'submit'\\\" [class]=\\\"'btn btn-primary search-button'\\\" [isLoading]=\\\"isSearching\\\" [title]=\\\"'Search'\\\" [onClick]=\\\"onSearchFunction\\\" ></mc-loading-button>\\n              </span>\\n            </div>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Registered by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"registeredBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizations\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"showEndorsement && endorsementMainSwitch\\\" class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Endorsed by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"endorsedBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizationsForEndorsement\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<div *ngIf=\\\"!isCollapsed\\\">\\n  <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module chunks = 0 1 2 3 4","module.exports = \".mc-form-label {\\n  width: 100%; }\\n\\n.mc-form-control {\\n  margin-top: 5px; }\\n\\n.mc-form-control:read-only {\\n  cursor: not-allowed;\\n  color: rgba(255, 255, 255, 0.7); }\\n\\n.mc-form-control-success {\\n  border: 1px solid #8bd22f !important; }\\n  .mc-form-control-success:focus {\\n    border: 1px solid #aee06d !important; }\\n\\n.mc-form-control-error {\\n  border: 1px solid #f95372 !important; }\\n  .mc-form-control-error:focus {\\n    border: 1px solid #fb879c !important; }\\n\\n.mc-form-group {\\n  max-width: 450px;\\n  margin-bottom: 0.5rem !important; }\\n\\n.mc-form-control-feedback {\\n  top: 20px !important;\\n  right: 10px !important; }\\n\\n.mc-form-control-select:read-only {\\n  cursor: default !important;\\n  color: #ffffff !important; }\\n\\n.search-link {\\n  cursor: pointer;\\n  color: #ffffff; }\\n  .search-link:hover {\\n    transform: none;\\n    color: #ffffff; }\\n\\n.mc-form-control-input-group-btn {\\n  padding-top: 5px; }\\n\\n.search-button {\\n  border-bottom-left-radius: 0 !important;\\n  border-top-left-radius: 0 !important; }\\n  .search-button:hover {\\n    transform: none; }\\n\\n.input-group {\\n  margin-bottom: 0px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module chunks = 0 1 2 3 4","import {Component, Input, OnChanges, ViewEncapsulation} from '@angular/core';\nimport {TableCell, TableHeader, TableRow} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {InstancesService} from \"../../../../backend-api/service-registry/services/instances.service\";\nimport {BugReportingService} from \"../../../../backend-api/identity-registry/services/bug-reporting.service\";\nimport {BugReport} from \"../../../../backend-api/identity-registry/autogen/model/BugReport\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'services-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./services-table.html'),\n  styles: []\n})\nexport class ServicesTableComponent implements OnChanges {\n  @Input() services: Array<Service>;\n  @Input() isLoading: boolean;\n\tpublic onRowClick: Function;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private navigationHelperService:NavigationHelperService, private orgsService:OrganizationsService, private notifications: MCNotificationsService, private instancesService: InstancesService, private bugService: BugReportingService) {\n  }\n  ngOnInit() {\n\t  this.onRowClick = this.gotoService.bind(this);\n  }\n  ngOnChanges() {\n    if (this.services) {\n\t    this.loadMyOrganization();\n    }\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgsService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.generateHeadersAndRows(organization.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private generateHeadersAndRows(orgMrn:string) {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    for (let service of this.services) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:service.name, class:'', truncateNumber:250};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:service.instanceVersion, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, orgMrn);\n\t    cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate gotoService(index:number) {\n  \tlet mrn = this.services[index].mrn;\n  \tlet version = this.services[index].instanceVersion;\n  \tthis.isLoading = true;\n\t\tthis.instancesService.getInstance(mrn, version).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t// when using the portal only to register instances, this should never happen. However, if someone uses the SR api only then there might be something missing. We log it for further investigation\n\t\t\t\t\tlet bugReport:BugReport = {subject:\"Missing instance\", description:\"There is a service in the IR that doesn't exist in the SR.\\n\\n MRN: \" + mrn + \",\\nVersion: \" + version};\n\t\t\t\t\tthis.bugService.reportBug(bugReport)\n\t\t\t\t}\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\n\t\t\t},\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/services-table/services-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/services-table/services-table.html\n// module id = ./src/app/pages/shared/components/services-table/services-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'specifications-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specifications-table.html'),\n  styles: []\n})\nexport class SpecificationsTableComponent implements OnChanges {\n  @Input() specifications: Array<Specification>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.specifications) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Status', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let specification of this.specifications) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, specification.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t  this.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t  organizationName => {\n\t\t\t  tableCell.valueHtml = organizationName;\n\t\t  },\n\t\t  err => {\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3 4","import {Injectable, OnInit} from '@angular/core';\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\n\n@Injectable()\nexport class OrganizationViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (organization) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\n\t    labelValues.push({label: 'Name', valueHtml: organization.name});\n      labelValues.push({label: 'Address', valueHtml: organization.address});\n      labelValues.push({label: 'Country', valueHtml: organization.country});\n      if (organization.email) {\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\n      }\n      if (organization.url) {\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\n      }\n    }\n    return labelValues;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\nimport {NgaModule} from \"../../theme/nga.module\";\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceDetailsViewComponent} from \"./components/service-details-view/service-details-view.component\";\nimport {CertificateRevokeComponent} from \"./components/certificate-revoke/certificate-revoke.component\";\nimport {ServiceRegistrySearchComponent} from \"./components/service-registry-search/service-registry-search.component\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {SrSearchRequestsService} from \"../org-service-registry/shared/services/sr-search-requests.service\";\nimport {EndorsedByListComponent} from \"./components/endorsed-by-list/endorsed-by-list.component\";\nimport {ServicesTableComponent} from \"./components/services-table/services-table.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n\t  ReactiveFormsModule\n  ],\n  declarations: [\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    OrganizationDetailsTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent\n  ],\n  exports: [\n    OrganizationDetailsTableComponent,\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent,\n  ],\n  providers: [\n    SrViewModelService,\n    CertificateHelperService,\n    OrganizationViewModelService,\n\t  SrSearchRequestsService\n  ]\n})\nexport class SharedModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts"],"mappings":";;;;;;AAAA;;;;;;;;;;AAUA;;AA0CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AC1DA;;;;;;;;;;AAUA;;AAgEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;;AChFA;AACA;AACA;AAOA;AAAA;AA6CA;AA1CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7CA;;;;;;;;;;ACTA;AAQA;AAEA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAbA;AAAA;;AAAA;AAcA;AAAA;AAbA;;;;;;;;;;ACRA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;;AAAA;AAyDA;AAAA;AAxDA;;;;;;;;;;ACTA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AApGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgGA;;AAAA;AA/FA;;;;;;;;ACjBA;;;;;;;;;ACAA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAIA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAvFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAmFA;;AAAA;AAlFA;;;;;;;;AClBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAAA;AAAA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACpCA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuDA;;AAAA;AAtDA;;;;;;;;ACnBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAWA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8FA;;AAAA;AA7FA;;;;;;;;ACvBA;;;;;;;;;ACAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AASA;AASA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3BA;AADA;AAAA;;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnIA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsIA;;AAAA;AArIA;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;;;ACAA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACZA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAxEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4EA;;AAAA;AA3EA;;;;;;;;ACfA;;;;;;;;;ACAA;AAGA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAlFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqFA;;AAAA;AApFA;;;;;;;;ACbA;;;;;;;;;ACAA;AASA;AACA;AACA;AACA;AACA;AAWA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6DA;;AAAA;AA5DA;;;;;;;;ACxBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjpKA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuKA;;AAAA;AAtKA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA/JA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkKA;;AAAA;AAjKA;;;;;;;;ACrBA;;;;;;;ACAA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA1FA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6FA;;AAAA;AA5FA;;;;;;;;AChBA;;;;;;;;;ACAA;AAIA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACbA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AAyBA;AAAA;AAxBA;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;AAAA;AACA;AAxCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;","sourceRoot":""}