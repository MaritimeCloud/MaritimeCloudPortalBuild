webpackJsonpac__name_([0],{

/***/ "./src/app/backend-api/identity-registry/autogen/model/Organization.ts":
/***/ function(module, exports) {

"use strict";
/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var Organization;
(function (Organization) {
    (function (FederationTypeEnum) {
        FederationTypeEnum[FederationTypeEnum["TestIdp"] = 'test-idp'] = "TestIdp";
        FederationTypeEnum[FederationTypeEnum["OwnIdp"] = 'own-idp'] = "OwnIdp";
        FederationTypeEnum[FederationTypeEnum["ExternalIdp"] = 'external-idp'] = "ExternalIdp";
    })(Organization.FederationTypeEnum || (Organization.FederationTypeEnum = {}));
    var FederationTypeEnum = Organization.FederationTypeEnum;
})(Organization = exports.Organization || (exports.Organization = {}));


/***/ },

/***/ "./src/app/backend-api/identity-registry/autogen/model/Service.ts":
/***/ function(module, exports) {

"use strict";
/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var Service;
(function (Service) {
    (function (OidcAccessTypeEnum) {
        OidcAccessTypeEnum[OidcAccessTypeEnum["Public"] = 'public'] = "Public";
        OidcAccessTypeEnum[OidcAccessTypeEnum["BearerOnly"] = 'bearer-only'] = "BearerOnly";
        OidcAccessTypeEnum[OidcAccessTypeEnum["Confidential"] = 'confidential'] = "Confidential";
    })(Service.OidcAccessTypeEnum || (Service.OidcAccessTypeEnum = {}));
    var OidcAccessTypeEnum = Service.OidcAccessTypeEnum;
})(Service = exports.Service || (exports.Service = {}));


/***/ },

/***/ "./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts":
/***/ function(module, exports) {

"use strict";
/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var VesselAttribute;
(function (VesselAttribute) {
    (function (AttributeNameEnum) {
        AttributeNameEnum[AttributeNameEnum["ImoNumber"] = 'imo-number'] = "ImoNumber";
        AttributeNameEnum[AttributeNameEnum["MmsiNumber"] = 'mmsi-number'] = "MmsiNumber";
        AttributeNameEnum[AttributeNameEnum["Callsign"] = 'callsign'] = "Callsign";
        AttributeNameEnum[AttributeNameEnum["Flagstate"] = 'flagstate'] = "Flagstate";
        AttributeNameEnum[AttributeNameEnum["AisClass"] = 'ais-class'] = "AisClass";
        AttributeNameEnum[AttributeNameEnum["PortOfRegister"] = 'port-of-register'] = "PortOfRegister";
    })(VesselAttribute.AttributeNameEnum || (VesselAttribute.AttributeNameEnum = {}));
    var AttributeNameEnum = VesselAttribute.AttributeNameEnum;
})(VesselAttribute = exports.VesselAttribute || (exports.VesselAttribute = {}));


/***/ },

/***/ "./src/app/pages/org-identity-registry/acting/acting-list/acting-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var agents_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/agents.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var logo_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/logo.service.ts");
var acting_service_1 = __webpack_require__("./src/app/shared/acting.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var ActingListComponent = (function () {
    function ActingListComponent(navigationService, actingService, agentsService, router, authService, route, orgService, notifications, logoService) {
        this.navigationService = navigationService;
        this.actingService = actingService;
        this.agentsService = agentsService;
        this.router = router;
        this.authService = authService;
        this.route = route;
        this.orgService = orgService;
        this.notifications = notifications;
        this.logoService = logoService;
        this.showModal = false;
    }
    ActingListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadActingFor();
    };
    ActingListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ActingListComponent.prototype.loadActingFor = function () {
        var _this = this;
        this.agentsService.getActingOnBehalfOf().subscribe(function (actingForPage) {
            _this.actingFor = actingForPage.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        });
    };
    ActingListComponent.prototype.actOnBehalfOf = function (entityModel) {
        this.modalDescription = 'Do you want to act on behalf of ' + entityModel.title + '?';
        this.actingForOrgMrn = entityModel.entityId;
        this.showModal = true;
    };
    ActingListComponent.prototype.actForSure = function () {
        this.actingService.actOnBehalfOf(this.actingForOrgMrn);
        this.navigationService.takeMeHome();
    };
    ActingListComponent.prototype.cancelModal = function () {
        this.modalDescription = null;
        this.actingForOrgMrn = null;
        this.showModal = false;
    };
    ActingListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.actingFor) {
            this.actingFor.forEach(function (agent) {
                _this.orgService.getOrganizationById(agent.idOnBehalfOfOrganization).subscribe(function (org) {
                    _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(org), entityId: org.mrn, title: org.name });
                });
            });
        }
    };
    ActingListComponent.prototype.createImgObservable = function (organization) {
        var _this = this;
        var imageSrc = 'assets/img/no_organization.png';
        return rxjs_1.Observable.create(function (observer) {
            _this.logoService.getLogoForOrganization(organization.mrn).subscribe(function (logo) {
                observer.next(URL.createObjectURL(new Blob([logo])));
            }, function (err) {
                observer.next(imageSrc);
            });
        });
    };
    ActingListComponent = __decorate([
        core_1.Component({
            selector: 'acting-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/acting/acting-list/acting-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _a) || Object, (typeof (_b = typeof acting_service_1.ActingService !== 'undefined' && acting_service_1.ActingService) === 'function' && _b) || Object, (typeof (_c = typeof agents_service_1.AgentsService !== 'undefined' && agents_service_1.AgentsService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object, (typeof (_e = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _e) || Object, (typeof (_f = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _f) || Object, (typeof (_g = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _g) || Object, (typeof (_h = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _h) || Object, (typeof (_j = typeof logo_service_1.LogoService !== 'undefined' && logo_service_1.LogoService) === 'function' && _j) || Object])
    ], ActingListComponent);
    return ActingListComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
}());
exports.ActingListComponent = ActingListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/acting/acting-list/acting-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Acting on behalf of\" baCardClass=\"with-scroll table-panel\">\n            <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"actOnBehalfOf($event)\"></mc-entity-image-list>\n        </ba-card>\n    </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"actForSure()\" [show]=\"showModal\" [title]=\"'Act on behalf of'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Act'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/acting/acting.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var ActingComponent = (function () {
    function ActingComponent() {
    }
    ActingComponent = __decorate([
        core_1.Component({
            selector: 'acting',
            template: '<router-outlet></router-outlet>'
        }), 
        __metadata('design:paramtypes', [])
    ], ActingComponent);
    return ActingComponent;
}());
exports.ActingComponent = ActingComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/acting/acting.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var acting_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting.component.ts");
var acting_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting.routing.ts");
var acting_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting-list/acting-list.component.ts");
var ActingModule = (function () {
    function ActingModule() {
    }
    ActingModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                acting_routing_1.routing
            ],
            declarations: [
                acting_component_1.ActingComponent,
                acting_list_component_1.ActingListComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], ActingModule);
    return ActingModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ActingModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/acting/acting.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var acting_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting.component.ts");
var acting_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting-list/acting-list.component.ts");
var routes = [
    {
        path: 'acting',
        component: acting_component_1.ActingComponent,
        data: { breadcrumb: 'Acting' },
        children: [
            {
                path: '',
                component: acting_list_component_1.ActingListComponent
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/agents.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var AgentsComponent = (function () {
    function AgentsComponent() {
    }
    AgentsComponent = __decorate([
        core_1.Component({
            selector: 'agents',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], AgentsComponent);
    return AgentsComponent;
}());
exports.AgentsComponent = AgentsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/agents.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var agents_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/agents.routing.ts");
var agents_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/agents.component.ts");
var agent_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.component.ts");
var agent_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.component.ts");
var agent_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.component.ts");
var agent_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.component.ts");
var AgentsModule = (function () {
    function AgentsModule() {
    }
    AgentsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                agents_routing_1.routing
            ],
            declarations: [
                agents_component_1.AgentsComponent,
                agent_list_component_1.AgentListComponent,
                agent_details_component_1.AgentDetailsComponent,
                agent_new_component_1.AgentNewComponent,
                agent_update_component_1.AgentUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], AgentsModule);
    return AgentsModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AgentsModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/agents.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var agent_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.component.ts");
var agent_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.component.ts");
var agent_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.component.ts");
var routes = [
    {
        path: 'agents',
        data: { breadcrumb: 'Agents' },
        children: [
            {
                path: '',
                component: agent_list_component_1.AgentListComponent
            },
            {
                path: 'register',
                component: agent_new_component_1.AgentNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: agent_details_component_1.AgentDetailsComponent,
                data: { breadcrumb: 'Details' }
            } /*,
            {
                path: 'update/:id',
                component: AgentUpdateComponent,
                data: {breadcrumb: 'Update'}
            }*/
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var agents_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/agents.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var AgentDetailsComponent = (function () {
    function AgentDetailsComponent(authService, route, router, agentsService, organizationService, notifications, navigationHelper) {
        this.authService = authService;
        this.route = route;
        this.router = router;
        this.agentsService = agentsService;
        this.organizationService = organizationService;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
    }
    AgentDetailsComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadOrganization();
        this.loadAgent();
    };
    AgentDetailsComponent.prototype.loadOrganization = function () {
        var _this = this;
        this.organizationService.getMyOrganization().subscribe(function (org) {
            _this.organization = org;
        });
    };
    AgentDetailsComponent.prototype.loadAgent = function () {
        var _this = this;
        var id = this.route.snapshot.params['id'];
        this.agentsService.getAgent(id).subscribe(function (agent) {
            _this.agent = agent;
            _this.organizationService.getOrganizationById(agent.idActingOrganization).subscribe(function (org) {
                _this.title = org.name;
                _this.isLoading = false;
                _this.generateLabelValues();
            }, function (err) {
                _this.isLoading = false;
                _this.notifications.generateNotification('Error', 'Error when trying to get the name of organization', mc_notifications_service_1.MCNotificationType.Error, err);
            });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get agent', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentDetailsComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        if (this.agent) {
            this.labelValues.push({ label: 'Agent Organization', valueHtml: this.title });
        }
    };
    AgentDetailsComponent.prototype.showUpdate = function () {
        return false;
    };
    AgentDetailsComponent.prototype.showDelete = function () {
        return this.isAdmin() && this.agent != null;
    };
    AgentDetailsComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin);
    };
    AgentDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete the agent?';
        this.showModal = true;
    };
    AgentDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateAgent(this.agent.id);
    };
    AgentDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    AgentDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoading = true;
        this.showModal = false;
        this.agentsService.deleteAgent(this.agent.id).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete the agent', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentDetailsComponent = __decorate([
        core_1.Component({
            selector: 'agent-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _c) || Object, (typeof (_d = typeof agents_service_1.AgentsService !== 'undefined' && agents_service_1.AgentsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _g) || Object])
    ], AgentDetailsComponent);
    return AgentDetailsComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.AgentDetailsComponent = AgentDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-log-12\">\n        <ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n            <ul *ngIf=\"!isLoading\" class=\"btn-list clearfix\">\n                <li *ngIf=\"showUpdate()\">\n                    <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update Agent</button>\n                </li>\n                <li *ngIf=\"showDelete()\">\n                    <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete Agent</button>\n                </li>\n            </ul>\n        </ba-card>\n    </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete Agent'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var agents_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/agents.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var logo_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/logo.service.ts");
var AgentListComponent = (function () {
    function AgentListComponent(agentsService, router, authService, route, orgService, notifications, logoService) {
        this.agentsService = agentsService;
        this.router = router;
        this.authService = authService;
        this.route = route;
        this.orgService = orgService;
        this.notifications = notifications;
        this.logoService = logoService;
        this.KEY_NEW = 'KEY_NEW_AGENT';
    }
    AgentListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadAgents();
    };
    AgentListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentListComponent.prototype.loadAgents = function () {
        var _this = this;
        this.agentsService.getAgents().subscribe(function (agents) {
            _this.agents = agents.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        });
    };
    AgentListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.gotoCreate();
        }
        else {
            this.router.navigate([entityModel.entityId], { relativeTo: this.route });
        }
    };
    AgentListComponent.prototype.gotoCreate = function () {
        this.router.navigate(['register'], { relativeTo: this.route });
    };
    AgentListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.agents) {
            var _loop_1 = function(i) {
                var agent = this_1.agents[i];
                this_1.orgService.getOrganizationById(agent.idActingOrganization).subscribe(function (org) {
                    _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(org, i === _this.agents.length - 1), entityId: agent.id.toString(), title: org.name });
                });
            };
            var this_1 = this;
            for (var i = 0; i < this.agents.length; i++) {
                _loop_1(i);
            }
        }
        if (this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin) && this.agents.length < 1) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Agent', isAdd: true });
        }
    };
    AgentListComponent.prototype.createImgObservable = function (organization, last) {
        var _this = this;
        var imageSrc = 'assets/img/no_organization.png';
        return rxjs_1.Observable.create(function (observer) {
            _this.logoService.getLogoForOrganization(organization.mrn).subscribe(function (logo) {
                observer.next(URL.createObjectURL(new Blob([logo])));
                if (_this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin) && last) {
                    _this.entityImageList.push({ imageSourceObservable: null, entityId: _this.KEY_NEW, title: 'Register new Agent', isAdd: true });
                }
            }, function (err) {
                observer.next(imageSrc);
                if (_this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin) && last) {
                    _this.entityImageList.push({ imageSourceObservable: null, entityId: _this.KEY_NEW, title: 'Register new Agent', isAdd: true });
                }
            });
        });
    };
    AgentListComponent = __decorate([
        core_1.Component({
            selector: 'agent-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof agents_service_1.AgentsService !== 'undefined' && agents_service_1.AgentsService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof logo_service_1.LogoService !== 'undefined' && logo_service_1.LogoService) === 'function' && _g) || Object])
    ], AgentListComponent);
    return AgentListComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.AgentListComponent = AgentListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Agents for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n        </ba-card>\n    </div>\n</div>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var agents_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/agents.service.ts");
var validators_1 = __webpack_require__("./src/app/theme/validators/index.ts");
var AgentNewComponent = (function () {
    function AgentNewComponent(changeDetector, formBuilder, activatedRoute, navigationService, notifications, orgService, agentsService) {
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.agentsService = agentsService;
        this.isRegistering = false;
        this.registerTitle = "Register Agent";
    }
    AgentNewComponent.prototype.ngOnInit = function () {
        this.isRegistering = false;
        this.isLoading = true;
        this.loadMyOrganization();
    };
    AgentNewComponent.prototype.ngOnDestroy = function () {
        this.changeDetector.detach();
    };
    AgentNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var agent = {
            idActingOrganization: this.agentOrg.id,
            idOnBehalfOfOrganization: this.organization.id
        };
        this.createAgent(agent);
    };
    AgentNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateAgent();
    };
    AgentNewComponent.prototype.createAgent = function (agent) {
        var _this = this;
        this.agentsService.createAgent(agent).subscribe(function (agent) {
            _this.navigationService.navigateToAgent(agent.id);
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create agent', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (org) {
            _this.organization = org;
            _this.loadAllOrgs();
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentNewComponent.prototype.loadAllOrgs = function () {
        var _this = this;
        this.orgService.getAllOrganizations().subscribe(function (orgs) {
            _this.allOrgs = orgs;
            _this.generateForm();
            _this.isLoading = false;
            _this.changeDetector.detectChanges();
        });
    };
    AgentNewComponent.prototype.generateForm = function () {
        var _this = this;
        this.registerForm = this.formBuilder.group({});
        this.formControlModels = [];
        var selectValues = this.selectValues();
        var formControlModel = { selectValues: selectValues, formGroup: this.registerForm, elementId: 'agentOrg', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Agent Organization', placeholder: '', validator: validators_1.SelectValidator.validate, showCheckmark: true };
        var formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) {
            if (param && _this.agentOrg != param) {
                _this.agentOrg = param;
                _this.generateForm();
            }
        });
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        this.changeDetector.detectChanges();
    };
    AgentNewComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose Organization...', isSelected: this.agentOrg === null });
        this.allOrgs.forEach(function (org) {
            var isSelected = org === _this.agentOrg;
            selectValues.push({ value: org, label: org.name, isSelected: isSelected });
        });
        return selectValues;
    };
    AgentNewComponent.prototype.selectedValue = function (selectValues) {
        selectValues.forEach(function (selectModel) {
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        });
        return '';
    };
    AgentNewComponent = __decorate([
        core_1.Component({
            selector: 'agent-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _a) || Object, (typeof (_b = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object, (typeof (_f = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _f) || Object, (typeof (_g = typeof agents_service_1.AgentsService !== 'undefined' && agents_service_1.AgentsService) === 'function' && _g) || Object])
    ], AgentNewComponent);
    return AgentNewComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.AgentNewComponent = AgentNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Register new Agent for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-form [formGroup]=\"registerForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRegistering\" [registerTitle]=\"registerTitle\" (onCancel)=\"cancel()\" (onRegister)=\"register()\"></mc-form>\n        </ba-card>\n    </div>\n</div>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var agents_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/agents.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var validators_1 = __webpack_require__("./src/app/theme/validators/index.ts");
var AgentUpdateComponent = (function () {
    function AgentUpdateComponent(changeDetector, formBuilder, activatedRoute, navigationService, notifications, agentsService, orgService) {
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.agentsService = agentsService;
        this.orgService = orgService;
        this.showModal = false;
        this.updateTitle = 'Update agent';
    }
    AgentUpdateComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.isUpdating = false;
        this.loadMyOrganization();
    };
    AgentUpdateComponent.prototype.ngOnDestroy = function () {
        this.changeDetector.detach();
    };
    AgentUpdateComponent.prototype.cancel = function () {
        this.navigationService.navigateToAgent(this.agent.id);
    };
    AgentUpdateComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    AgentUpdateComponent.prototype.update = function () {
        this.modalDescription = 'Are you sure you want to update this agent?';
        this.showModal = true;
    };
    AgentUpdateComponent.prototype.updateForSure = function () {
        this.isUpdating = true;
        this.updateAgent();
    };
    AgentUpdateComponent.prototype.updateAgent = function () {
        var _this = this;
        this.agentsService.updateAgent(this.agent.id, this.agent).subscribe(function (agent) {
            _this.navigationService.navigateToAgent(agent.id);
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update agent', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentUpdateComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.loadAgent();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentUpdateComponent.prototype.loadAllOrgs = function () {
        var _this = this;
        this.orgService.getAllOrganizations().subscribe(function (orgs) {
            _this.allOrgs = orgs;
            _this.generateForm();
            _this.isLoading = false;
            _this.changeDetector.detectChanges();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get all organizations', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentUpdateComponent.prototype.loadAgent = function () {
        var _this = this;
        var agentId = this.activatedRoute.snapshot.params['id'];
        this.agentsService.getAgent(agentId).subscribe(function (agent) {
            _this.agent = agent;
            _this.orgService.getOrganizationById(agent.idActingOrganization).subscribe(function (org) {
                _this.agentOrg = org;
                _this.agentOrgName = org.name;
                _this.loadAllOrgs();
            }, function (err) {
                _this.isLoading = false;
                _this.notifications.generateNotification('Error', 'Error when trying to get agent organization', mc_notifications_service_1.MCNotificationType.Error, err);
            });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get agent', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    AgentUpdateComponent.prototype.generateForm = function () {
        var _this = this;
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var selectValues = this.selectValues();
        var formControlModel = { selectValues: selectValues, formGroup: this.updateForm, elementId: 'agentOrgs', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Agent Organization', validator: validators_1.SelectValidator.validate, showCheckmark: true };
        var formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) {
            if (param && _this.agentOrg != param) {
                _this.agentOrg = param;
                _this.generateForm();
            }
        });
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        this.changeDetector.detectChanges();
    };
    AgentUpdateComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose Organization...', isSelected: this.agentOrg == null });
        this.allOrgs.forEach(function (org) {
            var isSelected = org.name === _this.agentOrg.name;
            selectValues.push({ value: org, label: org.name, isSelected: isSelected });
        });
        return selectValues;
    };
    AgentUpdateComponent.prototype.selectedValue = function (selectValues) {
        selectValues.forEach(function (selectModel) {
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        });
        return '';
    };
    AgentUpdateComponent = __decorate([
        core_1.Component({
            selector: 'agent-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _a) || Object, (typeof (_b = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object, (typeof (_f = typeof agents_service_1.AgentsService !== 'undefined' && agents_service_1.AgentsService) === 'function' && _f) || Object, (typeof (_g = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _g) || Object])
    ], AgentUpdateComponent);
    return AgentUpdateComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.AgentUpdateComponent = AgentUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Update Agent - {{agentOrgName}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n        </ba-card>\n    </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"updateForSure()\" [show]=\"showModal\" [title]=\"'Update agent'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Update'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var devices_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/devices.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var DeviceDetailsComponent = (function () {
    function DeviceDetailsComponent(authService, route, devicesService, router, notifications, navigationHelper) {
        this.authService = authService;
        this.route = route;
        this.devicesService = devicesService;
        this.router = router;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
    }
    DeviceDetailsComponent.prototype.ngOnInit = function () {
        this.entityType = certificate_helper_service_1.CertificateEntityType.Device;
        this.loadDevice();
    };
    DeviceDetailsComponent.prototype.loadDevice = function () {
        var _this = this;
        this.isLoading = true;
        var mrn = this.route.snapshot.params['id'];
        this.devicesService.getDevice(mrn).subscribe(function (device) {
            _this.device = device;
            _this.title = device.name;
            _this.isLoading = false;
            _this.generateLabelValues();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the device', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceDetailsComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        if (this.device) {
            this.labelValues.push({ label: 'MRN', valueHtml: this.device.mrn });
            this.labelValues.push({ label: 'Name', valueHtml: this.device.name });
            this.labelValues.push({ label: 'Permissions', valueHtml: this.device.permissions });
        }
    };
    DeviceDetailsComponent.prototype.showUpdate = function () {
        return this.isAdmin() && this.device != null;
    };
    DeviceDetailsComponent.prototype.showDelete = function () {
        return this.isAdmin() && this.device != null;
    };
    DeviceDetailsComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.DeviceAdmin);
    };
    DeviceDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateDevice(this.device.mrn);
    };
    DeviceDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete the device?';
        this.showModal = true;
    };
    DeviceDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    DeviceDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoading = true;
        this.showModal = false;
        this.devicesService.deleteDevice(this.device.mrn).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete the device', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceDetailsComponent = __decorate([
        core_1.Component({
            selector: 'device-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof devices_service_1.DevicesService !== 'undefined' && devices_service_1.DevicesService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object, (typeof (_f = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _f) || Object])
    ], DeviceDetailsComponent);
    return DeviceDetailsComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.DeviceDetailsComponent = DeviceDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n      <ul *ngIf=\"!isLoading && (showDelete() || showUpdate())\" class=\"btn-list clearfix\">\n        <li *ngIf=\"showUpdate()\">\n          <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update device</button>\n        </li>\n        <li *ngIf=\"showDelete()\">\n          <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete device</button>\n        </li>\n      </ul>\n    </ba-card>\n\n    <div *ngIf=\"device\">\n      <ba-card title=\"Certificates for {{title}}\" baCardClass=\"with-scroll table-panel\">\n        <certificates-table [isAdmin]=\"isAdmin()\" [entityMrn]=\"device.mrn\" [isLoading]=\"isLoading\" [certificateTitle]=\"title\" [certificateEntityType]=\"entityType\" [certificates]=\"device.certificates\"></certificates-table>\n      </ba-card>\n    </div>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete device'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var devices_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/devices.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var DeviceListComponent = (function () {
    function DeviceListComponent(authService, router, route, devicesService, orgService, notifications) {
        this.authService = authService;
        this.router = router;
        this.route = route;
        this.devicesService = devicesService;
        this.orgService = orgService;
        this.notifications = notifications;
        this.KEY_NEW = 'KEY_NEW_DEVICE';
    }
    DeviceListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadDevices();
    };
    DeviceListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceListComponent.prototype.loadDevices = function () {
        var _this = this;
        this.devicesService.getDevices().subscribe(function (devicePage) {
            _this.devices = devicePage.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get devices', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.gotoCreate();
        }
        else {
            this.router.navigate([entityModel.entityId], { relativeTo: this.route });
        }
    };
    DeviceListComponent.prototype.gotoCreate = function () {
        this.router.navigate(['register'], { relativeTo: this.route });
    };
    DeviceListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.devices) {
            this.devices.forEach(function (device) {
                _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(device), entityId: device.mrn, title: device.name });
            });
        }
        if (this.authService.authState.hasPermission(auth_service_1.AuthPermission.DeviceAdmin)) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Device', isAdd: true });
        }
    };
    DeviceListComponent.prototype.createImgObservable = function (device) {
        var imageSrc = 'assets/img/no_device.svg';
        return rxjs_1.Observable.create(function (observer) {
            observer.next(imageSrc);
        });
    };
    DeviceListComponent = __decorate([
        core_1.Component({
            selector: 'device-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof devices_service_1.DevicesService !== 'undefined' && devices_service_1.DevicesService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object])
    ], DeviceListComponent);
    return DeviceListComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.DeviceListComponent = DeviceListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Devices for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var devices_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/devices.service.ts");
var mrn_helper_service_1 = __webpack_require__("./src/app/shared/mrn-helper.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var DeviceNewComponent = (function () {
    function DeviceNewComponent(formBuilder, activatedRoute, navigationService, notifications, orgService, devicesService, mrnHelper) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.devicesService = devicesService;
        // McForm params
        this.isLoading = true;
        this.isRegistering = false;
        this.registerTitle = "Register Device";
        this.mrnMask = mrnHelper.mrnMaskForDevice();
        this.mrnPattern = mrnHelper.mrnPattern();
        this.mrnPatternError = mrnHelper.mrnPatternError();
        this.mrn = this.mrnMask;
    }
    DeviceNewComponent.prototype.ngOnInit = function () {
        this.isRegistering = false;
        this.isLoading = true;
        this.loadMyOrganization();
    };
    DeviceNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateDevice();
    };
    DeviceNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var device = {
            mrn: this.mrn,
            name: this.registerForm.value.name,
            permissions: this.registerForm.value.permissions
        };
        this.createDevice(device);
    };
    DeviceNewComponent.prototype.createDevice = function (device) {
        var _this = this;
        this.devicesService.createDevice(device).subscribe(function (device) {
            _this.navigationService.navigateToDevice(device.mrn);
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create device', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceNewComponent.prototype.generateMRN = function (idValue) {
        var mrn = (idValue ? idValue : '');
        var valueNoSpaces = mrn.split(' ').join('').toLowerCase();
        this.mrn = this.mrnMask + valueNoSpaces;
        this.registerForm.patchValue({ mrn: this.mrn });
    };
    DeviceNewComponent.prototype.generateForm = function () {
        var _this = this;
        this.registerForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.registerForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.mrn, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'deviceId', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Device ID', placeholder: 'Enter Device ID to generate MRN', validator: forms_1.Validators.required, pattern: this.mrnPattern, errorText: this.mrnPatternError };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.generateMRN(param); });
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
    };
    DeviceNewComponent = __decorate([
        core_1.Component({
            selector: 'device-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof devices_service_1.DevicesService !== 'undefined' && devices_service_1.DevicesService) === 'function' && _f) || Object, (typeof (_g = typeof mrn_helper_service_1.MrnHelperService !== 'undefined' && mrn_helper_service_1.MrnHelperService) === 'function' && _g) || Object])
    ], DeviceNewComponent);
    return DeviceNewComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.DeviceNewComponent = DeviceNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Register new Device for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formGroup]=\"registerForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRegistering\" [registerTitle]=\"registerTitle\" (onCancel)=\"cancel()\" (onRegister)=\"register()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-update/device-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var devices_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/devices.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var DeviceUpdateComponent = (function () {
    function DeviceUpdateComponent(formBuilder, activatedRoute, navigationService, notifications, orgService, devicesService) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.devicesService = devicesService;
        // McForm params
        this.isLoading = true;
        this.isUpdating = false;
        this.updateTitle = "Update device";
    }
    DeviceUpdateComponent.prototype.ngOnInit = function () {
        this.isUpdating = false;
        this.isLoading = true;
        this.loadDevice();
    };
    DeviceUpdateComponent.prototype.cancel = function () {
        var deviceMrn = (this.device ? this.device.mrn : '');
        this.navigationService.navigateToDevice(deviceMrn);
    };
    DeviceUpdateComponent.prototype.update = function () {
        this.isUpdating = true;
        this.device.name = this.updateForm.value.name;
        this.device.permissions = this.updateForm.value.permissions;
        this.updateDevice(this.device);
    };
    DeviceUpdateComponent.prototype.updateDevice = function (device) {
        var _this = this;
        this.devicesService.updateDevice(device).subscribe(function (_) {
            _this.isUpdating = false;
            _this.navigationService.navigateToDevice(_this.device.mrn);
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update device', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    DeviceUpdateComponent.prototype.loadDevice = function () {
        var _this = this;
        this.isLoading = true;
        var mrn = this.activatedRoute.snapshot.params['id'];
        this.devicesService.getDevice(mrn).subscribe(function (device) {
            _this.device = device;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the device', mc_notifications_service_1.MCNotificationType.Error, err);
            _this.navigationService.navigateToDevice(mrn);
        });
    };
    DeviceUpdateComponent.prototype.generateForm = function () {
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.updateForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.device.mrn, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl(this.device.name, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl(this.device.permissions, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
    };
    DeviceUpdateComponent = __decorate([
        core_1.Component({
            selector: 'device-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-update/device-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof devices_service_1.DevicesService !== 'undefined' && devices_service_1.DevicesService) === 'function' && _f) || Object])
    ], DeviceUpdateComponent);
    return DeviceUpdateComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.DeviceUpdateComponent = DeviceUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/components/device-update/device-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Update Device - {{device?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/devices.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var DevicesComponent = (function () {
    function DevicesComponent() {
    }
    DevicesComponent = __decorate([
        core_1.Component({
            selector: 'devices',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], DevicesComponent);
    return DevicesComponent;
}());
exports.DevicesComponent = DevicesComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/devices.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var devices_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/devices.routing.ts");
var devices_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/devices.component.ts");
var device_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts");
var device_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var device_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts");
var device_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-update/device-update.component.ts");
var DevicesModule = (function () {
    function DevicesModule() {
    }
    DevicesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                devices_routing_1.routing
            ],
            declarations: [
                devices_component_1.DevicesComponent,
                device_details_component_1.DeviceDetailsComponent,
                device_list_component_1.DeviceListComponent,
                device_new_component_1.DeviceNewComponent,
                device_update_component_1.DeviceUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], DevicesModule);
    return DevicesModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DevicesModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/devices/devices.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var devices_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/devices.component.ts");
var device_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts");
var device_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts");
var device_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts");
var certificate_issue_new_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts");
var device_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/components/device-update/device-update.component.ts");
var certificate_revoke_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts");
// noinspection TypeScriptValidateTypes
var routes = [
    {
        path: 'devices',
        component: devices_component_1.DevicesComponent,
        data: { breadcrumb: 'Devices' },
        children: [
            {
                path: '',
                component: device_list_component_1.DeviceListComponent
            },
            {
                path: 'issuecert',
                component: certificate_issue_new_component_1.CertificateIssueNewComponent,
                data: { breadcrumb: 'New Certificate' },
                children: []
            },
            {
                path: 'revokecert',
                component: certificate_revoke_component_1.CertificateRevokeComponent,
                data: { breadcrumb: 'Revoke Certificate' },
                children: []
            },
            {
                path: 'register',
                component: device_new_component_1.DeviceNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: device_details_component_1.DeviceDetailsComponent,
                data: { breadcrumb: 'Details' }
            },
            {
                path: 'update/:id',
                component: device_update_component_1.DeviceUpdateComponent,
                data: { breadcrumb: 'Update' }
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/org-identity-registry.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var OrgIdentityRegistryComponent = (function () {
    function OrgIdentityRegistryComponent() {
    }
    OrgIdentityRegistryComponent = __decorate([
        core_1.Component({
            selector: 'org-identity-registry',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], OrgIdentityRegistryComponent);
    return OrgIdentityRegistryComponent;
}());
exports.OrgIdentityRegistryComponent = OrgIdentityRegistryComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/org-identity-registry.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var org_identity_registry_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/org-identity-registry.routing.ts");
var org_identity_registry_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/org-identity-registry.component.ts");
var vessels_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/vessels.module.ts");
var devices_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/devices.module.ts");
var users_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/users.module.ts");
var services_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/services.module.ts");
var roles_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/roles.module.ts");
var agents_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/agents.module.ts");
var acting_module_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting.module.ts");
var OrgIdentityRegistryModule = (function () {
    function OrgIdentityRegistryModule() {
    }
    OrgIdentityRegistryModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                vessels_module_1.default,
                devices_module_1.default,
                services_module_1.default,
                users_module_1.default,
                roles_module_1.default,
                agents_module_1.default,
                acting_module_1.default,
                org_identity_registry_routing_1.routing
            ],
            declarations: [
                org_identity_registry_component_1.OrgIdentityRegistryComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], OrgIdentityRegistryModule);
    return OrgIdentityRegistryModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OrgIdentityRegistryModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/org-identity-registry.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var org_identity_registry_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/org-identity-registry.component.ts");
var vessels_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/vessels.component.ts");
var devices_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/devices/devices.component.ts");
var users_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/users.component.ts");
var services_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/services.component.ts");
var roles_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/roles.component.ts");
var agents_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/agents/agents.component.ts");
var acting_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/acting/acting.component.ts");
// noinspection TypeScriptValidateTypes
var routes = [
    {
        path: '',
        component: org_identity_registry_component_1.OrgIdentityRegistryComponent,
        children: [
            { path: 'devices', component: devices_component_1.DevicesComponent },
            { path: 'services', component: services_component_1.ServicesComponent },
            { path: 'users', component: users_component_1.UsersComponent },
            { path: 'vessels', component: vessels_component_1.VesselsComponent },
            { path: 'roles', component: roles_component_1.RolesComponent },
            { path: 'agents', component: agents_component_1.AgentsComponent },
            { path: 'acting', component: acting_component_1.ActingComponent }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-details/role-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var roles_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/roles.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var RoleViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts");
var RoleDetailsComponent = (function () {
    function RoleDetailsComponent(authService, orgService, route, router, rolesService, notifications, navigationHelper) {
        this.authService = authService;
        this.orgService = orgService;
        this.route = route;
        this.router = router;
        this.rolesService = rolesService;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
    }
    RoleDetailsComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
    };
    RoleDetailsComponent.prototype.loadRole = function () {
        var _this = this;
        var id = this.route.snapshot.params['id'];
        this.rolesService.getRole(this.organization.mrn, id).subscribe(function (role) {
            _this.role = role;
            _this.title = role.permission;
            _this.isLoading = false;
            _this.generateLabelValues();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get role', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleDetailsComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.loadRole();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleDetailsComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        if (this.role) {
            this.labelValues.push({ label: 'Permission Name', valueHtml: this.role.permission });
            this.labelValues.push({ label: 'Role Name', valueHtml: RoleViewModel_1.RoleViewModel.getLabelForEnum(this.role.roleName) });
        }
    };
    RoleDetailsComponent.prototype.showDelete = function () {
        return this.isAdmin() && this.role != null;
    };
    RoleDetailsComponent.prototype.showUpdate = function () {
        return this.isAdmin() && this.role != null;
    };
    RoleDetailsComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin);
    };
    RoleDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete this role?';
        this.showModal = true;
    };
    RoleDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoading = true;
        this.showModal = false;
        this.rolesService.deleteRole(this.organization.mrn, this.role.id).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete role', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    RoleDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateRole(this.role.id);
    };
    RoleDetailsComponent = __decorate([
        core_1.Component({
            selector: 'role-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-details/role-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object, (typeof (_e = typeof roles_service_1.RolesService !== 'undefined' && roles_service_1.RolesService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _g) || Object])
    ], RoleDetailsComponent);
    return RoleDetailsComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.RoleDetailsComponent = RoleDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-details/role-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n            <ul *ngIf=\"!isLoading && (showDelete() || showUpdate())\" class=\"btn-list clearfix\">\n                <li *ngIf=\"showUpdate()\">\n                    <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update Role</button>\n                </li>\n                <li *ngIf=\"showDelete()\">\n                    <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete Role</button>\n                </li>\n            </ul>\n        </ba-card>\n    </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete Role'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-list/role-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var roles_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/roles.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var RoleListComponent = (function () {
    function RoleListComponent(authService, router, route, rolesService, orgService, notifications) {
        this.authService = authService;
        this.router = router;
        this.route = route;
        this.rolesService = rolesService;
        this.orgService = orgService;
        this.notifications = notifications;
        this.KEY_NEW = 'KEY_NEW_ROLE';
    }
    RoleListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadRoles();
    };
    RoleListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleListComponent.prototype.loadRoles = function () {
        var _this = this;
        this.rolesService.getOrgRoles(this.organization.mrn).subscribe(function (roles) {
            _this.roles = roles;
            _this.isLoading = false;
            _this.generateEntityImageList();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get roles', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.gotoCreate();
        }
        else {
            this.router.navigate([entityModel.entityId], { relativeTo: this.route });
        }
    };
    RoleListComponent.prototype.gotoCreate = function () {
        this.router.navigate(['register'], { relativeTo: this.route });
    };
    RoleListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.roles) {
            this.roles.forEach(function (role) {
                _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(), entityId: role.id.toString(), title: role.permission });
            });
        }
        if (this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin)) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Role', isAdd: true });
        }
    };
    RoleListComponent.prototype.createImgObservable = function () {
        var imageSrc = 'assets/img/no_service.svg';
        return rxjs_1.Observable.create(function (observer) {
            observer.next(imageSrc);
        });
    };
    RoleListComponent = __decorate([
        core_1.Component({
            selector: 'role-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-list/role-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof roles_service_1.RolesService !== 'undefined' && roles_service_1.RolesService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object])
    ], RoleListComponent);
    return RoleListComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.RoleListComponent = RoleListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-list/role-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Roles for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n        </ba-card>\n    </div>\n</div>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-new/role-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var roles_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/roles.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var validators_1 = __webpack_require__("./src/app/theme/validators/index.ts");
var Role_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Role.ts");
var RoleViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts");
var RoleNameEnum = Role_1.Role.RoleNameEnum;
var RoleNewComponent = (function () {
    function RoleNewComponent(changeDetector, formBuilder, activatedRoute, navigationService, notifications, orgService, rolesService) {
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.rolesService = rolesService;
        this.roleName = null;
        this.isLoading = true;
        this.isRegistering = false;
        this.registerTitle = "Register Role";
    }
    RoleNewComponent.prototype.ngOnInit = function () {
        this.isRegistering = false;
        this.isLoading = true;
        this.loadMyOrganization();
    };
    RoleNewComponent.prototype.ngOnDestroy = function () {
        this.changeDetector.detach();
    };
    RoleNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateRole();
    };
    RoleNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var role = {
            permission: this.registerForm.value.permission,
            roleName: this.registerForm.value.role
        };
        this.createRole(role);
    };
    RoleNewComponent.prototype.createRole = function (role) {
        var _this = this;
        this.rolesService.createRole(this.organization.mrn, role).subscribe(function (role) {
            _this.navigationService.navigateToRole(role.id);
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create role', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.generateForm();
            _this.isLoading = false;
            _this.changeDetector.detectChanges();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleNewComponent.prototype.generateForm = function () {
        var _this = this;
        var oldForm = this.registerForm;
        this.registerForm = this.formBuilder.group({});
        if (!oldForm) {
            oldForm = this.registerForm;
        }
        this.formControlModels = [];
        var formControlModel = { formGroup: this.registerForm, elementId: 'permission', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permission Name', placeholder: 'Enter Permission name', validator: forms_1.Validators.required };
        var formControl = new forms_1.FormControl(oldForm.value.permission, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        var selectValues = this.selectValues();
        var formControlModelSelect = { selectValues: selectValues, formGroup: this.registerForm, elementId: 'role', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Role Name', placeholder: '', validator: validators_1.SelectValidator.validate, showCheckmark: true };
        formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);
        formControl.valueChanges.subscribe(function (param) {
            if (param && _this.roleName != param) {
                _this.roleName = param;
                _this.generateForm();
            }
        });
        this.registerForm.addControl(formControlModelSelect.elementId, formControl);
        this.formControlModels.push(formControlModelSelect);
        this.changeDetector.detectChanges();
    };
    RoleNewComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose Role...', isSelected: this.roleName == null });
        var allRoleNames = RoleViewModel_1.RoleViewModel.getAllRoleNames();
        allRoleNames.forEach(function (roleName) {
            var isSelected = RoleNameEnum[roleName.value] === RoleNameEnum[_this.roleName];
            selectValues.push({ value: roleName.value, label: roleName.label, isSelected: isSelected });
        });
        return selectValues;
    };
    RoleNewComponent.prototype.selectedValue = function (selectValues) {
        selectValues.forEach(function (selectModel) {
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        });
        return '';
    };
    RoleNewComponent = __decorate([
        core_1.Component({
            selector: 'role-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-new/role-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _a) || Object, (typeof (_b = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object, (typeof (_f = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _f) || Object, (typeof (_g = typeof roles_service_1.RolesService !== 'undefined' && roles_service_1.RolesService) === 'function' && _g) || Object])
    ], RoleNewComponent);
    return RoleNewComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.RoleNewComponent = RoleNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-new/role-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Register new Role for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-form [formGroup]=\"registerForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRegistering\" [registerTitle]=\"registerTitle\" (onCancel)=\"cancel()\" (onRegister)=\"register()\"></mc-form>\n        </ba-card>\n    </div>\n</div>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-update/role-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Role_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Role.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var roles_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/roles.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var RoleViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts");
var validators_1 = __webpack_require__("./src/app/theme/validators/index.ts");
var RoleNameEnum = Role_1.Role.RoleNameEnum;
var RoleUpdateComponent = (function () {
    function RoleUpdateComponent(changeDetector, formBuilder, activatedRoute, navigationService, notifications, rolesService, orgService) {
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.rolesService = rolesService;
        this.orgService = orgService;
        this.showModal = false;
        this.isLoading = true;
        this.isUpdating = false;
        this.updateTitle = 'Update role';
    }
    RoleUpdateComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.isUpdating = false;
        this.loadMyOrganization();
    };
    RoleUpdateComponent.prototype.ngOnDestroy = function () {
        this.changeDetector.detach();
    };
    RoleUpdateComponent.prototype.cancel = function () {
        this.navigationService.navigateToRole(this.role.id);
    };
    RoleUpdateComponent.prototype.update = function () {
        this.modalDescription = 'Are you sure you want to update this role?';
        this.showModal = true;
    };
    RoleUpdateComponent.prototype.updateForSure = function () {
        this.isUpdating = true;
        this.role.roleName = this.updateForm.value.roleName;
        this.updateRole();
    };
    RoleUpdateComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    RoleUpdateComponent.prototype.updateRole = function () {
        var _this = this;
        this.rolesService.updateRole(this.organization.mrn, this.role.id, this.role).subscribe(function () {
            _this.navigationService.navigateToRole(_this.role.id);
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update role', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleUpdateComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.loadRole();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleUpdateComponent.prototype.loadRole = function () {
        var _this = this;
        var roleId = this.activatedRoute.snapshot.params['id'];
        this.rolesService.getRole(this.organization.mrn, roleId).subscribe(function (role) {
            _this.role = role;
            _this.roleName = role.roleName;
            _this.generateForm();
            _this.isLoading = false;
            _this.changeDetector.detectChanges();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get role', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    RoleUpdateComponent.prototype.generateForm = function () {
        var _this = this;
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = {
            formGroup: this.updateForm,
            elementId: 'permission',
            controlType: mcFormControlModel_1.McFormControlType.Text,
            labelName: 'Permission',
            placeholder: '',
            isDisabled: true
        };
        var formControl = new forms_1.FormControl(this.role.permission, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        var selectValues = this.selectValues();
        var formControlModelSelect = { selectValues: selectValues, formGroup: this.updateForm, elementId: 'roleName', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Role Name', validator: validators_1.SelectValidator.validate, showCheckmark: true };
        formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);
        formControl.valueChanges.subscribe(function (param) {
            if (param && _this.roleName != param) {
                _this.roleName = param;
                _this.generateForm();
            }
        });
        this.updateForm.addControl(formControlModelSelect.elementId, formControl);
        this.formControlModels.push(formControlModelSelect);
        this.changeDetector.detectChanges();
    };
    RoleUpdateComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose Role...', isSelected: this.roleName == null });
        var allRoleNames = RoleViewModel_1.RoleViewModel.getAllRoleNames();
        allRoleNames.forEach(function (roleName) {
            var isSelected = RoleNameEnum[roleName.value] === RoleNameEnum[_this.roleName];
            selectValues.push({ value: roleName.value, label: roleName.label, isSelected: isSelected });
        });
        return selectValues;
    };
    RoleUpdateComponent.prototype.selectedValue = function (selectValues) {
        selectValues.forEach(function (selectModel) {
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        });
        return '';
    };
    RoleUpdateComponent = __decorate([
        core_1.Component({
            selector: 'role-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-update/role-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _a) || Object, (typeof (_b = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object, (typeof (_f = typeof roles_service_1.RolesService !== 'undefined' && roles_service_1.RolesService) === 'function' && _f) || Object, (typeof (_g = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _g) || Object])
    ], RoleUpdateComponent);
    return RoleUpdateComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.RoleUpdateComponent = RoleUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/components/role-update/role-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n    <div class=\"col-lg-12\">\n        <ba-card title=\"Update Role - {{role?.permission}}\" baCardClass=\"with-scroll table-panel\">\n            <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n        </ba-card>\n    </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"updateForSure()\" [show]=\"showModal\" [title]=\"'Update role'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Update'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/roles.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var RolesComponent = (function () {
    function RolesComponent() {
    }
    RolesComponent = __decorate([
        core_1.Component({
            selector: 'roles',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], RolesComponent);
    return RolesComponent;
}());
exports.RolesComponent = RolesComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/roles.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var roles_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/roles.routing.ts");
var roles_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/roles.component.ts");
var role_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-list/role-list.component.ts");
var role_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-new/role-new.component.ts");
var role_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-details/role-details.component.ts");
var role_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-update/role-update.component.ts");
var RolesModule = (function () {
    function RolesModule() {
    }
    RolesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                roles_routing_1.routing
            ],
            declarations: [
                roles_component_1.RolesComponent,
                role_list_component_1.RoleListComponent,
                role_new_component_1.RoleNewComponent,
                role_details_component_1.RoleDetailsComponent,
                role_update_component_1.RoleUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], RolesModule);
    return RolesModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RolesModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/roles.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var roles_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/roles.component.ts");
var role_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-list/role-list.component.ts");
var role_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-new/role-new.component.ts");
var role_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-details/role-details.component.ts");
var role_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/roles/components/role-update/role-update.component.ts");
var routes = [
    {
        path: 'roles',
        component: roles_component_1.RolesComponent,
        data: { breadcrumb: 'Roles' },
        children: [
            {
                path: '',
                component: role_list_component_1.RoleListComponent
            },
            {
                path: 'register',
                component: role_new_component_1.RoleNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: role_details_component_1.RoleDetailsComponent,
                data: { breadcrumb: 'Details' }
            },
            {
                path: 'update/:id',
                component: role_update_component_1.RoleUpdateComponent,
                data: { breadcrumb: 'Update' }
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var enums_helper_1 = __webpack_require__("./src/app/shared/enums-helper.ts");
var Role_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Role.ts");
var RoleNameEnum = Role_1.Role.RoleNameEnum;
var RoleViewModel = (function () {
    function RoleViewModel() {
    }
    RoleViewModel.getAllRoleNames = function () {
        var models = [];
        var keysAndValues = enums_helper_1.EnumsHelper.getKeysAndValuesFromEnum(RoleNameEnum);
        keysAndValues.forEach(function (enumKeyAndValue) {
            var model = {};
            if (enumKeyAndValue.value != RoleNameEnum.APPROVEORG && enumKeyAndValue.value != RoleNameEnum.SITEADMIN) {
                model.value = enumKeyAndValue.value;
                model.label = RoleViewModel.getLabelForEnum(enumKeyAndValue.value);
                models.push(model);
            }
        });
        return models;
    };
    RoleViewModel.getLabelForEnum = function (roleNameEnum) {
        if (!roleNameEnum) {
            return '';
        }
        var text = '';
        switch (roleNameEnum) {
            case RoleNameEnum.ORGADMIN: {
                text = 'Org Admin';
                break;
            }
            case RoleNameEnum.ENTITYADMIN: {
                text = 'Entity Admin';
                break;
            }
            case RoleNameEnum.SERVICEADMIN: {
                text = 'Service Admin';
                break;
            }
            case RoleNameEnum.USER: {
                text = 'User';
                break;
            }
            case RoleNameEnum.USERADMIN: {
                text = 'User Admin';
                break;
            }
            case RoleNameEnum.VESSELADMIN: {
                text = 'Vessel Admin';
                break;
            }
            case RoleNameEnum.DEVICEADMIN: {
                text = 'Device Admin';
                break;
            }
            case RoleNameEnum.APPROVEORG: {
                text = 'Approve Admin';
                break;
            }
            case RoleNameEnum.SITEADMIN: {
                text = 'Site Admin';
                break;
            }
            default: {
                text = '';
                break;
            }
        }
        return text;
    };
    return RoleViewModel;
}());
exports.RoleViewModel = RoleViewModel;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var id_services_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/id-services.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var ServiceDetailsComponent = (function () {
    function ServiceDetailsComponent(route, servicesService, router, notifications, navigationHelper) {
        this.route = route;
        this.servicesService = servicesService;
        this.router = router;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
    }
    ServiceDetailsComponent.prototype.ngOnInit = function () {
        this.loadService();
    };
    ServiceDetailsComponent.prototype.loadService = function () {
        var _this = this;
        this.isLoading = true;
        var mrn = this.route.snapshot.params['id'];
        var version = this.route.snapshot.queryParams['serviceVersion'];
        this.servicesService.getIdService(mrn, version).subscribe(function (service) {
            _this.service = service;
            _this.title = service.name;
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the service', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateIdService(this.service.mrn, this.service.instanceVersion);
    };
    ServiceDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete the service?';
        this.showModal = true;
    };
    ServiceDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    ServiceDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoading = true;
        this.showModal = false;
        this.servicesService.deleteIdService(this.service.mrn, this.service.instanceVersion).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete the service', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceDetailsComponent = __decorate([
        core_1.Component({
            selector: 'service-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-details/service-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof id_services_service_1.IdServicesService !== 'undefined' && id_services_service_1.IdServicesService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _e) || Object])
    ], ServiceDetailsComponent);
    return ServiceDetailsComponent;
    var _a, _b, _c, _d, _e;
}());
exports.ServiceDetailsComponent = ServiceDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-details/service-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <service-details-view [shouldShowDelete]=\"true\" (updateAction)=\"update()\" (deleteAction)=\"delete()\" [isLoading]=\"isLoading\" [title]=\"title\" [service]=\"service\"></service-details-view>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete service'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var id_services_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/id-services.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var app_constants_1 = __webpack_require__("./src/app/shared/app.constants.ts");
var ServiceListComponent = (function () {
    function ServiceListComponent(authService, router, route, servicesService, orgService, notifications, navigationHelper) {
        this.authService = authService;
        this.router = router;
        this.route = route;
        this.servicesService = servicesService;
        this.orgService = orgService;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.KEY_NEW = 'KEY_NEW_SERVICE';
    }
    ServiceListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadServices();
    };
    ServiceListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceListComponent.prototype.loadServices = function () {
        var _this = this;
        this.servicesService.getIdServices().subscribe(function (pageService) {
            _this.services = pageService.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get services', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.navigationHelper.navigateToCreateIdService();
        }
        else {
            var serviceMrnAndVersion = entityModel.entityId.split(app_constants_1.TOKEN_DELIMITER);
            this.navigationHelper.navigateToService(serviceMrnAndVersion[0], serviceMrnAndVersion[1]);
        }
    };
    ServiceListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.services) {
            this.services.forEach(function (service) {
                if (service.instanceVersion) {
                    _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(service), entityId: service.mrn + app_constants_1.TOKEN_DELIMITER + service.instanceVersion, title: service.name });
                }
            });
        }
        if (this.authService.authState.hasPermission(auth_service_1.AuthPermission.ServiceAdmin)) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Service', isAdd: true });
        }
    };
    ServiceListComponent.prototype.createImgObservable = function (service) {
        var imageSrc = 'assets/img/no_service.svg';
        return rxjs_1.Observable.create(function (observer) {
            observer.next(imageSrc);
        });
    };
    ServiceListComponent = __decorate([
        core_1.Component({
            selector: 'service-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-list/service-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof id_services_service_1.IdServicesService !== 'undefined' && id_services_service_1.IdServicesService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _g) || Object])
    ], ServiceListComponent);
    return ServiceListComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.ServiceListComponent = ServiceListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-list/service-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Services for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mrn_helper_service_1 = __webpack_require__("./src/app/shared/mrn-helper.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var id_services_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/id-services.service.ts");
var Service_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Service.ts");
var ServiceViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts");
var select_validator_1 = __webpack_require__("./src/app/theme/validators/select.validator.ts");
var OidcAccessTypeEnum = Service_1.Service.OidcAccessTypeEnum;
var vessel_helper_1 = __webpack_require__("./src/app/pages/shared/services/vessel-helper.ts");
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var ServiceNewComponent = (function () {
    function ServiceNewComponent(formBuilder, activatedRoute, navigationService, notifications, orgService, servicesService, mrnHelper, vesselsService) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.servicesService = servicesService;
        this.vesselsService = vesselsService;
        this.isPrefilled = false;
        // McForm params
        this.useOIDCRedirect = true;
        this.useOIDC = false;
        this.oidcAccessType = null;
        this.linkToVessel = false;
        this.isLoading = true;
        this.isRegistering = false;
        this.registerTitle = "Register Service";
        this.registerButtonClass = "btn btn-danger btn-raised";
        this.mrnMask = mrnHelper.mrnMaskForInstance();
        this.mrnPattern = mrnHelper.mrnPattern();
        this.mrnPatternError = mrnHelper.mrnPatternError();
        this.mrn = this.mrnMask;
    }
    ServiceNewComponent.prototype.ngOnInit = function () {
        this.onRegister = this.register.bind(this);
        this.isRegistering = false;
        this.isLoading = true;
        var mrn = this.activatedRoute.snapshot.queryParams['mrn'];
        var name = this.activatedRoute.snapshot.queryParams['name'];
        var instanceVersion = this.activatedRoute.snapshot.queryParams['instanceVersion'];
        if (name && mrn && instanceVersion) {
            this.isPrefilled = true;
            this.mrn = mrn;
            this.name = name;
            this.instanceVersion = instanceVersion;
        }
        this.loadMyOrganization();
    };
    ServiceNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateService();
    };
    ServiceNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var service = {
            mrn: this.mrn,
            name: this.registerForm.value.name,
            instanceVersion: this.registerForm.value.instanceVersion,
            permissions: this.registerForm.value.permissions,
            certDomainName: this.registerForm.value.certDomainName
        };
        if (this.useOIDC) {
            if (this.useOIDCRedirect) {
                service.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;
            }
            else {
                service.oidcRedirectUri = '';
            }
            var oidcAccessType = this.registerForm.value.oidcAccessType;
            if (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {
                service.oidcAccessType = oidcAccessType;
            }
        }
        else {
            service.oidcAccessType = null;
            service.oidcRedirectUri = null;
        }
        if (this.linkToVessel) {
            service.vessel = this.vessel;
        }
        this.createService(service);
    };
    ServiceNewComponent.prototype.createService = function (service) {
        var _this = this;
        this.servicesService.createIdService(service).subscribe(function (service) {
            if (_this.isPrefilled) {
                _this.cancel();
            }
            else {
                _this.navigationService.navigateToService(service.mrn, service.instanceVersion);
            }
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create service', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.loadVessels();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceNewComponent.prototype.loadVessels = function () {
        var _this = this;
        this.vesselsService.getVessels().subscribe(function (pageVessel) {
            _this.vessels = pageVessel.content;
            _this.generateForm();
            _this.isLoading = false;
        }, function (error) {
            _this.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', mc_notifications_service_1.MCNotificationType.Error, error);
            _this.cancel();
        });
    };
    ServiceNewComponent.prototype.shouldLinkToVessel = function (linkToVessel) {
        this.linkToVessel = linkToVessel;
        this.generateForm();
    };
    ServiceNewComponent.prototype.shouldUseOIDCRedirect = function (value) {
        if (value && this.oidcAccessType != value) {
            this.oidcAccessType = value;
            this.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;
            this.generateForm();
        }
    };
    ServiceNewComponent.prototype.shouldUseOIDC = function (useOIDC) {
        this.useOIDC = useOIDC;
        this.generateForm();
    };
    ServiceNewComponent.prototype.generateMRN = function (idValue) {
        var mrn = (idValue ? idValue : '');
        var valueNoSpaces = mrn.split(' ').join('').toLowerCase();
        this.mrn = this.mrnMask + valueNoSpaces;
        this.registerForm.patchValue({ mrn: this.mrn });
    };
    ServiceNewComponent.prototype.isFormValid = function () {
        var oidcTypeValid = true;
        var oidcAccessType = this.registerForm.value.oidcAccessType;
        if (this.useOIDC && (!oidcAccessType || oidcAccessType.toLowerCase().indexOf('undefined') >= 0)) {
            oidcTypeValid = false;
        }
        return this.registerForm.valid && oidcTypeValid;
    };
    ServiceNewComponent.prototype.generateForm = function () {
        var _this = this;
        var oldForm = this.registerForm;
        this.registerForm = this.formBuilder.group({});
        if (!oldForm) {
            oldForm = this.registerForm;
        }
        this.formControlModels = [];
        var formControlModel = { formGroup: this.registerForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.mrn, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        if (!this.isPrefilled) {
            formControlModel = { formGroup: this.registerForm, elementId: 'serviceId', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Service ID', placeholder: 'Enter Service ID to generate MRN', validator: forms_1.Validators.required, pattern: this.mrnPattern, errorText: this.mrnPatternError };
            formControl = new forms_1.FormControl(oldForm.value.serviceId, formControlModel.validator);
            formControl.valueChanges.subscribe(function (param) { return _this.generateMRN(param); });
            this.registerForm.addControl(formControlModel.elementId, formControl);
            this.formControlModels.push(formControlModel);
        }
        if (this.isPrefilled) {
            formControlModel = { formGroup: this.registerForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true };
            formControl = new forms_1.FormControl(this.name, formControlModel.validator);
        }
        else {
            formControlModel = { formGroup: this.registerForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator: forms_1.Validators.required };
            formControl = new forms_1.FormControl(oldForm.value.name, formControlModel.validator);
        }
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        if (this.isPrefilled) {
            formControlModel = { formGroup: this.registerForm, elementId: 'instanceVersion', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Version', placeholder: '', isDisabled: true };
            formControl = new forms_1.FormControl(this.instanceVersion, formControlModel.validator);
        }
        else {
            formControlModel = { formGroup: this.registerForm, elementId: 'instanceVersion', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Version', placeholder: 'Version is required', validator: forms_1.Validators.required };
            formControl = new forms_1.FormControl(oldForm.value.instanceVersion, formControlModel.validator);
        }
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl(oldForm.value.permissions, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'certDomainName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Certificate domain name', placeholder: '' };
        formControl = new forms_1.FormControl(oldForm.value.certDomainName, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        var formControlModelCheckbox = { state: this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: mcFormControlModel_1.McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)' };
        formControl = new forms_1.FormControl({ value: formControlModelCheckbox.state, disabled: false }, formControlModelCheckbox.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.shouldUseOIDC(param); });
        this.registerForm.addControl(formControlModelCheckbox.elementId, formControl);
        this.formControlModels.push(formControlModelCheckbox);
        if (this.useOIDC) {
            var selectValues = this.selectValues();
            var formControlModelSelect = { selectValues: selectValues, formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Access type', placeholder: '', validator: select_validator_1.SelectValidator.validate, showCheckmark: true };
            formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);
            formControl.valueChanges.subscribe(function (param) { return _this.shouldUseOIDCRedirect(param); });
            this.registerForm.addControl(formControlModelSelect.elementId, formControl);
            this.formControlModels.push(formControlModelSelect);
            if (this.useOIDCRedirect) {
                formControlModel = { formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator: forms_1.Validators.required, errorText: 'URI is required' };
                formControl = new forms_1.FormControl(oldForm.value.oidcRedirectUri, formControlModel.validator);
                this.registerForm.addControl(formControlModel.elementId, formControl);
                this.formControlModels.push(formControlModel);
            }
        }
        var linkToVesselCheckbox = { state: this.linkToVessel, formGroup: this.registerForm, elementId: 'linkToVessel', controlType: mcFormControlModel_1.McFormControlType.Checkbox, labelName: 'Link to a vessel' };
        formControl = new forms_1.FormControl({ value: linkToVesselCheckbox.state, disabled: false }, linkToVesselCheckbox.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.shouldLinkToVessel(param); });
        this.registerForm.addControl(linkToVesselCheckbox.elementId, formControl);
        this.formControlModels.push(linkToVesselCheckbox);
        if (this.linkToVessel) {
            var selectValues = this.vesselSelectValues();
            var vesselSelect = { selectValues: selectValues, formGroup: this.registerForm, elementId: 'vesselSelect', controlType: mcFormControlModel_1.McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false };
            formControl = new forms_1.FormControl(this.selectedValue(selectValues), vesselSelect.validator);
            formControl.valueChanges.subscribe(function (param) {
                if (param) {
                    _this.vessel = param;
                }
            });
            this.registerForm.addControl(vesselSelect.elementId, formControl);
            this.formControlModels.push(vesselSelect);
        }
    };
    ServiceNewComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose access type...', isSelected: this.oidcAccessType == null });
        var allOidcTypes = ServiceViewModel_1.ServiceViewModel.getAllOidcAccessTypes();
        allOidcTypes.forEach(function (oidcType) {
            var isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[_this.oidcAccessType];
            selectValues.push({ value: oidcType.value, label: oidcType.label, isSelected: isSelected });
        });
        return selectValues;
    };
    ServiceNewComponent.prototype.vesselSelectValues = function () {
        var _this = this;
        var selectValues = [];
        var defaultSelected = true;
        if (this.vessels && this.vessels.length > 0) {
            this.vessels.forEach(function (vessel) {
                var isSelected = false;
                if (_this.vessel) {
                    isSelected = _this.vessel.mrn === vessel.mrn;
                }
                else {
                    isSelected = defaultSelected;
                    defaultSelected = false;
                }
                selectValues.push({ value: vessel, label: vessel_helper_1.VesselHelper.labelForSelect(vessel), isSelected: isSelected });
            });
        }
        return selectValues;
    };
    ServiceNewComponent.prototype.selectedValue = function (selectValues) {
        for (var _i = 0, selectValues_1 = selectValues; _i < selectValues_1.length; _i++) {
            var selectModel = selectValues_1[_i];
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        }
        return '';
    };
    ServiceNewComponent = __decorate([
        core_1.Component({
            selector: 'service-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-new/service-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof id_services_service_1.IdServicesService !== 'undefined' && id_services_service_1.IdServicesService) === 'function' && _f) || Object, (typeof (_g = typeof mrn_helper_service_1.MrnHelperService !== 'undefined' && mrn_helper_service_1.MrnHelperService) === 'function' && _g) || Object, (typeof (_h = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _h) || Object])
    ], ServiceNewComponent);
    return ServiceNewComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h;
}());
exports.ServiceNewComponent = ServiceNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-new/service-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Register new Service for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [hideButtons]=\"true\" [formGroup]=\"registerForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\"></mc-form>\n\n      <ul *ngIf=\"registerForm\" class=\"btn-list clearfix\">\n        <li>\n          <mc-loading-button [class]=\"registerButtonClass\" [disabled]=\"!isFormValid()\" [isLoading]=\"isRegistering\" [title]=\"registerTitle\" [onClick]=\"onRegister\" ></mc-loading-button>\n        </li>\n        <li>\n          <button type=\"button\" class=\"btn btn-default btn-raised\" (click)=\"cancel()\">Cancel</button>\n        </li>\n      </ul>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mrn_helper_service_1 = __webpack_require__("./src/app/shared/mrn-helper.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var id_services_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/id-services.service.ts");
var Service_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Service.ts");
var ServiceViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts");
var select_validator_1 = __webpack_require__("./src/app/theme/validators/select.validator.ts");
var OidcAccessTypeEnum = Service_1.Service.OidcAccessTypeEnum;
var util_1 = __webpack_require__("./node_modules/util/util.js");
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var vessel_helper_1 = __webpack_require__("./src/app/pages/shared/services/vessel-helper.ts");
var ServiceUpdateComponent = (function () {
    function ServiceUpdateComponent(formBuilder, activatedRoute, navigationService, notifications, servicesService, mrnHelper, vesselsService) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.servicesService = servicesService;
        this.vesselsService = vesselsService;
        this.showModal = false;
        this.showModalVesselAtt = false;
        // McForm params
        this.useOIDC = false;
        this.useOIDCRedirect = true;
        this.linkToVessel = false;
        this.isLoading = true;
        this.isUpdating = false;
        this.updateTitle = "Update";
    }
    ServiceUpdateComponent.prototype.ngOnInit = function () {
        this.isUpdating = false;
        this.isLoading = true;
        this.loadIdService();
    };
    ServiceUpdateComponent.prototype.loadIdService = function () {
        var _this = this;
        var mrn = this.activatedRoute.snapshot.params['id'];
        var version = this.activatedRoute.snapshot.queryParams['instanceVersion'];
        this.servicesService.getIdService(mrn, version).subscribe(function (idService) {
            _this.idService = idService;
            _this.useOIDC = _this.idService.oidcAccessType != undefined;
            _this.useOIDCRedirect = (_this.idService.oidcAccessType && _this.idService.oidcAccessType != OidcAccessTypeEnum.BearerOnly);
            _this.linkToVessel = !util_1.isNullOrUndefined(_this.idService.vessel);
            _this.permissions = _this.idService.permissions;
            _this.certDomainName = _this.idService.certDomainName;
            _this.oidcRedirectUri = _this.idService.oidcRedirectUri;
            if (_this.linkToVessel) {
                _this.vessel = _this.idService.vessel;
            }
            _this.loadVessels();
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get the service', mc_notifications_service_1.MCNotificationType.Error, err);
            _this.navigationService.navigateToService(mrn, version);
        });
    };
    ServiceUpdateComponent.prototype.loadVessels = function () {
        var _this = this;
        this.vesselsService.getVessels().subscribe(function (pageVessel) {
            _this.vessels = pageVessel.content;
            _this.generateForm();
            _this.isLoading = false;
        }, function (error) {
            _this.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', mc_notifications_service_1.MCNotificationType.Error, error);
            _this.navigationService.navigateToService(_this.idService.mrn, _this.idService.instanceVersion);
        });
    };
    ServiceUpdateComponent.prototype.cancel = function () {
        this.navigationService.gobackFromUpdateService();
    };
    ServiceUpdateComponent.prototype.update = function () {
        if (this.hasActiveCertificate()) {
            this.modalDescription = "<b>Certificates</b> will be <b>invalid</b> if you update the service.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?";
            this.showModal = true;
        }
        else {
            this.showVesselAttWarning();
        }
    };
    ServiceUpdateComponent.prototype.showVesselAttWarning = function () {
        if (this.linkToVessel && this.isNewVessel()) {
            this.showModal = false;
            this.modalDescription = "The linked Vessel has changed. You should change the IMO and MMSI in the Instance XML as well.<br><br>Would you still like to update?";
            this.showModalVesselAtt = true;
        }
        else {
            this.updateForSure();
        }
    };
    ServiceUpdateComponent.prototype.isNewVessel = function () {
        if (this.vessel && this.idService.vessel) {
            return this.vessel.mrn !== this.idService.vessel.mrn;
        }
        else {
            return true;
        }
    };
    ServiceUpdateComponent.prototype.hasActiveCertificate = function () {
        if (this.idService.certificates && this.idService.certificates.length > 0) {
            for (var _i = 0, _a = this.idService.certificates; _i < _a.length; _i++) {
                var certificate = _a[_i];
                if (!certificate.revoked) {
                    return true;
                }
            }
        }
        return false;
    };
    ServiceUpdateComponent.prototype.cancelModal = function () {
        this.showModal = false;
        this.showModalVesselAtt = false;
    };
    ServiceUpdateComponent.prototype.updateForSure = function () {
        this.isUpdating = true;
        this.updateValues(true);
        this.updateIdService(this.idService);
    };
    ServiceUpdateComponent.prototype.updateValues = function (overwriteOidc) {
        this.idService.name = this.updateForm.value.name;
        this.idService.permissions = this.updateForm.value.permissions;
        this.idService.certDomainName = this.updateForm.value.certDomainName;
        if (this.linkToVessel) {
            this.idService.vessel = this.updateForm.value.vesselSelect;
        }
        else {
            this.idService.vessel = null;
        }
        if (overwriteOidc) {
            if (this.useOIDC) {
                if (this.useOIDCRedirect) {
                    this.idService.oidcRedirectUri = this.updateForm.value.oidcRedirectUri;
                }
                else {
                    this.idService.oidcRedirectUri = '';
                }
                var oidcAccessType = this.updateForm.value.oidcAccessType;
                if (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {
                    this.idService.oidcAccessType = oidcAccessType;
                }
                else {
                    this.idService.oidcAccessType = null;
                }
            }
            else {
                this.idService.oidcAccessType = null;
                this.idService.oidcRedirectUri = null;
                this.idService.oidcClientId = null;
                this.idService.oidcClientSecret = null;
            }
        }
    };
    ServiceUpdateComponent.prototype.updateIdService = function (service) {
        var _this = this;
        this.servicesService.updateIdService(service).subscribe(function (_) {
            _this.isUpdating = false;
            _this.navigationService.gobackFromUpdateService();
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update service', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceUpdateComponent.prototype.shouldUseOIDCRedirect = function (value) {
        if (value && this.idService.oidcAccessType != value) {
            this.idService.oidcAccessType = value;
            this.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;
            this.generateForm();
        }
    };
    ServiceUpdateComponent.prototype.shouldUseOIDC = function (useOIDC) {
        this.useOIDC = useOIDC;
        this.updateValues(false);
        this.generateForm();
    };
    ServiceUpdateComponent.prototype.shouldLinkToVessel = function (linkToVessel) {
        this.linkToVessel = linkToVessel;
        this.generateForm();
    };
    ServiceUpdateComponent.prototype.generateForm = function () {
        var _this = this;
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.updateForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.idService.mrn, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true };
        formControl = new forms_1.FormControl(this.idService.name, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl(this.permissions, formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.permissions = param; });
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'certDomainName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Certificate domain name', placeholder: '' };
        formControl = new forms_1.FormControl(this.certDomainName, formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.certDomainName = param; });
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        var formControlModelCheckbox = { state: this.useOIDC, formGroup: this.updateForm, elementId: 'useOIDC', controlType: mcFormControlModel_1.McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)' };
        formControl = new forms_1.FormControl({ value: "\"" + formControlModelCheckbox.state + "\"", disabled: false }, formControlModelCheckbox.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.shouldUseOIDC(param); });
        this.updateForm.addControl(formControlModelCheckbox.elementId, formControl);
        this.formControlModels.push(formControlModelCheckbox);
        if (this.useOIDC) {
            var selectValues = this.selectValues();
            var formControlModelSelect = { selectValues: selectValues, formGroup: this.updateForm, elementId: 'oidcAccessType', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: 'Access type', placeholder: '', validator: select_validator_1.SelectValidator.validate, showCheckmark: true };
            formControl = new forms_1.FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);
            formControl.valueChanges.subscribe(function (param) { return _this.shouldUseOIDCRedirect(param); });
            this.updateForm.addControl(formControlModelSelect.elementId, formControl);
            this.formControlModels.push(formControlModelSelect);
            if (this.useOIDCRedirect) {
                formControlModel = { formGroup: this.updateForm, elementId: 'oidcRedirectUri', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator: forms_1.Validators.required, errorText: 'URI is required' };
                formControl = new forms_1.FormControl(this.oidcRedirectUri, formControlModel.validator);
                formControl.valueChanges.subscribe(function (param) { return _this.oidcRedirectUri = param; });
                this.updateForm.addControl(formControlModel.elementId, formControl);
                this.formControlModels.push(formControlModel);
            }
        }
        var linkToVesselCheckbox = { state: this.linkToVessel, formGroup: this.updateForm, elementId: 'linkToVessel', controlType: mcFormControlModel_1.McFormControlType.Checkbox, labelName: 'Link to a vessel' };
        formControl = new forms_1.FormControl({ value: linkToVesselCheckbox.state, disabled: false }, linkToVesselCheckbox.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.shouldLinkToVessel(param); });
        this.updateForm.addControl(linkToVesselCheckbox.elementId, formControl);
        this.formControlModels.push(linkToVesselCheckbox);
        if (this.linkToVessel) {
            var selectValues = this.vesselSelectValues();
            var vesselSelect = { selectValues: selectValues, formGroup: this.updateForm, elementId: 'vesselSelect', controlType: mcFormControlModel_1.McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false };
            formControl = new forms_1.FormControl(this.selectedValue(selectValues));
            formControl.valueChanges.subscribe(function (param) {
                if (param) {
                    _this.vessel = param;
                }
            });
            this.updateForm.addControl(vesselSelect.elementId, formControl);
            this.formControlModels.push(vesselSelect);
        }
    };
    ServiceUpdateComponent.prototype.selectedValue = function (selectValues) {
        for (var _i = 0, selectValues_1 = selectValues; _i < selectValues_1.length; _i++) {
            var selectModel = selectValues_1[_i];
            if (selectModel.isSelected) {
                return selectModel.value;
            }
        }
        return '';
    };
    ServiceUpdateComponent.prototype.selectValues = function () {
        var _this = this;
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose access type...', isSelected: this.idService.oidcAccessType == null });
        var allOidcTypes = ServiceViewModel_1.ServiceViewModel.getAllOidcAccessTypes();
        allOidcTypes.forEach(function (oidcType) {
            var isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[_this.idService.oidcAccessType];
            selectValues.push({ value: oidcType.value, label: oidcType.label, isSelected: isSelected });
        });
        return selectValues;
    };
    ServiceUpdateComponent.prototype.vesselSelectValues = function () {
        var _this = this;
        var selectValues = [];
        var defaultSelected = true;
        if (this.vessels && this.vessels.length > 0) {
            this.vessels.forEach(function (vessel) {
                var isSelected = false;
                if (_this.vessel) {
                    isSelected = _this.vessel.mrn === vessel.mrn;
                }
                else {
                    isSelected = defaultSelected;
                    defaultSelected = false;
                }
                selectValues.push({ value: vessel, label: vessel_helper_1.VesselHelper.labelForSelect(vessel), isSelected: isSelected });
            });
        }
        return selectValues;
    };
    ServiceUpdateComponent = __decorate([
        core_1.Component({
            selector: 'service-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-update/service-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof id_services_service_1.IdServicesService !== 'undefined' && id_services_service_1.IdServicesService) === 'function' && _e) || Object, (typeof (_f = typeof mrn_helper_service_1.MrnHelperService !== 'undefined' && mrn_helper_service_1.MrnHelperService) === 'function' && _f) || Object, (typeof (_g = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _g) || Object])
    ], ServiceUpdateComponent);
    return ServiceUpdateComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.ServiceUpdateComponent = ServiceUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/components/service-update/service-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Update - {{idService?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"showVesselAttWarning()\" [show]=\"showModal\" [title]=\"'Update service'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Update'\"></mc-modal>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"updateForSure()\" [show]=\"showModalVesselAtt\" [title]=\"'Update service'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Update'\"></mc-modal>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/services/services.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var ServicesComponent = (function () {
    function ServicesComponent() {
    }
    ServicesComponent = __decorate([
        core_1.Component({
            selector: 'services',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], ServicesComponent);
    return ServicesComponent;
}());
exports.ServicesComponent = ServicesComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/services.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var services_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/services.routing.ts");
var services_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/services.component.ts");
var service_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts");
var service_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var service_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts");
var service_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts");
var ServicesModule = (function () {
    function ServicesModule() {
    }
    ServicesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                services_routing_1.routing
            ],
            declarations: [
                services_component_1.ServicesComponent,
                service_details_component_1.ServiceDetailsComponent,
                service_list_component_1.ServiceListComponent,
                service_new_component_1.ServiceNewComponent,
                service_update_component_1.ServiceUpdateComponent
            ],
            exports: [
                service_new_component_1.ServiceNewComponent,
                service_update_component_1.ServiceUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], ServicesModule);
    return ServicesModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ServicesModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/services.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var services_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/services.component.ts");
var service_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts");
var service_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts");
var service_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts");
var certificate_issue_new_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts");
var service_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts");
var certificate_revoke_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts");
// noinspection TypeScriptValidateTypes
var routes = [
    {
        path: 'services',
        component: services_component_1.ServicesComponent,
        data: { breadcrumb: 'Services' },
        children: [
            {
                path: '',
                component: service_list_component_1.ServiceListComponent
            },
            {
                path: 'issuecert',
                component: certificate_issue_new_component_1.CertificateIssueNewComponent,
                data: { breadcrumb: 'New Certificate' },
                children: []
            },
            {
                path: 'revokecert',
                component: certificate_revoke_component_1.CertificateRevokeComponent,
                data: { breadcrumb: 'Revoke Certificate' },
                children: []
            },
            {
                path: 'register',
                component: service_new_component_1.ServiceNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: service_details_component_1.ServiceDetailsComponent,
                data: { breadcrumb: 'Details' }
            },
            {
                path: 'update/:id',
                component: service_update_component_1.ServiceUpdateComponent,
                data: { breadcrumb: 'Update' }
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var enums_helper_1 = __webpack_require__("./src/app/shared/enums-helper.ts");
var Service_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Service.ts");
var OidcAccessTypeEnum = Service_1.Service.OidcAccessTypeEnum;
var ServiceViewModel = (function () {
    function ServiceViewModel() {
    }
    ServiceViewModel.getAllOidcAccessTypes = function () {
        var models = [];
        var keysAndValues = enums_helper_1.EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);
        keysAndValues.forEach(function (enumKeyAndValue) {
            var model = {};
            model.value = enumKeyAndValue.value;
            model.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);
            models.push(model);
        });
        return models;
    };
    ServiceViewModel.getLabelForEnum = function (oidcAccessTypeEnum) {
        if (!oidcAccessTypeEnum) {
            return '';
        }
        var text = '';
        switch (oidcAccessTypeEnum) {
            case OidcAccessTypeEnum.BearerOnly: {
                text = 'Bearer only';
                break;
            }
            case OidcAccessTypeEnum.Confidential: {
                text = 'Confidential';
                break;
            }
            case OidcAccessTypeEnum.Public: {
                text = 'Public';
                break;
            }
            default: {
                text = OidcAccessTypeEnum[oidcAccessTypeEnum];
                if (!text) {
                    text = '' + oidcAccessTypeEnum;
                }
            }
        }
        return text;
    };
    return ServiceViewModel;
}());
exports.ServiceViewModel = ServiceViewModel;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-details/user-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var users_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/users.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var Organization_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Organization.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var FederationTypeEnum = Organization_1.Organization.FederationTypeEnum;
var UserDetailsComponent = (function () {
    function UserDetailsComponent(authService, route, router, usersService, organizationService, notifications, navigationHelper) {
        this.authService = authService;
        this.route = route;
        this.router = router;
        this.usersService = usersService;
        this.organizationService = organizationService;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
    }
    UserDetailsComponent.prototype.ngOnInit = function () {
        this.entityType = certificate_helper_service_1.CertificateEntityType.User;
        this.loadOrganization();
        this.loadUser();
    };
    UserDetailsComponent.prototype.loadUser = function () {
        var _this = this;
        this.isLoading = true;
        var mrn = this.route.snapshot.params['id'];
        this.usersService.getUser(mrn).subscribe(function (user) {
            _this.user = user;
            _this.title = user.firstName + " " + user.lastName;
            _this.isLoading = false;
            _this.generateLabelValues();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the user', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserDetailsComponent.prototype.loadOrganization = function () {
        var _this = this;
        this.organizationService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
        });
    };
    UserDetailsComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        if (this.user) {
            this.labelValues.push({ label: 'MRN', valueHtml: this.user.mrn });
            this.labelValues.push({ label: 'First Name', valueHtml: this.user.firstName });
            this.labelValues.push({ label: 'Last Name', valueHtml: this.user.lastName });
            this.labelValues.push({ label: 'Email', valueHtml: this.user.email });
            this.labelValues.push({ label: 'Permissions', valueHtml: this.user.permissions });
        }
    };
    UserDetailsComponent.prototype.showUpdate = function () {
        if (!this.organization) {
            return false;
        }
        return this.isAdmin() && this.organization.federationType === FederationTypeEnum.TestIdp;
    };
    UserDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateUser(this.user.mrn);
    };
    UserDetailsComponent.prototype.showDelete = function () {
        return this.isAdmin() && this.user != null;
    };
    UserDetailsComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.UserAdmin);
    };
    UserDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete the user?';
        this.showModal = true;
    };
    UserDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    UserDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoading = true;
        this.showModal = false;
        this.usersService.deleteUser(this.user.mrn).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete the user', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserDetailsComponent = __decorate([
        core_1.Component({
            selector: 'user-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-details/user-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _c) || Object, (typeof (_d = typeof users_service_1.UsersService !== 'undefined' && users_service_1.UsersService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _g) || Object])
    ], UserDetailsComponent);
    return UserDetailsComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.UserDetailsComponent = UserDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-details/user-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n      <ul *ngIf=\"!isLoading && showDelete() || showUpdate()\" class=\"btn-list clearfix\">\n        <li *ngIf=\"organization && showUpdate()\">\n          <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update user</button>\n        </li>\n        <li *ngIf=\"showDelete()\">\n          <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete user</button>\n        </li>\n      </ul>\n    </ba-card>\n\n    <div *ngIf=\"user\">\n      <ba-card title=\"Certificates for {{title}}\" baCardClass=\"with-scroll table-panel\">\n        <certificates-table [isAdmin]=\"isAdmin()\" [entityMrn]=\"user?.mrn\" [isLoading]=\"isLoading\" [certificateTitle]=\"title\" [certificateEntityType]=\"entityType\" [certificates]=\"user?.certificates\"></certificates-table>\n      </ba-card>\n    </div>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete user'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-list/user-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var Organization_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Organization.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var users_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/users.service.ts");
var FederationTypeEnum = Organization_1.Organization.FederationTypeEnum;
var UserListComponent = (function () {
    function UserListComponent(authService, router, route, usersService, orgService, notifications) {
        this.authService = authService;
        this.router = router;
        this.route = route;
        this.usersService = usersService;
        this.orgService = orgService;
        this.notifications = notifications;
        this.KEY_NEW = 'KEY_NEW_USER';
    }
    UserListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
    };
    UserListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.loadUsers();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserListComponent.prototype.loadUsers = function () {
        var _this = this;
        this.usersService.getUsers().subscribe(function (pageUser) {
            _this.users = pageUser.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get users', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.gotoCreate();
        }
        else {
            this.router.navigate([entityModel.entityId], { relativeTo: this.route });
        }
    };
    UserListComponent.prototype.gotoCreate = function () {
        this.router.navigate(['register'], { relativeTo: this.route });
    };
    UserListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.users) {
            this.users.forEach(function (user) {
                var htmlContent = '&nbsp;';
                if (user.email) {
                    htmlContent = "<a href='mailto:" + user.email + "'>" + user.email + "</a>";
                }
                _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(user), entityId: user.mrn, title: user.firstName + " " + user.lastName, htmlContent: htmlContent });
            });
        }
        if (this.canCreateUser()) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new User', isAdd: true, htmlContent: '&nbsp;' });
        }
    };
    UserListComponent.prototype.canCreateUser = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.UserAdmin) && this.organization.federationType === FederationTypeEnum.TestIdp;
    };
    UserListComponent.prototype.createImgObservable = function (user) {
        var imageSrc = 'assets/img/no_user.png';
        return rxjs_1.Observable.create(function (observer) {
            observer.next(imageSrc);
        });
    };
    UserListComponent = __decorate([
        core_1.Component({
            selector: 'user-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-list/user-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof users_service_1.UsersService !== 'undefined' && users_service_1.UsersService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object])
    ], UserListComponent);
    return UserListComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.UserListComponent = UserListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-list/user-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Users for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-new/user-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mrn_helper_service_1 = __webpack_require__("./src/app/shared/mrn-helper.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var users_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/users.service.ts");
var mc_utils_1 = __webpack_require__("./src/app/shared/mc-utils.ts");
var UserNewComponent = (function () {
    function UserNewComponent(formBuilder, activatedRoute, navigationService, notifications, orgService, usersService, mrnHelper) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.usersService = usersService;
        // McForm params
        this.isLoading = true;
        this.isRegistering = false;
        this.registerTitle = "Register User";
        this.mrnMask = mrnHelper.mrnMaskForUser();
        this.mrnPattern = mrnHelper.mrnPattern();
        this.mrnPatternError = mrnHelper.mrnPatternError();
        this.mrn = this.mrnMask;
    }
    UserNewComponent.prototype.ngOnInit = function () {
        this.isRegistering = false;
        this.isLoading = true;
        this.loadMyOrganization();
    };
    UserNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateUser();
    };
    UserNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var user = {
            mrn: this.mrn,
            firstName: this.userForm.value.firstName,
            lastName: this.userForm.value.lastName,
            permissions: this.userForm.value.permissions,
            email: this.userForm.value.emails.email
        };
        this.createUser(user);
    };
    UserNewComponent.prototype.createUser = function (user) {
        var _this = this;
        this.usersService.createUser(user).subscribe(function (user) {
            _this.navigationService.navigateToUser(user.mrn);
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create user', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserNewComponent.prototype.generateMRN = function (idValue) {
        var mrn = (idValue ? idValue : '');
        var valueNoSpaces = mrn.split(' ').join('').toLowerCase();
        this.mrn = this.mrnMask + valueNoSpaces;
        this.userForm.patchValue({ mrn: this.mrn });
    };
    UserNewComponent.prototype.generateForm = function () {
        var _this = this;
        this.userForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.userForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.mrn, formControlModel.validator);
        this.userForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.userForm, elementId: 'userId', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'User ID', placeholder: 'Enter user ID to generate MRN', validator: forms_1.Validators.required, pattern: this.mrnPattern, errorText: this.mrnPatternError };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.generateMRN(param); });
        this.userForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.userForm, elementId: 'firstName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'First Name', placeholder: 'First Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.userForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.userForm, elementId: 'lastName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Last Name', placeholder: 'Last Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.userForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        mc_utils_1.McUtils.generateEmailConfirmGroup(this.formBuilder, this.userForm, this.formControlModels);
        formControlModel = { formGroup: this.userForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.userForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
    };
    UserNewComponent = __decorate([
        core_1.Component({
            selector: 'user-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-new/user-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof users_service_1.UsersService !== 'undefined' && users_service_1.UsersService) === 'function' && _f) || Object, (typeof (_g = typeof mrn_helper_service_1.MrnHelperService !== 'undefined' && mrn_helper_service_1.MrnHelperService) === 'function' && _g) || Object])
    ], UserNewComponent);
    return UserNewComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.UserNewComponent = UserNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-new/user-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Register new User for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formGroup]=\"userForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRegistering\" [registerTitle]=\"registerTitle\" (onCancel)=\"cancel()\" (onRegister)=\"register()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-update/user-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var users_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/users.service.ts");
var UserUpdateComponent = (function () {
    function UserUpdateComponent(formBuilder, activatedRoute, navigationService, notifications, usersService) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.usersService = usersService;
        // McForm params
        this.isLoading = true;
        this.isUpdating = false;
        this.updateTitle = "Update user";
    }
    UserUpdateComponent.prototype.ngOnInit = function () {
        this.isUpdating = false;
        this.isLoading = true;
        this.loadUser();
    };
    UserUpdateComponent.prototype.cancel = function () {
        var userMrn = (this.user ? this.user.mrn : '');
        this.navigationService.navigateToUser(userMrn);
    };
    UserUpdateComponent.prototype.update = function () {
        this.isUpdating = true;
        this.user.firstName = this.updateForm.value.firstName;
        this.user.lastName = this.updateForm.value.lastName;
        this.user.permissions = this.updateForm.value.permissions;
        this.updateUser(this.user);
    };
    UserUpdateComponent.prototype.updateUser = function (user) {
        var _this = this;
        this.usersService.updateUser(user).subscribe(function (_) {
            _this.isUpdating = false;
            _this.navigationService.navigateToUser(_this.user.mrn);
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update user', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    UserUpdateComponent.prototype.loadUser = function () {
        var _this = this;
        this.isLoading = true;
        var mrn = this.activatedRoute.snapshot.params['id'];
        this.usersService.getUser(mrn).subscribe(function (user) {
            _this.user = user;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the user', mc_notifications_service_1.MCNotificationType.Error, err);
            _this.navigationService.navigateToUser(mrn);
        });
    };
    UserUpdateComponent.prototype.generateForm = function () {
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.updateForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.user.mrn, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'email', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Email', placeholder: '', isDisabled: true };
        formControl = new forms_1.FormControl(this.user.email, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'firstName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'First Name', placeholder: 'First Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl(this.user.firstName, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'lastName', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Last Name', placeholder: 'Last Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl(this.user.lastName, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl(this.user.permissions, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
    };
    UserUpdateComponent = __decorate([
        core_1.Component({
            selector: 'user-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-update/user-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof users_service_1.UsersService !== 'undefined' && users_service_1.UsersService) === 'function' && _e) || Object])
    ], UserUpdateComponent);
    return UserUpdateComponent;
    var _a, _b, _c, _d, _e;
}());
exports.UserUpdateComponent = UserUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/components/user-update/user-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Update User - {{user?.firstName}} {{user?.lastName}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/users/users.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var UsersComponent = (function () {
    function UsersComponent() {
    }
    UsersComponent = __decorate([
        core_1.Component({
            selector: 'users',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], UsersComponent);
    return UsersComponent;
}());
exports.UsersComponent = UsersComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/users.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var users_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/users.routing.ts");
var users_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/users.component.ts");
var user_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-list/user-list.component.ts");
var user_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-details/user-details.component.ts");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var user_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-new/user-new.component.ts");
var user_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-update/user-update.component.ts");
var UsersModule = (function () {
    function UsersModule() {
    }
    UsersModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                users_routing_1.routing
            ],
            declarations: [
                users_component_1.UsersComponent,
                user_details_component_1.UserDetailsComponent,
                user_list_component_1.UserListComponent,
                user_new_component_1.UserNewComponent,
                user_update_component_1.UserUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], UsersModule);
    return UsersModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = UsersModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/users/users.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var users_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/users.component.ts");
var user_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-list/user-list.component.ts");
var user_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-details/user-details.component.ts");
var certificate_issue_new_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts");
var user_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-new/user-new.component.ts");
var user_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/users/components/user-update/user-update.component.ts");
var certificate_revoke_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts");
// noinspection TypeScriptValidateTypes
var routes = [
    {
        path: 'users',
        component: users_component_1.UsersComponent,
        data: { breadcrumb: 'Users' },
        children: [
            {
                path: '',
                component: user_list_component_1.UserListComponent
            },
            {
                path: 'issuecert',
                component: certificate_issue_new_component_1.CertificateIssueNewComponent,
                data: { breadcrumb: 'New Certificate' },
                children: []
            },
            {
                path: 'revokecert',
                component: certificate_revoke_component_1.CertificateRevokeComponent,
                data: { breadcrumb: 'Revoke Certificate' },
                children: []
            },
            {
                path: 'register',
                component: user_new_component_1.UserNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: user_details_component_1.UserDetailsComponent,
                data: { breadcrumb: 'Details' }
            },
            {
                path: 'update/:id',
                component: user_update_component_1.UserUpdateComponent,
                data: { breadcrumb: 'Update' }
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var VesselViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var vessel_image_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessel-image.service.ts");
var VesselDetailsComponent = (function () {
    function VesselDetailsComponent(vesselImageService, authService, route, router, vesselsService, notifications, navigationHelper) {
        this.vesselImageService = vesselImageService;
        this.authService = authService;
        this.route = route;
        this.router = router;
        this.vesselsService = vesselsService;
        this.notifications = notifications;
        this.navigationHelper = navigationHelper;
        this.showModal = false;
        this.uploadingImage = false;
    }
    VesselDetailsComponent.prototype.ngOnInit = function () {
        this.entityType = certificate_helper_service_1.CertificateEntityType.Vessel;
        this.loadVessel();
    };
    VesselDetailsComponent.prototype.showUpdate = function () {
        return this.isAdmin() && this.vessel != null;
    };
    VesselDetailsComponent.prototype.showDelete = function () {
        return this.isAdmin() && this.vessel != null;
    };
    VesselDetailsComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.VesselAdmin);
    };
    VesselDetailsComponent.prototype.loadVessel = function () {
        var _this = this;
        this.isLoadingVesselAndImage = true;
        var mrn = this.route.snapshot.params['id'];
        this.vesselsService.getVessel(mrn).subscribe(function (vessel) {
            _this.vessel = vessel;
            _this.vesselViewModel = new VesselViewModel_1.VesselViewModel(vessel);
            _this.title = vessel.name;
            _this.canChangeImage = _this.canChangeTheImage();
            _this.loadImage();
        }, function (err) {
            _this.isLoadingVesselAndImage = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the vessel', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselDetailsComponent.prototype.loadImage = function () {
        var _this = this;
        this.vesselImageService.getImageForVessel(this.vessel.mrn).subscribe(function (image) {
            _this.image = URL.createObjectURL(new Blob([image]));
            _this.uploadingImage = false;
            _this.imageLoaded();
            _this.loadVesselServices();
        }, function (err) {
            if (_this.canChangeTheImage()) {
                _this.image = 'assets/img/no_ship.png';
            }
            _this.uploadingImage = false;
            _this.imageLoaded();
            _this.loadVesselServices();
        });
    };
    VesselDetailsComponent.prototype.imageLoaded = function () {
    };
    VesselDetailsComponent.prototype.canChangeTheImage = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.VesselAdmin);
    };
    VesselDetailsComponent.prototype.uploadImage = function (image) {
        var _this = this;
        var oldImage = this.image;
        this.uploadingImage = true;
        this.vesselImageService.uploadImage(this.vessel.mrn, image).subscribe(function (image) {
            _this.loadImage();
        }, function (err) {
            _this.image = oldImage;
            _this.uploadingImage = false;
            _this.notifications.generateNotification('Error', 'Error when trying to upload vessel image', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselDetailsComponent.prototype.loadVesselServices = function () {
        var _this = this;
        this.vesselsService.getVesselServices(this.vessel.mrn).subscribe(function (services) {
            _this.vesselServices = services;
            _this.isLoadingVesselAndImage = false;
            _this.generateLabelValues();
        }, function (err) {
            _this.isLoadingVesselAndImage = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get the vessel', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselDetailsComponent.prototype.generateLabelValues = function () {
        var _this = this;
        this.labelValues = [];
        if (this.vesselViewModel) {
            this.labelValues.push({ label: 'MRN', valueHtml: this.vesselViewModel.getVessel().mrn });
            this.labelValues.push({ label: 'Name', valueHtml: this.vesselViewModel.getVessel().name });
            this.labelValues.push({ label: 'Permissions', valueHtml: this.vesselViewModel.getVessel().permissions });
            var attributeViewModels = this.vesselViewModel.getAttributeViewModels();
            attributeViewModels.forEach(function (attributeViewModel) {
                _this.labelValues.push({ label: attributeViewModel.attributeNameText, valueHtml: attributeViewModel.attributeValue });
            });
        }
    };
    VesselDetailsComponent.prototype.update = function () {
        this.navigationHelper.navigateToUpdateVessel(this.vessel.mrn);
    };
    VesselDetailsComponent.prototype.delete = function () {
        this.modalDescription = 'Are you sure you want to delete the vessel?';
        this.showModal = true;
    };
    VesselDetailsComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    VesselDetailsComponent.prototype.deleteForSure = function () {
        var _this = this;
        this.isLoadingVesselAndImage = true;
        this.showModal = false;
        this.vesselsService.deleteVessel(this.vessel.mrn).subscribe(function () {
            _this.router.navigate(['../'], { relativeTo: _this.route });
        }, function (err) {
            _this.isLoadingVesselAndImage = false;
            _this.notifications.generateNotification('Error', 'Error when trying to delete the vessel', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselDetailsComponent = __decorate([
        core_1.Component({
            selector: 'vessel-details',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof vessel_image_service_1.VesselImageService !== 'undefined' && vessel_image_service_1.VesselImageService) === 'function' && _a) || Object, (typeof (_b = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object, (typeof (_e = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object, (typeof (_g = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _g) || Object])
    ], VesselDetailsComponent);
    return VesselDetailsComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.VesselDetailsComponent = VesselDetailsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n      <div *ngIf=\"image\" style=\"margin-bottom: 10px;\">\n        <img class=\"logo-image-no-center\" [attr.src]=\"image | sanitizeUrl\" *ngIf=\"image && !canChangeImage\">\n        <mc-logo-uploader [logo]=\"image\" [uploadingLogo]=\"uploadingImage\" (onUpload)=\"uploadImage($event)\" *ngIf=\"image && canChangeImage\"></mc-logo-uploader>\n      </div>\n      <mc-label-value-table [isLoading]=\"isLoadingVesselAndImage\" [labelValues]=\"labelValues\"></mc-label-value-table>\n      <ul *ngIf=\"!isLoadingVesselAndImage && (showDelete() || showUpdate())\" class=\"btn-list clearfix\">\n        <li *ngIf=\"showUpdate()\">\n          <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update vessel</button>\n        </li>\n        <li *ngIf=\"showDelete()\">\n          <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete vessel</button>\n        </li>\n      </ul>\n    </ba-card>\n\n    <ba-card title=\"Services for {{title}}\" baCardClass=\"with-scroll table-panel\">\n      <h5>Update the ID information in the Instance-details-view to link additional services to this Vessel</h5>\n      <services-table [services]=\"vesselServices\" [isLoading]=\"isLoadingVesselAndImage\"></services-table>\n    </ba-card>\n\n    <div *ngIf=\"vessel\">\n        <ba-card title=\"Certificates for {{title}}\" baCardClass=\"with-scroll table-panel\">\n          <certificates-table [isAdmin]=\"isAdmin()\" [entityMrn]=\"vessel.mrn\" [isLoading]=\"isLoadingVesselAndImage\" [certificateTitle]=\"title\" [certificateEntityType]=\"entityType\" [certificates]=\"vessel.certificates\"></certificates-table>\n        </ba-card>\n    </div>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"deleteForSure()\" [show]=\"showModal\" [title]=\"'Delete vessel'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Delete'\"></mc-modal>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var vessel_image_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessel-image.service.ts");
var VesselListComponent = (function () {
    function VesselListComponent(vesselImageService, authService, router, route, vesselsService, orgService, notifications) {
        this.vesselImageService = vesselImageService;
        this.authService = authService;
        this.router = router;
        this.route = route;
        this.vesselsService = vesselsService;
        this.orgService = orgService;
        this.notifications = notifications;
        this.KEY_NEW = 'KEY_NEW_VESSEL';
    }
    VesselListComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        this.loadMyOrganization();
        this.loadVessels();
    };
    VesselListComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselListComponent.prototype.loadVessels = function () {
        var _this = this;
        this.vesselsService.getVessels().subscribe(function (pageVessel) {
            _this.vessels = pageVessel.content;
            _this.isLoading = false;
            _this.generateEntityImageList();
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get vessels', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselListComponent.prototype.gotoDetails = function (entityModel) {
        if (entityModel.entityId === this.KEY_NEW) {
            this.gotoCreate();
        }
        else {
            this.router.navigate([entityModel.entityId], { relativeTo: this.route });
        }
    };
    VesselListComponent.prototype.gotoCreate = function () {
        this.router.navigate(['register'], { relativeTo: this.route });
    };
    VesselListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        this.entityImageList = [];
        if (this.vessels) {
            this.vessels.forEach(function (vessel) {
                _this.entityImageList.push({ imageSourceObservable: _this.createImgObservable(vessel), entityId: vessel.mrn, title: vessel.name });
            });
        }
        if (this.authService.authState.hasPermission(auth_service_1.AuthPermission.VesselAdmin)) {
            this.entityImageList.push({ imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Vessel', isAdd: true });
        }
    };
    VesselListComponent.prototype.createImgObservable = function (vessel) {
        var _this = this;
        var imageSrc = 'assets/img/no_ship.png';
        return rxjs_1.Observable.create(function (observer) {
            _this.vesselImageService.getImageForVessel(vessel.mrn).subscribe(function (logo) {
                observer.next(URL.createObjectURL(new Blob([logo])));
            }, function (err) {
                observer.next(imageSrc);
            });
        });
    };
    VesselListComponent = __decorate([
        core_1.Component({
            selector: 'vessel-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof vessel_image_service_1.VesselImageService !== 'undefined' && vessel_image_service_1.VesselImageService) === 'function' && _a) || Object, (typeof (_b = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _c) || Object, (typeof (_d = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _d) || Object, (typeof (_e = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _e) || Object, (typeof (_f = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _f) || Object, (typeof (_g = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _g) || Object])
    ], VesselListComponent);
    return VesselListComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.VesselListComponent = VesselListComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Vessels for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-entity-image-list [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var VesselViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts");
var VesselAttribute_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts");
var AttributeNameEnum = VesselAttribute_1.VesselAttribute.AttributeNameEnum;
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var mrn_helper_service_1 = __webpack_require__("./src/app/shared/mrn-helper.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var VesselNewComponent = (function () {
    function VesselNewComponent(formBuilder, activatedRoute, navigationService, notifications, orgService, vesselsService, mrnHelper) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.orgService = orgService;
        this.vesselsService = vesselsService;
        // McForm params
        this.isLoading = true;
        this.isRegistering = false;
        this.registerTitle = "Register Vessel";
        this.mrnMask = mrnHelper.mrnMaskForVessel();
        this.mrnPattern = mrnHelper.mrnPattern();
        this.mrnPatternError = mrnHelper.mrnPatternError();
        this.mrn = this.mrnMask;
    }
    VesselNewComponent.prototype.ngOnInit = function () {
        this.isRegistering = false;
        this.isLoading = true;
        this.loadMyOrganization();
    };
    VesselNewComponent.prototype.cancel = function () {
        this.navigationService.cancelCreateVessel();
    };
    VesselNewComponent.prototype.register = function () {
        this.isRegistering = true;
        var vessel = {
            mrn: this.mrn,
            name: this.registerForm.value.name,
            permissions: this.registerForm.value.permissions
        };
        var formAttributes = this.registerForm.value.attributes;
        var vesselAttributes = [];
        Object.getOwnPropertyNames(formAttributes).forEach(function (propertyName) {
            if (formAttributes[propertyName] && formAttributes[propertyName].length > 0) {
                vesselAttributes.push({ attributeName: AttributeNameEnum[propertyName], attributeValue: formAttributes[propertyName] });
            }
        });
        vessel.attributes = vesselAttributes;
        this.createVessel(vessel);
    };
    VesselNewComponent.prototype.createVessel = function (vessel) {
        var _this = this;
        this.vesselsService.createVessel(vessel).subscribe(function (vessel) {
            _this.navigationService.navigateToVessel(vessel.mrn);
            _this.isRegistering = false;
        }, function (err) {
            _this.isRegistering = false;
            _this.notifications.generateNotification('Error', 'Error when trying to create vessel', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselNewComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgService.getMyOrganization().subscribe(function (organization) {
            _this.organization = organization;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselNewComponent.prototype.generateMRN = function (idValue) {
        var mrn = (idValue ? idValue : '');
        var valueNoSpaces = mrn.split(' ').join('').toLowerCase();
        this.mrn = this.mrnMask + valueNoSpaces;
        this.registerForm.patchValue({ mrn: this.mrn });
    };
    VesselNewComponent.prototype.generateForm = function () {
        var _this = this;
        this.registerForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.registerForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.mrn, formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'vesselId', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Vessel ID', placeholder: 'Enter Vessel ID to generate MRN', validator: forms_1.Validators.required, pattern: this.mrnPattern, errorText: this.mrnPatternError };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        formControl.valueChanges.subscribe(function (param) { return _this.generateMRN(param); });
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.registerForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.registerForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        this.generateAttributesGroup();
    };
    VesselNewComponent.prototype.generateAttributesGroup = function () {
        var _this = this;
        var attributesGroup = this.formBuilder.group({});
        this.registerForm.addControl('attributes', attributesGroup);
        var vesselAttributes = VesselViewModel_1.VesselViewModel.getAllPossibleVesselAttributes();
        vesselAttributes.forEach(function (vesselAttribute) {
            var formControlModel = { formGroup: attributesGroup, elementId: AttributeNameEnum[vesselAttribute.attributeName], controlType: mcFormControlModel_1.McFormControlType.Text, labelName: vesselAttribute.attributeNameText, placeholder: '' };
            var formControl = new forms_1.FormControl('', formControlModel.validator);
            attributesGroup.addControl(formControlModel.elementId, formControl);
            _this.formControlModels.push(formControlModel);
        });
    };
    VesselNewComponent = __decorate([
        core_1.Component({
            selector: 'vessel-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _e) || Object, (typeof (_f = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _f) || Object, (typeof (_g = typeof mrn_helper_service_1.MrnHelperService !== 'undefined' && mrn_helper_service_1.MrnHelperService) === 'function' && _g) || Object])
    ], VesselNewComponent);
    return VesselNewComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.VesselNewComponent = VesselNewComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Register new Vessel for {{organization?.name}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-form [formGroup]=\"registerForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRegistering\" [registerTitle]=\"registerTitle\" (onCancel)=\"cancel()\" (onRegister)=\"register()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var VesselViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts");
var VesselAttribute_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts");
var AttributeNameEnum = VesselAttribute_1.VesselAttribute.AttributeNameEnum;
var vessels_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/vessels.service.ts");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var VesselUpdateComponent = (function () {
    function VesselUpdateComponent(formBuilder, activatedRoute, navigationService, notifications, vesselsService) {
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.navigationService = navigationService;
        this.notifications = notifications;
        this.vesselsService = vesselsService;
        this.showModal = false;
        // McForm params
        this.isLoading = true;
        this.isUpdating = false;
        this.updateTitle = "Update vessel";
    }
    VesselUpdateComponent.prototype.ngOnInit = function () {
        this.isUpdating = false;
        this.isLoading = true;
        this.loadVessel();
    };
    VesselUpdateComponent.prototype.loadVessel = function () {
        var _this = this;
        var mrn = this.activatedRoute.snapshot.params['id'];
        this.vesselsService.getVessel(mrn).subscribe(function (vessel) {
            _this.vessel = vessel;
            _this.generateForm();
            _this.isLoading = false;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get the vessel', mc_notifications_service_1.MCNotificationType.Error, err);
            _this.navigationService.navigateToVessel(mrn);
        });
    };
    VesselUpdateComponent.prototype.cancel = function () {
        var vesselMrn = (this.vessel ? this.vessel.mrn : '');
        this.navigationService.navigateToVessel(vesselMrn);
    };
    VesselUpdateComponent.prototype.update = function () {
        if (this.hasActiveCertificate()) {
            this.modalDescription = "<b>Certificates</b> will be <b>invalid</b> if you update the Vessel.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?";
            this.showModal = true;
        }
        else {
            this.updateForSure();
        }
    };
    VesselUpdateComponent.prototype.hasActiveCertificate = function () {
        if (this.vessel.certificates && this.vessel.certificates.length > 0) {
            for (var _i = 0, _a = this.vessel.certificates; _i < _a.length; _i++) {
                var certificate = _a[_i];
                if (!certificate.revoked) {
                    return true;
                }
            }
        }
        return false;
    };
    VesselUpdateComponent.prototype.cancelModal = function () {
        this.showModal = false;
    };
    VesselUpdateComponent.prototype.updateForSure = function () {
        this.isUpdating = true;
        this.vessel.name = this.updateForm.value.name;
        this.vessel.permissions = this.updateForm.value.permissions;
        var formAttributes = this.updateForm.value.attributes;
        var vesselAttributes = [];
        Object.getOwnPropertyNames(formAttributes).forEach(function (propertyName) {
            if (formAttributes[propertyName] && formAttributes[propertyName].length > 0) {
                vesselAttributes.push({ attributeName: AttributeNameEnum[propertyName], attributeValue: formAttributes[propertyName] });
            }
        });
        this.vessel.attributes = vesselAttributes;
        this.updateVessel(this.vessel);
    };
    VesselUpdateComponent.prototype.updateVessel = function (vessel) {
        var _this = this;
        this.vesselsService.updateVessel(vessel).subscribe(function (_) {
            _this.isUpdating = false;
            _this.navigationService.navigateToVessel(vessel.mrn);
        }, function (err) {
            _this.isUpdating = false;
            _this.notifications.generateNotification('Error', 'Error when trying to update vessel', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    VesselUpdateComponent.prototype.generateForm = function () {
        this.updateForm = this.formBuilder.group({});
        this.formControlModels = [];
        var formControlModel = { formGroup: this.updateForm, elementId: 'mrn', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true };
        var formControl = new forms_1.FormControl(this.vessel.mrn, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'name', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl(this.vessel.name, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        formControlModel = { formGroup: this.updateForm, elementId: 'permissions', controlType: mcFormControlModel_1.McFormControlType.Text, labelName: 'Permissions', placeholder: '' };
        formControl = new forms_1.FormControl(this.vessel.permissions, formControlModel.validator);
        this.updateForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
        this.generateAttributesGroup();
    };
    VesselUpdateComponent.prototype.generateAttributesGroup = function () {
        var _this = this;
        var attributesGroup = this.formBuilder.group({});
        this.updateForm.addControl('attributes', attributesGroup);
        var vesselAttributes = VesselViewModel_1.VesselViewModel.getAllPossibleVesselAttributes();
        vesselAttributes.forEach(function (vesselAttribute) {
            var formControlModel = { formGroup: attributesGroup, elementId: AttributeNameEnum[vesselAttribute.attributeName], controlType: mcFormControlModel_1.McFormControlType.Text, labelName: vesselAttribute.attributeNameText, placeholder: '' };
            var formControl = new forms_1.FormControl(_this.getAttributeValue(vesselAttribute.attributeName), formControlModel.validator);
            attributesGroup.addControl(formControlModel.elementId, formControl);
            _this.formControlModels.push(formControlModel);
        });
    };
    VesselUpdateComponent.prototype.getAttributeValue = function (attributeName) {
        for (var _i = 0, _a = this.vessel.attributes; _i < _a.length; _i++) {
            var attribute = _a[_i];
            if (attribute.attributeName === attributeName) {
                return attribute.attributeValue;
            }
        }
        return '';
    };
    VesselUpdateComponent = __decorate([
        core_1.Component({
            selector: 'vessel-update',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _c) || Object, (typeof (_d = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _d) || Object, (typeof (_e = typeof vessels_service_1.VesselsService !== 'undefined' && vessels_service_1.VesselsService) === 'function' && _e) || Object])
    ], VesselUpdateComponent);
    return VesselUpdateComponent;
    var _a, _b, _c, _d, _e;
}());
exports.VesselUpdateComponent = VesselUpdateComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Update Vessel - {{vessel?.name}}\" baCardClass=\"with-scroll table-panel\">\n        <mc-form [formNeedsUpdating]=\"true\" [formGroup]=\"updateForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isUpdating\" [registerTitle]=\"updateTitle\" (onCancel)=\"cancel()\" (onRegister)=\"update()\"></mc-form>\n    </ba-card>\n  </div>\n</div>\n<mc-modal (onCancel)=\"cancelModal()\" (onOk)=\"updateForSure()\" [show]=\"showModal\" [title]=\"'Update vessel'\" [description]=\"modalDescription\" [cancelClass]=\"'btn btn-default btn-raised'\" [cancelTitle]=\"'Cancel'\" [okClass]=\"'btn btn-danger btn-raised'\" [okTitle]=\"'Update'\"></mc-modal>"

/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/vessels.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var VesselsComponent = (function () {
    function VesselsComponent() {
    }
    VesselsComponent = __decorate([
        core_1.Component({
            selector: 'vessels',
            template: "<router-outlet></router-outlet>"
        }), 
        __metadata('design:paramtypes', [])
    ], VesselsComponent);
    return VesselsComponent;
}());
exports.VesselsComponent = VesselsComponent;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/vessels.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var vessels_routing_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/vessels.routing.ts");
var vessels_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/vessels.component.ts");
var vessel_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts");
var vessel_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var shared_module_1 = __webpack_require__("./src/app/pages/shared/shared.module.ts");
var vessel_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts");
var vessel_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.component.ts");
var VesselsModule = (function () {
    function VesselsModule() {
    }
    VesselsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                shared_module_1.SharedModule,
                vessels_routing_1.routing
            ],
            declarations: [
                vessels_component_1.VesselsComponent,
                vessel_details_component_1.VesselDetailsComponent,
                vessel_list_component_1.VesselListComponent,
                vessel_new_component_1.VesselNewComponent,
                vessel_update_component_1.VesselUpdateComponent
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], VesselsModule);
    return VesselsModule;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = VesselsModule;


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/vessels.routing.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var vessels_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/vessels.component.ts");
var vessel_list_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts");
var vessel_details_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts");
var vessel_new_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts");
var certificate_issue_new_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts");
var vessel_update_component_1 = __webpack_require__("./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.component.ts");
var certificate_revoke_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts");
// noinspection TypeScriptValidateTypes
var routes = [
    {
        path: 'vessels',
        component: vessels_component_1.VesselsComponent,
        data: { breadcrumb: 'Vessels' },
        children: [
            {
                path: '',
                component: vessel_list_component_1.VesselListComponent
            },
            {
                path: 'issuecert',
                component: certificate_issue_new_component_1.CertificateIssueNewComponent,
                data: { breadcrumb: 'New Certificate' },
                children: []
            },
            {
                path: 'revokecert',
                component: certificate_revoke_component_1.CertificateRevokeComponent,
                data: { breadcrumb: 'Revoke Certificate' },
                children: []
            },
            {
                path: 'register',
                component: vessel_new_component_1.VesselNewComponent,
                data: { breadcrumb: 'Register' }
            },
            {
                path: ':id',
                component: vessel_details_component_1.VesselDetailsComponent,
                data: { breadcrumb: 'Details' }
            },
            {
                path: 'update/:id',
                component: vessel_update_component_1.VesselUpdateComponent,
                data: { breadcrumb: 'Update' }
            }
        ]
    }
];
exports.routing = router_1.RouterModule.forChild(routes);


/***/ },

/***/ "./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var VesselAttribute_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts");
var AttributeNameEnum = VesselAttribute_1.VesselAttribute.AttributeNameEnum;
var enums_helper_1 = __webpack_require__("./src/app/shared/enums-helper.ts");
// TODO maybe this should just be a helper.service instead. Or mayby just static methods if no objects is needed
var VesselViewModel = (function () {
    function VesselViewModel(vessel) {
        this.vessel = vessel;
        this.generateAttributes();
    }
    VesselViewModel.getAllPossibleVesselAttributes = function () {
        var attributes = [];
        var attributeKeysAndValues = enums_helper_1.EnumsHelper.getKeysAndValuesFromEnum(AttributeNameEnum);
        attributeKeysAndValues.forEach(function (enumKeyAndValue) {
            var vesselAttribute = {
                attributeValue: '',
                attributeName: enumKeyAndValue.value,
                attributeNameText: VesselViewModel.getTextForVesselAttributeNameEnum(enumKeyAndValue.value)
            };
            attributes.push(vesselAttribute);
        });
        return attributes;
    };
    VesselViewModel.convertVesselsToViewModels = function (vessels) {
        var viewModels = [];
        if (vessels) {
            vessels.forEach(function (vessel) {
                viewModels.push(new VesselViewModel(vessel));
            });
        }
        return viewModels;
    };
    VesselViewModel.prototype.getVessel = function () {
        return this.vessel;
    };
    VesselViewModel.prototype.getAttributeViewModels = function () {
        return this.attributes;
    };
    VesselViewModel.prototype.generateAttributes = function () {
        var _this = this;
        this.attributes = [];
        if (this.vessel.attributes) {
            this.vessel.attributes.forEach(function (attribute) {
                _this.attributes.push(_this.attributeViewModelFromAttribute(attribute));
            });
        }
    };
    VesselViewModel.prototype.attributeViewModelFromAttribute = function (attribute) {
        var attributeViewModel = attribute;
        attributeViewModel.attributeNameText = VesselViewModel.getTextForVesselAttributeNameEnum(attribute.attributeName);
        return attributeViewModel;
    };
    VesselViewModel.getTextForVesselAttributeNameEnum = function (vesselAttributeEnum) {
        var text = '';
        switch (vesselAttributeEnum) {
            case AttributeNameEnum.AisClass: {
                text = 'AIS class';
                break;
            }
            case AttributeNameEnum.Callsign: {
                text = 'Call sign';
                break;
            }
            case AttributeNameEnum.Flagstate: {
                text = 'Flag state';
                break;
            }
            case AttributeNameEnum.ImoNumber: {
                text = 'IMO number';
                break;
            }
            case AttributeNameEnum.MmsiNumber: {
                text = 'MMSI number';
                break;
            }
            case AttributeNameEnum.PortOfRegister: {
                text = 'Port of register';
                break;
            }
            default: {
                text = AttributeNameEnum[vesselAttributeEnum];
                if (!text) {
                    text = '' + vesselAttributeEnum;
                }
            }
        }
        return text;
    };
    return VesselViewModel;
}());
exports.VesselViewModel = VesselViewModel;


/***/ },

/***/ "./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SrSearchRequestsService = (function () {
    function SrSearchRequestsService() {
        this.searchRequests = {};
    }
    // Returns null if none found
    SrSearchRequestsService.prototype.getSearchRequest = function (key) {
        return this.searchRequests[key];
    };
    SrSearchRequestsService.prototype.addSearchRequest = function (key, searchRequest) {
        this.searchRequests[key] = searchRequest;
    };
    SrSearchRequestsService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SrSearchRequestsService);
    return SrSearchRequestsService;
}());
exports.SrSearchRequestsService = SrSearchRequestsService;


/***/ },

/***/ "./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_utils_1 = __webpack_require__("./src/app/shared/mc-utils.ts");
var util_1 = __webpack_require__("./node_modules/util/util.js");
var SrViewModelService = (function () {
    function SrViewModelService() {
    }
    SrViewModelService.prototype.ngOnInit = function () {
    };
    SrViewModelService.prototype.generateLabelValuesForSpecification = function (specification, organizationName) {
        var labelValues = undefined;
        if (specification) {
            labelValues = [];
            labelValues.push({ label: 'MRN', valueHtml: specification.specificationId });
            labelValues.push({ label: 'Name', valueHtml: specification.name });
            labelValues.push({ label: 'Version', valueHtml: specification.version });
            labelValues.push({ label: 'Status', valueHtml: specification.status });
            labelValues.push({ label: 'Organization', valueHtml: organizationName });
            labelValues.push({ label: 'Description', valueHtml: specification.description });
        }
        return labelValues;
    };
    SrViewModelService.prototype.generateLabelValuesForDesign = function (design, organizationName) {
        var labelValues = undefined;
        if (design) {
            labelValues = [];
            labelValues.push({ label: 'MRN', valueHtml: design.designId });
            labelValues.push({ label: 'Name', valueHtml: design.name });
            labelValues.push({ label: 'Version', valueHtml: design.version });
            labelValues.push({ label: 'Status', valueHtml: design.status });
            labelValues.push({ label: 'Organization', valueHtml: organizationName });
            labelValues.push({ label: 'Description', valueHtml: design.description });
        }
        return labelValues;
    };
    SrViewModelService.prototype.generateLabelValuesForInstance = function (instance, organizationName) {
        var labelValues = undefined;
        if (instance) {
            labelValues = [];
            labelValues.push({ label: 'MRN', valueHtml: instance.instanceId });
            labelValues.push({ label: 'Name', valueHtml: instance.name });
            labelValues.push({ label: 'Version', valueHtml: instance.version });
            labelValues.push({ label: 'Status', valueHtml: instance.status });
            labelValues.push({ label: 'Organization', valueHtml: organizationName });
            labelValues.push({ label: 'Description', valueHtml: instance.description });
            labelValues.push({ label: 'Service endpoint', valueHtml: instance.endpointUri });
            if (!util_1.isNullOrUndefined(instance.compliant)) {
                var compliantClass = instance.compliant ? '' : 'label-danger';
                labelValues.push({ label: 'Compliant', valueHtml: mc_utils_1.McUtils.getYesNoString(instance.compliant), linkClass: compliantClass });
            }
        }
        return labelValues;
    };
    SrViewModelService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SrViewModelService);
    return SrViewModelService;
}());
exports.SrViewModelService = SrViewModelService;


/***/ },

/***/ "./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var certificates_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/certificates.service.ts");
var file_helper_service_1 = __webpack_require__("./src/app/shared/file-helper.service.ts");
var app_constants_1 = __webpack_require__("./src/app/shared/app.constants.ts");
var CertificateIssueNewComponent = (function () {
    function CertificateIssueNewComponent(fileHelper, certificateService, route, navigationHelper, notificationService) {
        this.fileHelper = fileHelper;
        this.certificateService = certificateService;
        this.route = route;
        this.navigationHelper = navigationHelper;
        this.notificationService = notificationService;
    }
    CertificateIssueNewComponent.prototype.ngOnInit = function () {
        this.isLoading = false;
        var entityType = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_TYPE];
        var entityMrn = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_MRN];
        var entityTitle = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_TITLE];
        if (entityType == null || !entityMrn || !entityTitle) {
            this.notificationService.generateNotification("Error", "Unresolved state when trying to issue new certificate", mc_notifications_service_1.MCNotificationType.Error);
            this.navigationHelper.takeMeHome();
        }
        this.entityMrn = entityMrn;
        this.entityTitle = entityTitle;
        this.entityType = +entityType; // +-conversion from string to int
        this.generateLabelValues();
    };
    CertificateIssueNewComponent.prototype.zipAndDownload = function () {
        this.fileHelper.downloadPemCertificate(this.certificate, this.entityTitle);
    };
    CertificateIssueNewComponent.prototype.issueNew = function () {
        var _this = this;
        this.isLoading = true;
        this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(function (certificateBundle) {
            _this.certificate = certificateBundle;
            _this.isLoading = false;
        }, function (err) {
            _this.isLoading = false;
            _this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    CertificateIssueNewComponent.prototype.cancel = function () {
        this.navigationHelper.cancelNavigateCertificates();
    };
    CertificateIssueNewComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        this.labelValues.push({ label: 'Name', valueHtml: this.entityTitle });
        this.labelValues.push({ label: 'MRN', valueHtml: this.entityMrn.split(app_constants_1.TOKEN_DELIMITER)[0] });
    };
    CertificateIssueNewComponent = __decorate([
        core_1.Component({
            selector: 'certificate-issue-new',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof file_helper_service_1.FileHelperService !== 'undefined' && file_helper_service_1.FileHelperService) === 'function' && _a) || Object, (typeof (_b = typeof certificates_service_1.CertificatesService !== 'undefined' && certificates_service_1.CertificatesService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _e) || Object])
    ], CertificateIssueNewComponent);
    return CertificateIssueNewComponent;
    var _a, _b, _c, _d, _e;
}());
exports.CertificateIssueNewComponent = CertificateIssueNewComponent;


/***/ },

/***/ "./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Issue new certificate\" baCardClass=\"with-scroll table-panel\">\n      <!-- Before issue -->\n      <div *ngIf=\"entityType != null && !certificate && !isLoading\">\n        <h5>Issuing a new certificate for:</h5>\n        <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n        <ul *ngIf=\"entityType != null\" class=\"btn-list clearfix\">\n          <li>\n            <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"issueNew()\">Issue Certificate</button>\n          </li>\n          <li>\n            <button type=\"button\" class=\"btn btn-default btn-raised\" (click)=\"cancel()\">Cancel</button>\n          </li>\n        </ul>\n      </div>\n\n      <sk-fading-circle [isRunning]=\"isLoading\" ></sk-fading-circle>\n\n      <!-- After issue and success -->\n      <div *ngIf=\"certificate\">\n        Certificate issued with success\n        <ul *ngIf=\"entityType != null\" class=\"btn-list clearfix\">\n          <li>\n            <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"zipAndDownload()\">Download certificate</button>\n          </li>\n          <li>\n            <button type=\"button\" class=\"btn btn-default btn-raised\" (click)=\"cancel()\">OK</button>\n          </li>\n        </ul>\n      </div>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var certificates_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/certificates.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var mcFormControlModel_1 = __webpack_require__("./src/app/theme/components/mcForm/mcFormControlModel.ts");
var select_validator_1 = __webpack_require__("./src/app/theme/validators/select.validator.ts");
var CertificateRevokeComponent = (function () {
    function CertificateRevokeComponent(certificateHelper, formBuilder, certificateService, route, navigationHelper, notificationService) {
        this.certificateHelper = certificateHelper;
        this.formBuilder = formBuilder;
        this.certificateService = certificateService;
        this.route = route;
        this.navigationHelper = navigationHelper;
        this.notificationService = notificationService;
        this.isRevoking = false;
        this.revokeTitle = "Revoke";
    }
    CertificateRevokeComponent.prototype.ngOnInit = function () {
        this.isLoading = true;
        var entityType = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_TYPE];
        var entityMrn = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_MRN];
        var entityTitle = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.ENTITY_TITLE];
        var certificateId = this.route.snapshot.queryParams[navigation_helper_service_1.queryKeys.CERT_ID];
        if (entityType == null || !entityMrn || !entityTitle) {
            this.notificationService.generateNotification("Error", "Unresolved state when trying to revoke certificate", mc_notifications_service_1.MCNotificationType.Error);
            this.navigationHelper.takeMeHome();
        }
        this.entityMrn = entityMrn;
        this.entityTitle = entityTitle;
        this.entityType = +entityType; // +-conversion from string to int
        this.certificateId = certificateId;
        this.generateLabelValues();
        this.generateForm();
        this.isLoading = false;
    };
    CertificateRevokeComponent.prototype.revoke = function () {
        var _this = this;
        this.isRevoking = true;
        var revokeDate = this.revokeForm.value.revokedAt;
        var tempRevocationReason = this.revokeForm.value.revocationReason;
        var revocationReason = null;
        if (tempRevocationReason && tempRevocationReason.toLowerCase().indexOf('undefined') < 0) {
            revocationReason = tempRevocationReason;
        }
        var certificateRevocation = { revokationReason: revocationReason, revokedAt: revokeDate.getTime() + '' };
        this.certificateService.revokeCertificate(this.entityType, this.entityMrn, this.certificateId, certificateRevocation).subscribe(function (_) {
            _this.isRevoking = false;
            _this.navigationHelper.cancelNavigateCertificates();
        }, function (err) {
            _this.isRevoking = false;
            _this.notificationService.generateNotification('Error', 'Error when trying to revoke certificate', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    CertificateRevokeComponent.prototype.cancel = function () {
        this.navigationHelper.cancelNavigateCertificates();
    };
    CertificateRevokeComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        this.labelValues.push({ label: 'Name', valueHtml: this.entityTitle });
        this.labelValues.push({ label: 'MRN', valueHtml: this.entityMrn });
    };
    CertificateRevokeComponent.prototype.generateForm = function () {
        this.revokeForm = this.formBuilder.group({});
        this.formControlModels = [];
        var selectValues = this.selectValues();
        var formControlModelSelect = { selectValues: selectValues, formGroup: this.revokeForm, elementId: 'revocationReason', controlType: mcFormControlModel_1.McFormControlType.Select, labelName: '', placeholder: '', validator: select_validator_1.SelectValidator.validate, showCheckmark: false };
        var formControl = new forms_1.FormControl('', formControlModelSelect.validator);
        this.revokeForm.addControl(formControlModelSelect.elementId, formControl);
        this.formControlModels.push(formControlModelSelect);
        var formControlModel = { minDate: new Date(), formGroup: this.revokeForm, elementId: 'revokedAt', controlType: mcFormControlModel_1.McFormControlType.Datepicker, labelName: '', validator: forms_1.Validators.required };
        formControl = new forms_1.FormControl('', formControlModel.validator);
        this.revokeForm.addControl(formControlModel.elementId, formControl);
        this.formControlModels.push(formControlModel);
    };
    CertificateRevokeComponent.prototype.selectValues = function () {
        var selectValues = [];
        selectValues.push({ value: undefined, label: 'Choose reason...', isSelected: true });
        var allrevokeTypes = this.certificateHelper.getAllRevocationTypes();
        allrevokeTypes.forEach(function (revokeType) {
            selectValues.push({ value: revokeType.value, label: revokeType.label, isSelected: false });
        });
        return selectValues;
    };
    CertificateRevokeComponent = __decorate([
        core_1.Component({
            selector: 'certificate-revoke',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof certificate_helper_service_1.CertificateHelperService !== 'undefined' && certificate_helper_service_1.CertificateHelperService) === 'function' && _a) || Object, (typeof (_b = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _b) || Object, (typeof (_c = typeof certificates_service_1.CertificatesService !== 'undefined' && certificates_service_1.CertificatesService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _d) || Object, (typeof (_e = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object])
    ], CertificateRevokeComponent);
    return CertificateRevokeComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.CertificateRevokeComponent = CertificateRevokeComponent;


/***/ },

/***/ "./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"Revoke certificate\" baCardClass=\"with-scroll table-panel\">\n      <!-- Before issue -->\n      <div *ngIf=\"entityType != null && !isLoading\">\n        <h5>Revoking certificate for:</h5>\n        <mc-label-value-table [isLoading]=\"isLoading\" [labelValues]=\"labelValues\"></mc-label-value-table>\n        <br>\n        <h5>\n          Please choose a reason and date for revocation.\n        </h5>\n        <mc-form [formGroup]=\"revokeForm\" [formControlModels]=\"formControlModels\" [isLoading]=\"isLoading\" [isRegistering]=\"isRevoking\" [registerTitle]=\"revokeTitle\" (onCancel)=\"cancel()\" (onRegister)=\"revoke()\"></mc-form>\n      </div>\n      <sk-fading-circle [isRunning]=\"isLoading\" ></sk-fading-circle>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/shared/components/certificates-table/certificates-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var theme_constants_1 = __webpack_require__("./src/app/theme/theme.constants.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var file_helper_service_1 = __webpack_require__("./src/app/shared/file-helper.service.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var CertificatesTableComponent = (function () {
    function CertificatesTableComponent(datePipe, fileHelper, navigationHelper, authService, certificateHelperService, notificationService) {
        this.datePipe = datePipe;
        this.fileHelper = fileHelper;
        this.navigationHelper = navigationHelper;
        this.authService = authService;
        this.certificateHelperService = certificateHelperService;
        this.notificationService = notificationService;
        this.newCertificateTitle = "Issue new Certificate";
        this.onIssueCertificate = this.issueCertificate.bind(this);
    }
    CertificatesTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.authService.authState.rolesLoaded) {
            this.authService.rolesLoaded.subscribe(function (mode) {
                _this.generateHeadersAndRows();
            });
        }
    };
    CertificatesTableComponent.prototype.ngOnChanges = function () {
        if (this.certificates) {
            this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);
            this.sortCertificates();
            this.generateHeadersAndRows();
        }
    };
    CertificatesTableComponent.prototype.generateHeadersAndRows = function () {
        var _this = this;
        var tableHeaders = [];
        var tableRows = [];
        var tableHeader = { title: 'Certificate', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Valid from', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Valid to', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: '', class: 'table-buttons' };
        tableHeaders.push(tableHeader);
        var _loop_1 = function(certificate) {
            cells = [];
            tableCell = { valueHtml: 'Certificate for ' + this_1.certificateTitle, class: '', truncateNumber: 50 };
            cells.push(tableCell);
            tableCell = { valueHtml: this_1.datePipe.transform(certificate.start, theme_constants_1.DATE_FORMAT), class: 'nowrap', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: this_1.datePipe.transform(certificate.end, theme_constants_1.DATE_FORMAT), class: 'nowrap', truncateNumber: 0 };
            cells.push(tableCell);
            if (certificate.revoked) {
                tableCell = { valueHtml: 'Revoked (' + certificate.revokeReasonText + ')', class: 'red-text', truncateNumber: 50 };
                cells.push(tableCell);
            }
            else {
                var actionButtons = [];
                var actionButton = { buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick: function () { _this.download(certificate); } };
                actionButtons.push(actionButton);
                if (this_1.isAdmin) {
                    actionButton = { buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Revoke certificate', onClick: function () { _this.revoke(certificate); } };
                    actionButtons.push(actionButton);
                }
                var tableCellActionButtons = { valueHtml: '', class: 'table-buttons', truncateNumber: 0, actionButtons: actionButtons };
                cells.push(tableCellActionButtons);
            }
            var tableRow = { cells: cells };
            tableRows.push(tableRow);
        };
        var this_1 = this;
        var cells, tableCell;
        for (var _i = 0, _a = this.certificateViewModels; _i < _a.length; _i++) {
            var certificate = _a[_i];
            _loop_1(certificate);
        }
        this.tableHeaders = tableHeaders;
        this.tableRows = tableRows;
    };
    CertificatesTableComponent.prototype.sortCertificates = function () {
        // We are sorting with longest due date on top
        this.certificateViewModels.sort(function (obj1, obj2) {
            var obj1Time;
            var obj2Time;
            // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???
            if (typeof obj1.end === "Date") {
                obj1Time = obj1.end.getTime();
            }
            else {
                obj1Time = obj1.end;
            }
            if (typeof obj2.end === "Date") {
                obj2Time = obj2.end.getTime();
            }
            else {
                obj2Time = obj2.end;
            }
            if (obj1.revoked && obj2.revoked) {
                return obj2Time - obj1Time;
            }
            if (obj1.revoked) {
                return 1;
            }
            if (obj2.revoked) {
                return -1;
            }
            return obj2Time - obj1Time;
        });
    };
    CertificatesTableComponent.prototype.issueCertificate = function () {
        this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);
    };
    CertificatesTableComponent.prototype.revoke = function (certificate) {
        this.navigationHelper.navigateToRevokeCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle, certificate.serialNumber);
    };
    CertificatesTableComponent.prototype.download = function (certificate) {
        var pemCertificate = { certificate: certificate.certificate };
        var certBundle = { pemCertificate: pemCertificate };
        this.fileHelper.downloadPemCertificate(certBundle, this.certificateTitle);
    };
    CertificatesTableComponent.prototype.canCreate = function () {
        return this.isAdmin;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CertificatesTableComponent.prototype, "certificates", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof certificate_helper_service_1.CertificateEntityType !== 'undefined' && certificate_helper_service_1.CertificateEntityType) === 'function' && _a) || Object)
    ], CertificatesTableComponent.prototype, "certificateEntityType", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CertificatesTableComponent.prototype, "entityMrn", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], CertificatesTableComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CertificatesTableComponent.prototype, "certificateTitle", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], CertificatesTableComponent.prototype, "isAdmin", void 0);
    CertificatesTableComponent = __decorate([
        core_1.Component({
            selector: 'certificates-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/certificates-table/certificates-table.html"),
            styles: [__webpack_require__("./src/app/pages/shared/components/certificates-table/certificates-table.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof common_1.DatePipe !== 'undefined' && common_1.DatePipe) === 'function' && _b) || Object, (typeof (_c = typeof file_helper_service_1.FileHelperService !== 'undefined' && file_helper_service_1.FileHelperService) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object, (typeof (_e = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _e) || Object, (typeof (_f = typeof certificate_helper_service_1.CertificateHelperService !== 'undefined' && certificate_helper_service_1.CertificateHelperService) === 'function' && _f) || Object, (typeof (_g = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _g) || Object])
    ], CertificatesTableComponent);
    return CertificatesTableComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.CertificatesTableComponent = CertificatesTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/certificates-table/certificates-table.html":
/***/ function(module, exports) {

module.exports = "<mc-table [tableHeaders]=\"tableHeaders\" [tableRows]=\"tableRows\" [isLoading]=\"isLoading\"></mc-table>\n<div *ngIf=\"!isLoading\">\n  <mc-create-button [isAdmin]=\"canCreate()\" [title]=\"newCertificateTitle\" [onClick]=\"onIssueCertificate\"></mc-create-button>\n</div>\n"

/***/ },

/***/ "./src/app/pages/shared/components/certificates-table/certificates-table.scss":
/***/ function(module, exports) {

module.exports = ".table-buttons {\n  width: 100%; }\n  .table-buttons button {\n    margin: 5px !important; }\n\n.certificate-table td {\n  vertical-align: middle; }\n\n.certificate-table td:first-child {\n  white-space: nowrap; }\n\n.certificate-table-short td {\n  vertical-align: middle; }\n\n.certificate-table-short td:first-child {\n  min-width: 200px; }\n"

/***/ },

/***/ "./src/app/pages/shared/components/designs-table/designs-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var DesignsTableComponent = (function () {
    function DesignsTableComponent(orgsService, notifications) {
        this.orgsService = orgsService;
        this.notifications = notifications;
    }
    DesignsTableComponent.prototype.ngOnInit = function () {
    };
    DesignsTableComponent.prototype.ngOnChanges = function () {
        if (this.designs) {
            this.generateHeadersAndRows();
        }
    };
    DesignsTableComponent.prototype.generateHeadersAndRows = function () {
        var tableHeaders = [];
        var tableRows = [];
        var tableHeader = { title: 'Name', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Version', class: 'nowrap align-center' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Status', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Organization', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Description', class: '' };
        tableHeaders.push(tableHeader);
        for (var _i = 0, _a = this.designs; _i < _a.length; _i++) {
            var design = _a[_i];
            var cells = [];
            var tableCell = { valueHtml: design.name, class: '', truncateNumber: 50 };
            cells.push(tableCell);
            tableCell = { valueHtml: design.version, class: 'nowrap align-center', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: design.status, class: 'nowrap', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: '', class: 'nowrap', truncateNumber: 30 };
            this.setOrganizationCell(tableCell, design.organizationId);
            cells.push(tableCell);
            tableCell = { valueHtml: design.description, class: 'table-description', truncateNumber: 250 };
            cells.push(tableCell);
            var tableRow = { cells: cells };
            tableRows.push(tableRow);
        }
        this.tableHeaders = tableHeaders;
        this.tableRows = tableRows;
    };
    DesignsTableComponent.prototype.setOrganizationCell = function (tableCell, organizationId) {
        var _this = this;
        this.orgsService.getOrganizationName(organizationId).subscribe(function (organizationName) {
            tableCell.valueHtml = organizationName;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DesignsTableComponent.prototype, "designs", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DesignsTableComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function)
    ], DesignsTableComponent.prototype, "onRowClick", void 0);
    DesignsTableComponent = __decorate([
        core_1.Component({
            selector: 'designs-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/designs-table/designs-table.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _a) || Object, (typeof (_b = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _b) || Object])
    ], DesignsTableComponent);
    return DesignsTableComponent;
    var _a, _b;
}());
exports.DesignsTableComponent = DesignsTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/designs-table/designs-table.html":
/***/ function(module, exports) {

module.exports = "<mc-table [tableHeaders]=\"tableHeaders\" [tableRows]=\"tableRows\" [isLoading]=\"isLoading\" [onRowClick]=\"onRowClick\"></mc-table>\n"

/***/ },

/***/ "./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var logo_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/logo.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var EndorsedByListComponent = (function () {
    function EndorsedByListComponent(logoService, authService, orgService, navigationHelper) {
        this.logoService = logoService;
        this.authService = authService;
        this.orgService = orgService;
        this.navigationHelper = navigationHelper;
    }
    EndorsedByListComponent.prototype.ngOnInit = function () {
        this.cardTitle = this.title;
        this.generateEntityImageList();
    };
    EndorsedByListComponent.prototype.ngOnChanges = function () {
        this.cardTitle = this.title;
        this.generateEntityImageList();
    };
    EndorsedByListComponent.prototype.gotoDetails = function (entityModel) {
        if (this.isMyOrg(entityModel.entityId)) {
            this.navigationHelper.takeMeHome();
        }
        else {
            this.navigationHelper.navigateToOrganizationDetails(entityModel.entityId);
        }
    };
    EndorsedByListComponent.prototype.isMyOrg = function (orgMrn) {
        return this.authService.authState.orgMrn === orgMrn;
    };
    EndorsedByListComponent.prototype.generateEntityImageList = function () {
        var _this = this;
        if (this.endorsements) {
            if (this.endorsements !== this.oldEndorsements) {
                this.oldEndorsements = this.endorsements;
                this.entityImageList = [];
                this.endorsements.forEach(function (endorsement) {
                    var entityImage = { imageSourceObservable: _this.createImgObservable(endorsement.orgMrn), entityId: endorsement.orgMrn, title: endorsement.orgName };
                    _this.entityImageList.push(entityImage);
                });
            }
        }
    };
    EndorsedByListComponent.prototype.createImgObservable = function (orgMrn) {
        var _this = this;
        var imageSrc = 'assets/img/no_organization.png';
        return rxjs_1.Observable.create(function (observer) {
            _this.logoService.getLogoForOrganization(orgMrn).subscribe(function (logo) {
                observer.next(URL.createObjectURL(new Blob([logo])));
            }, function (err) {
                observer.next(imageSrc);
            });
        });
    };
    EndorsedByListComponent.prototype.setRealOrganizationName = function (entityImage, organizationMrn) {
        this.orgService.getOrganizationName(organizationMrn).subscribe(function (organizationName) {
            entityImage.title = organizationName;
        }, function (err) {
            // Do nothing. We already have a name set, which should be correct 99% of the time
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], EndorsedByListComponent.prototype, "endorsements", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], EndorsedByListComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], EndorsedByListComponent.prototype, "title", void 0);
    EndorsedByListComponent = __decorate([
        core_1.Component({
            selector: 'endorsed-by-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof logo_service_1.LogoService !== 'undefined' && logo_service_1.LogoService) === 'function' && _a) || Object, (typeof (_b = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _b) || Object, (typeof (_c = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _c) || Object, (typeof (_d = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _d) || Object])
    ], EndorsedByListComponent);
    return EndorsedByListComponent;
    var _a, _b, _c, _d;
}());
exports.EndorsedByListComponent = EndorsedByListComponent;


/***/ },

/***/ "./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html":
/***/ function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"col-lg-12\">\n    <ba-card title=\"{{cardTitle}}\" baCardClass=\"with-scroll table-panel\">\n      <mc-entity-image-list [noDataText]=\"'None'\" [isLoading]=\"isLoading\" [entityImageList]=\"entityImageList\" (onClick)=\"gotoDetails($event)\"></mc-entity-image-list>\n    </ba-card>\n  </div>\n</div>\n"

/***/ },

/***/ "./src/app/pages/shared/components/instances-table/instances-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var mc_utils_1 = __webpack_require__("./src/app/shared/mc-utils.ts");
var InstancesTableComponent = (function () {
    function InstancesTableComponent(orgsService, notifications) {
        this.orgsService = orgsService;
        this.notifications = notifications;
    }
    InstancesTableComponent.prototype.ngOnInit = function () {
    };
    InstancesTableComponent.prototype.ngOnChanges = function () {
        if (this.instances) {
            this.generateHeadersAndRows();
        }
    };
    InstancesTableComponent.prototype.generateHeadersAndRows = function () {
        var tableHeaders = [];
        var tableRows = [];
        var tableHeader = { title: 'Name', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Version', class: 'nowrap align-center' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Status', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Compliant', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Organization', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Service endpoint', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Description', class: '' };
        tableHeaders.push(tableHeader);
        for (var _i = 0, _a = this.instances; _i < _a.length; _i++) {
            var instance = _a[_i];
            var cells = [];
            var tableCell = { valueHtml: instance.name, class: '', truncateNumber: 45 };
            cells.push(tableCell);
            tableCell = { valueHtml: instance.version, class: 'nowrap align-center', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: instance.status, class: 'nowrap', truncateNumber: 0 };
            cells.push(tableCell);
            var compliantClass = instance.compliant ? '' : 'label-danger';
            tableCell = { valueHtml: mc_utils_1.McUtils.getYesNoString(instance.compliant), class: 'nowrap ' + compliantClass, truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: '', class: 'nowrap', truncateNumber: 25 };
            this.setOrganizationCell(tableCell, instance.organizationId);
            cells.push(tableCell);
            tableCell = { valueHtml: instance.endpointUri, class: 'list-endpoint', truncateNumber: 60 };
            cells.push(tableCell);
            tableCell = { valueHtml: instance.description, class: 'table-description-short', truncateNumber: 150 };
            cells.push(tableCell);
            var tableRow = { cells: cells };
            tableRows.push(tableRow);
        }
        this.tableHeaders = tableHeaders;
        this.tableRows = tableRows;
    };
    InstancesTableComponent.prototype.setOrganizationCell = function (tableCell, organizationId) {
        var _this = this;
        this.orgsService.getOrganizationName(organizationId).subscribe(function (organizationName) {
            tableCell.valueHtml = organizationName;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], InstancesTableComponent.prototype, "instances", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], InstancesTableComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function)
    ], InstancesTableComponent.prototype, "onRowClick", void 0);
    InstancesTableComponent = __decorate([
        core_1.Component({
            selector: 'instances-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/instances-table/instances-table.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _a) || Object, (typeof (_b = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _b) || Object])
    ], InstancesTableComponent);
    return InstancesTableComponent;
    var _a, _b;
}());
exports.InstancesTableComponent = InstancesTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/instances-table/instances-table.html":
/***/ function(module, exports) {

module.exports = "<mc-table [tableHeaders]=\"tableHeaders\" [tableRows]=\"tableRows\" [isLoading]=\"isLoading\" [onRowClick]=\"onRowClick\"></mc-table>\n"

/***/ },

/***/ "./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Organization_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Organization.ts");
var organization_view_model_service_1 = __webpack_require__("./src/app/pages/shared/services/organization-view-model.service.ts");
var logo_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/logo.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var OrganizationDetailsTableComponent = (function () {
    function OrganizationDetailsTableComponent(authService, logoService, orgViewModelService, notifications) {
        this.authService = authService;
        this.logoService = logoService;
        this.orgViewModelService = orgViewModelService;
        this.notifications = notifications;
        this.displayLogo = true;
        this.onLogoLoaded = new core_1.EventEmitter();
        this.isLoadingOrgAndLogo = true;
        this.uploadingLogo = false;
    }
    OrganizationDetailsTableComponent.prototype.ngOnChanges = function () {
        if (this.organization) {
            this.canChangeLogo = this.canChangeTheLogo();
            this.loadLogo();
        }
    };
    OrganizationDetailsTableComponent.prototype.uploadLogo = function (logo) {
        var _this = this;
        var oldLogo = this.logo;
        this.uploadingLogo = true;
        this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(function (logo) {
            _this.loadLogo();
        }, function (err) {
            _this.logo = oldLogo;
            _this.uploadingLogo = false;
            _this.notifications.generateNotification('Error', 'Error when trying to upload logo', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    OrganizationDetailsTableComponent.prototype.setLabelValues = function () {
        this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);
        this.isLoadingOrgAndLogo = false;
    };
    OrganizationDetailsTableComponent.prototype.loadLogo = function () {
        var _this = this;
        this.logoService.getLogoForOrganization(this.organization.mrn).subscribe(function (logo) {
            _this.logo = URL.createObjectURL(new Blob([logo]));
            _this.setLabelValues();
            _this.uploadingLogo = false;
            _this.onLogoLoaded.emit('');
        }, function (err) {
            if (_this.canChangeTheLogo()) {
                _this.logo = 'assets/img/no_organization.png';
            }
            _this.setLabelValues();
            _this.uploadingLogo = false;
            _this.onLogoLoaded.emit('');
        });
    };
    OrganizationDetailsTableComponent.prototype.canChangeTheLogo = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.OrgAdmin);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], OrganizationDetailsTableComponent.prototype, "displayLogo", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], OrganizationDetailsTableComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof Organization_1.Organization !== 'undefined' && Organization_1.Organization) === 'function' && _a) || Object)
    ], OrganizationDetailsTableComponent.prototype, "organization", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], OrganizationDetailsTableComponent.prototype, "onLogoLoaded", void 0);
    OrganizationDetailsTableComponent = __decorate([
        core_1.Component({
            selector: 'organization-details-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_c = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _c) || Object, (typeof (_d = typeof logo_service_1.LogoService !== 'undefined' && logo_service_1.LogoService) === 'function' && _d) || Object, (typeof (_e = typeof organization_view_model_service_1.OrganizationViewModelService !== 'undefined' && organization_view_model_service_1.OrganizationViewModelService) === 'function' && _e) || Object, (typeof (_f = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _f) || Object])
    ], OrganizationDetailsTableComponent);
    return OrganizationDetailsTableComponent;
    var _a, _b, _c, _d, _e, _f;
}());
exports.OrganizationDetailsTableComponent = OrganizationDetailsTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html":
/***/ function(module, exports) {

module.exports = "<div *ngIf=\"displayLogo && logo\" style=\"margin-bottom: 10px;\">\n  <img class=\"logo-image-no-center\" [attr.src]=\"logo | sanitizeUrl\" *ngIf=\"logo && !canChangeLogo\">\n  <mc-logo-uploader [logo]=\"logo\" [uploadingLogo]=\"uploadingLogo\" (onUpload)=\"uploadLogo($event)\" *ngIf=\"logo && canChangeLogo\"></mc-logo-uploader>\n</div>\n<mc-label-value-table [isLoading]=\"isLoadingOrgAndLogo\" [labelValues]=\"labelValues\"></mc-label-value-table>"

/***/ },

/***/ "./src/app/pages/shared/components/service-details-view/service-details-view.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Service_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/Service.ts");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var file_helper_service_1 = __webpack_require__("./src/app/shared/file-helper.service.ts");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var ServiceViewModel_1 = __webpack_require__("./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var id_services_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/id-services.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var app_constants_1 = __webpack_require__("./src/app/shared/app.constants.ts");
var instances_service_1 = __webpack_require__("./src/app/backend-api/service-registry/services/instances.service.ts");
var ServiceDetailsViewComponent = (function () {
    function ServiceDetailsViewComponent(fileHelperService, authService, servicesService, notifications, navigationHelperService, instancesService) {
        this.fileHelperService = fileHelperService;
        this.authService = authService;
        this.servicesService = servicesService;
        this.notifications = notifications;
        this.navigationHelperService = navigationHelperService;
        this.instancesService = instancesService;
        this.shouldShowDelete = true;
        this.shouldShowUpdate = true;
        this.shouldShowLinkToInstance = true;
        this.deleteAction = new core_1.EventEmitter();
        this.updateAction = new core_1.EventEmitter();
        this.linkToInstance = false;
        this.isLoadingInstance = false;
    }
    ServiceDetailsViewComponent.prototype.ngOnInit = function () {
        this.isLoadingInstance = true;
        this.entityType = certificate_helper_service_1.CertificateEntityType.Service;
        this.onGotoVessel = this.gotoVessel.bind(this);
        this.onGotoInstance = this.gotoInstance.bind(this);
    };
    ServiceDetailsViewComponent.prototype.ngOnChanges = function () {
        if (this.service) {
            this.entityMrn = this.service.mrn + app_constants_1.TOKEN_DELIMITER + this.service.instanceVersion;
            if (this.shouldShowLinkToInstance) {
                this.loadInstance();
            }
            else {
                this.generateLabelValues();
                this.isLoadingInstance = false;
            }
        }
    };
    ServiceDetailsViewComponent.prototype.loadInstance = function () {
        var _this = this;
        this.instancesService.getInstance(this.service.mrn, this.service.instanceVersion).subscribe(function (instance) {
            _this.linkToInstance = true;
            _this.generateLabelValues();
            _this.isLoadingInstance = false;
        }, function (err) {
            if (err.status == 404) {
                _this.linkToInstance = false;
                _this.generateLabelValues();
            }
            else {
                _this.notifications.generateNotification('Error', 'Error when trying to get the Instance for the ID service', mc_notifications_service_1.MCNotificationType.Error, err);
            }
            _this.isLoadingInstance = false;
        });
    };
    ServiceDetailsViewComponent.prototype.showDownload = function () {
        return this.service.oidcClientId && this.isAdmin();
    };
    ServiceDetailsViewComponent.prototype.downloadXML = function () {
        var _this = this;
        this.servicesService.getIdServiceJbossXml(this.service.mrn, this.service.instanceVersion).subscribe(function (xmlString) {
            _this.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to download the XML', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceDetailsViewComponent.prototype.downloadJSON = function () {
        var _this = this;
        this.servicesService.getServiceKeycloakJson(this.service.mrn, this.service.instanceVersion).subscribe(function (jsonString) {
            _this.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');
        }, function (err) {
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to download the JSON', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceDetailsViewComponent.prototype.generateLabelValues = function () {
        this.labelValues = [];
        if (this.service) {
            this.labelValues.push({ label: 'MRN', valueHtml: this.service.mrn });
            this.labelValues.push({ label: 'Name', valueHtml: this.service.name });
            this.labelValues.push({ label: 'Permissions', valueHtml: this.service.permissions });
            this.labelValues.push({ label: 'Certificate domain name', valueHtml: this.service.certDomainName });
            if (this.service.oidcRedirectUri) {
                this.labelValues.push({ label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri });
            }
            if (this.service.oidcClientId) {
                this.labelValues.push({ label: 'OIDC Client ID', valueHtml: this.service.oidcClientId });
            }
            if (this.service.oidcClientSecret) {
                this.labelValues.push({ label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret });
            }
            if (this.service.oidcAccessType) {
                this.labelValues.push({ label: 'Access type', valueHtml: ServiceViewModel_1.ServiceViewModel.getLabelForEnum(this.service.oidcAccessType) });
            }
            this.generateLabelValueForVessel();
            this.generateLabelValueForInstance();
        }
    };
    ServiceDetailsViewComponent.prototype.generateLabelValueForVessel = function () {
        var vessel = this.service.vessel;
        if (vessel) {
            var label = 'Linked vessel';
            this.labelValues.push({ label: label, valueHtml: vessel.name, linkFunction: this.onGotoVessel, linkValue: [vessel.mrn] });
        }
    };
    ServiceDetailsViewComponent.prototype.generateLabelValueForInstance = function () {
        if (this.shouldShowLinkToInstance && this.linkToInstance) {
            var label = 'Linked Instance';
            this.labelValues.push({ label: label, valueHtml: this.service.name, linkFunction: this.onGotoInstance, linkValue: [this.service.mrn, this.service.instanceVersion] });
        }
    };
    ServiceDetailsViewComponent.prototype.showDelete = function () {
        return this.shouldShowDelete && this.isAdmin() && this.service != null;
    };
    ServiceDetailsViewComponent.prototype.showUpdate = function () {
        return this.shouldShowUpdate && this.isAdmin() && this.service != null;
    };
    ServiceDetailsViewComponent.prototype.isAdmin = function () {
        return this.authService.authState.hasPermission(auth_service_1.AuthPermission.ServiceAdmin);
    };
    ServiceDetailsViewComponent.prototype.delete = function () {
        this.deleteAction.emit('');
    };
    ServiceDetailsViewComponent.prototype.update = function () {
        this.updateAction.emit('');
    };
    ServiceDetailsViewComponent.prototype.gotoInstance = function (linkValue) {
        try {
            this.navigationHelperService.navigateToOrgInstance(linkValue[0], linkValue[1]);
        }
        catch (error) {
            this.notifications.generateNotification('Error', 'Error when trying to go to instance', mc_notifications_service_1.MCNotificationType.Error, error);
        }
    };
    ServiceDetailsViewComponent.prototype.gotoVessel = function (linkValue) {
        try {
            this.navigationHelperService.navigateToVessel(linkValue[0]);
        }
        catch (error) {
            this.notifications.generateNotification('Error', 'Error when trying to go to vessel', mc_notifications_service_1.MCNotificationType.Error, error);
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof Service_1.Service !== 'undefined' && Service_1.Service) === 'function' && _a) || Object)
    ], ServiceDetailsViewComponent.prototype, "service", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceDetailsViewComponent.prototype, "shouldShowDelete", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceDetailsViewComponent.prototype, "shouldShowUpdate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceDetailsViewComponent.prototype, "shouldShowLinkToInstance", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceDetailsViewComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ServiceDetailsViewComponent.prototype, "title", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], ServiceDetailsViewComponent.prototype, "deleteAction", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
    ], ServiceDetailsViewComponent.prototype, "updateAction", void 0);
    ServiceDetailsViewComponent = __decorate([
        core_1.Component({
            selector: 'service-details-view',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/service-details-view/service-details-view.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_d = typeof file_helper_service_1.FileHelperService !== 'undefined' && file_helper_service_1.FileHelperService) === 'function' && _d) || Object, (typeof (_e = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _e) || Object, (typeof (_f = typeof id_services_service_1.IdServicesService !== 'undefined' && id_services_service_1.IdServicesService) === 'function' && _f) || Object, (typeof (_g = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _g) || Object, (typeof (_h = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _h) || Object, (typeof (_j = typeof instances_service_1.InstancesService !== 'undefined' && instances_service_1.InstancesService) === 'function' && _j) || Object])
    ], ServiceDetailsViewComponent);
    return ServiceDetailsViewComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
}());
exports.ServiceDetailsViewComponent = ServiceDetailsViewComponent;


/***/ },

/***/ "./src/app/pages/shared/components/service-details-view/service-details-view.html":
/***/ function(module, exports) {

module.exports = "<ba-card title=\"{{title}}\" baCardClass=\"with-scroll table-panel\">\n  <mc-label-value-table [isLoading]=\"isLoading || isLoadingInstance\" [labelValues]=\"labelValues\"></mc-label-value-table>\n  <ul *ngIf=\"!isLoading && service && (showDownload() || showDelete() || showUpdate())\" class=\"btn-list clearfix\">\n    <li *ngIf=\"showDownload()\">\n      <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"downloadXML()\">Download JBOSS XML</button>\n    </li>\n    <li *ngIf=\"showDownload()\">\n      <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"downloadJSON()\">Download Keycloak JSON</button>\n    </li>\n    <li *ngIf=\"showUpdate()\">\n      <button type=\"button\" class=\"btn btn-primary btn-raised\" (click)=\"update()\">Update</button>\n    </li>\n    <li *ngIf=\"showDelete()\">\n      <button type=\"button\" class=\"btn btn-danger btn-raised\" (click)=\"delete()\">Delete Service</button>\n    </li>\n  </ul>\n</ba-card>\n\n<div *ngIf=\"service\">\n  <ba-card title=\"Certificates for {{service.name}}\" baCardClass=\"with-scroll table-panel\">\n    <certificates-table [isAdmin]=\"isAdmin()\" [entityMrn]=\"entityMrn\" [isLoading]=\"isLoading\" [certificateTitle]=\"service.name\" [certificateEntityType]=\"entityType\" [certificates]=\"service.certificates\"></certificates-table>\n  </ba-card>\n</div>"

/***/ },

/***/ "./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var auth_service_1 = __webpack_require__("./src/app/authentication/services/auth.service.ts");
var sr_search_requests_service_1 = __webpack_require__("./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts");
var app_constants_1 = __webpack_require__("./src/app/shared/app.constants.ts");
var ServiceRegistrySearchComponent = (function () {
    function ServiceRegistrySearchComponent(searchRequestsService, changeDetector, authService, formBuilder, orgsService, notifications) {
        this.searchRequestsService = searchRequestsService;
        this.changeDetector = changeDetector;
        this.authService = authService;
        this.orgsService = orgsService;
        this.notifications = notifications;
        this.showKeywords = true;
        this.onSearch = new core_1.EventEmitter();
        this.endorsementMainSwitch = app_constants_1.SHOW_ENDORSEMENTS;
        this.formGroup = formBuilder.group({});
    }
    ServiceRegistrySearchComponent.prototype.ngOnDestroy = function () {
        this.changeDetector.detach();
    };
    ServiceRegistrySearchComponent.prototype.ngOnInit = function () {
        this.onSearchFunction = this.search.bind(this);
        this.isCollapsed = false;
        this.setClass();
        this.isLoading = true;
        this.generateForm();
        this.loadOrganizations();
    };
    ServiceRegistrySearchComponent.prototype.toggle = function () {
        this.isCollapsed = !this.isCollapsed;
        this.setClass();
    };
    ServiceRegistrySearchComponent.prototype.setClass = function () {
        this.toggleClass = this.isCollapsed ? 'fa fa-caret-square-o-down' : 'fa fa-caret-square-o-up';
    };
    ServiceRegistrySearchComponent.prototype.search = function () {
        var keywords = this.formGroup.value.keywords;
        var endorsedBy;
        var registeredBy;
        var registeredByValue = this.formGroup.value.registeredBy;
        if (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {
            registeredBy = registeredByValue;
        }
        var endorsedByValue = this.formGroup.value.endorsedBy;
        if (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {
            endorsedBy = endorsedByValue;
        }
        this.doSearch(keywords, registeredBy, endorsedBy);
    };
    ServiceRegistrySearchComponent.prototype.searchFromRegisteredBy = function (registeredBy) {
        var keywords = this.formGroup.value.keywords;
        var endorsedBy;
        if (registeredBy && registeredBy.toLowerCase().indexOf('undefined') > -1) {
            registeredBy = undefined;
        }
        var endorsedByValue = this.formGroup.value.endorsedBy;
        if (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {
            endorsedBy = endorsedByValue;
        }
        this.doSearch(keywords, registeredBy, endorsedBy);
    };
    ServiceRegistrySearchComponent.prototype.searchFromEndorsedBy = function (endorsedBy) {
        var keywords = this.formGroup.value.keywords;
        var registeredBy;
        var registeredByValue = this.formGroup.value.registeredBy;
        if (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {
            registeredBy = registeredByValue;
        }
        if (endorsedBy && endorsedBy.toLowerCase().indexOf('undefined') > -1) {
            endorsedBy = undefined;
        }
        this.doSearch(keywords, registeredBy, endorsedBy);
    };
    ServiceRegistrySearchComponent.prototype.doSearch = function (keywords, registeredBy, endorsedBy) {
        var searchRequest = { keywords: keywords, registeredBy: registeredBy, endorsedBy: endorsedBy };
        this.searchRequestsService.addSearchRequest(this.searchKey, searchRequest);
        this.notifications.errorLog = null; // Remove error log if it is present
        this.onSearch.emit(searchRequest);
    };
    ServiceRegistrySearchComponent.prototype.generateForm = function () {
        var formControl = new forms_1.FormControl('');
        this.formGroup.addControl('keywords', formControl);
        formControl = new forms_1.FormControl(undefined);
        this.formGroup.addControl('registeredBy', formControl);
        formControl = new forms_1.FormControl(undefined);
        this.formGroup.addControl('endorsedBy', formControl);
    };
    ServiceRegistrySearchComponent.prototype.loadOrganizations = function () {
        var _this = this;
        this.orgsService.getAllOrganizations().subscribe(function (organizations) {
            _this.setupSearchRequest(organizations);
            _this.isLoading = false;
        }, function (err) {
            _this.setupSearchRequest([]);
            _this.isLoading = false;
            _this.notifications.generateNotification('Error', 'Error when trying to get organizations', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServiceRegistrySearchComponent.prototype.setupSearchRequest = function (organizations) {
        var _this = this;
        this.selectValuesOrganizations = [];
        this.selectValuesOrganizations.push({ value: undefined, label: 'All' });
        this.selectValuesOrganizationsForEndorsement = [];
        this.selectValuesOrganizationsForEndorsement.push({ value: undefined, label: 'No filter' });
        organizations.forEach(function (organization) {
            _this.selectValuesOrganizations.push({ value: organization.mrn, label: organization.name });
            _this.selectValuesOrganizationsForEndorsement.push({ value: organization.mrn, label: organization.name });
        });
        var registeredBy;
        var endorsedBy;
        var keywords = '';
        var searchRequest = this.searchRequestsService.getSearchRequest(this.searchKey);
        if (searchRequest) {
            registeredBy = searchRequest.registeredBy;
            endorsedBy = searchRequest.endorsedBy;
            if (searchRequest.keywords) {
                keywords = searchRequest.keywords;
            }
        }
        else if (this.preFilterMyOrg) {
            registeredBy = this.authService.authState.orgMrn;
        }
        this.formGroup.patchValue({ registeredBy: registeredBy });
        this.formGroup.patchValue({ endorsedBy: endorsedBy });
        this.formGroup.patchValue({ keywords: keywords });
        this.formGroup.controls['registeredBy'].valueChanges.subscribe(function (param) { return _this.searchFromRegisteredBy(param); });
        this.formGroup.controls['endorsedBy'].valueChanges.subscribe(function (param) { return _this.searchFromEndorsedBy(param); });
        this.changeDetector.detectChanges();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ServiceRegistrySearchComponent.prototype, "searchTitle", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ServiceRegistrySearchComponent.prototype, "searchKey", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceRegistrySearchComponent.prototype, "isSearching", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceRegistrySearchComponent.prototype, "preFilterMyOrg", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceRegistrySearchComponent.prototype, "showEndorsement", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServiceRegistrySearchComponent.prototype, "showKeywords", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], ServiceRegistrySearchComponent.prototype, "onSearch", void 0);
    ServiceRegistrySearchComponent = __decorate([
        core_1.Component({
            selector: 'service-registry-search',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/service-registry-search/service-registry-search.html"),
            styles: [__webpack_require__("./src/app/pages/shared/components/service-registry-search/service-registry-search.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof sr_search_requests_service_1.SrSearchRequestsService !== 'undefined' && sr_search_requests_service_1.SrSearchRequestsService) === 'function' && _b) || Object, (typeof (_c = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _c) || Object, (typeof (_d = typeof auth_service_1.AuthService !== 'undefined' && auth_service_1.AuthService) === 'function' && _d) || Object, (typeof (_e = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _e) || Object, (typeof (_f = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _f) || Object, (typeof (_g = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _g) || Object])
    ], ServiceRegistrySearchComponent);
    return ServiceRegistrySearchComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.ServiceRegistrySearchComponent = ServiceRegistrySearchComponent;


/***/ },

/***/ "./src/app/pages/shared/components/service-registry-search/service-registry-search.html":
/***/ function(module, exports) {

module.exports = "<a class=\"search-link\" (click)=\"toggle()\">\n  <h4>{{searchTitle}} <i style=\"margin-left:2px;color: white; font-size: 16px;\" class=\"{{toggleClass}}\" aria-hidden=\"true\"></i></h4>\n</a>\n<div class=\"mc-form-group\" style=\"margin-bottom: 0px !important;\" *ngIf=\"!isCollapsed && !isLoading && formGroup\">\n  <form [formGroup]=\"formGroup\">\n    <div *ngIf=\"showKeywords\" class=\"row\">\n      <div class=\"col-sm-12\">\n        <div [formGroup]=\"formGroup\" class=\"form-group mc-form-group\">\n          <label class=\"mc-form-label\">Keywords\n            <div class=\"input-group\">\n              <input type=\"text\" class=\"form-control mc-form-control\" formControlName=\"keywords\">\n              <span class=\"mc-form-control-input-group-btn input-group-btn\">\n                <mc-loading-button [type]=\"'submit'\" [class]=\"'btn btn-primary search-button'\" [isLoading]=\"isSearching\" [title]=\"'Search'\" [onClick]=\"onSearchFunction\" ></mc-loading-button>\n              </span>\n            </div>\n          </label>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <div [formGroup]=\"formGroup\" class=\"form-group mc-form-group\" style=\"margin-bottom: 0px !important;\">\n          <label class=\"mc-form-label\">Registered by\n            <select class=\"form-control mc-form-control mc-form-control-select\" formControlName=\"registeredBy\">\n              <option *ngFor=\"let selectValue of selectValuesOrganizations\" [ngValue]=\"selectValue.value\">\n                {{selectValue.label}}\n              </option>\n            </select>\n          </label>\n        </div>\n      </div>\n      <div *ngIf=\"showEndorsement && endorsementMainSwitch\" class=\"col-sm-6\">\n        <div [formGroup]=\"formGroup\" class=\"form-group mc-form-group\" style=\"margin-bottom: 0px !important;\">\n          <label class=\"mc-form-label\">Endorsed by\n            <select class=\"form-control mc-form-control mc-form-control-select\" formControlName=\"endorsedBy\">\n              <option *ngFor=\"let selectValue of selectValuesOrganizationsForEndorsement\" [ngValue]=\"selectValue.value\">\n                {{selectValue.label}}\n              </option>\n            </select>\n          </label>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n<div *ngIf=\"!isCollapsed\">\n  <sk-fading-circle [isRunning]=\"isLoading\" ></sk-fading-circle>\n</div>\n"

/***/ },

/***/ "./src/app/pages/shared/components/service-registry-search/service-registry-search.scss":
/***/ function(module, exports) {

module.exports = ".mc-form-label {\n  width: 100%; }\n\n.mc-form-control {\n  margin-top: 5px; }\n\n.mc-form-control:read-only {\n  cursor: not-allowed;\n  color: rgba(255, 255, 255, 0.7); }\n\n.mc-form-control-success {\n  border: 1px solid #8bd22f !important; }\n  .mc-form-control-success:focus {\n    border: 1px solid #aee06d !important; }\n\n.mc-form-control-error {\n  border: 1px solid #f95372 !important; }\n  .mc-form-control-error:focus {\n    border: 1px solid #fb879c !important; }\n\n.mc-form-group {\n  max-width: 450px;\n  margin-bottom: 0.5rem !important; }\n\n.mc-form-control-feedback {\n  top: 20px !important;\n  right: 10px !important; }\n\n.mc-form-control-select:read-only {\n  cursor: default !important;\n  color: #ffffff !important; }\n\n.search-link {\n  cursor: pointer;\n  color: #ffffff; }\n  .search-link:hover {\n    transform: none;\n    color: #ffffff; }\n\n.mc-form-control-input-group-btn {\n  padding-top: 5px; }\n\n.search-button {\n  border-bottom-left-radius: 0 !important;\n  border-top-left-radius: 0 !important; }\n  .search-button:hover {\n    transform: none; }\n\n.input-group {\n  margin-bottom: 0px !important; }\n"

/***/ },

/***/ "./src/app/pages/shared/components/services-table/services-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var instances_service_1 = __webpack_require__("./src/app/backend-api/service-registry/services/instances.service.ts");
var bug_reporting_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/bug-reporting.service.ts");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var navigation_helper_service_1 = __webpack_require__("./src/app/shared/navigation-helper.service.ts");
var ServicesTableComponent = (function () {
    function ServicesTableComponent(navigationHelperService, orgsService, notifications, instancesService, bugService) {
        this.navigationHelperService = navigationHelperService;
        this.orgsService = orgsService;
        this.notifications = notifications;
        this.instancesService = instancesService;
        this.bugService = bugService;
    }
    ServicesTableComponent.prototype.ngOnInit = function () {
        this.onRowClick = this.gotoService.bind(this);
    };
    ServicesTableComponent.prototype.ngOnChanges = function () {
        if (this.services) {
            this.loadMyOrganization();
        }
    };
    ServicesTableComponent.prototype.loadMyOrganization = function () {
        var _this = this;
        this.orgsService.getMyOrganization().subscribe(function (organization) {
            _this.generateHeadersAndRows(organization.mrn);
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServicesTableComponent.prototype.generateHeadersAndRows = function (orgMrn) {
        var tableHeaders = [];
        var tableRows = [];
        var tableHeader = { title: 'Name', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Version', class: 'nowrap align-center' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Organization', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        for (var _i = 0, _a = this.services; _i < _a.length; _i++) {
            var service = _a[_i];
            var cells = [];
            var tableCell = { valueHtml: service.name, class: '', truncateNumber: 250 };
            cells.push(tableCell);
            tableCell = { valueHtml: service.instanceVersion, class: 'nowrap align-center', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: '', class: 'nowrap', truncateNumber: 30 };
            this.setOrganizationCell(tableCell, orgMrn);
            cells.push(tableCell);
            var tableRow = { cells: cells };
            tableRows.push(tableRow);
        }
        this.tableHeaders = tableHeaders;
        this.tableRows = tableRows;
    };
    ServicesTableComponent.prototype.setOrganizationCell = function (tableCell, organizationId) {
        var _this = this;
        this.orgsService.getOrganizationName(organizationId).subscribe(function (organizationName) {
            tableCell.valueHtml = organizationName;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    ServicesTableComponent.prototype.gotoService = function (index) {
        var _this = this;
        var mrn = this.services[index].mrn;
        var version = this.services[index].instanceVersion;
        this.isLoading = true;
        this.instancesService.getInstance(mrn, version).subscribe(function (instance) {
            _this.navigationHelperService.navigateToOrgInstance(mrn, version);
        }, function (err) {
            if (err.status == 404) {
                // when using the portal only to register instances, this should never happen. However, if someone uses the SR api only then there might be something missing. We log it for further investigation
                var bugReport = { subject: "Missing instance", description: "There is a service in the IR that doesn't exist in the SR.\n\n MRN: " + mrn + ",\nVersion: " + version };
                _this.bugService.reportBug(bugReport);
            }
            _this.navigationHelperService.navigateToOrgInstance(mrn, version);
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ServicesTableComponent.prototype, "services", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ServicesTableComponent.prototype, "isLoading", void 0);
    ServicesTableComponent = __decorate([
        core_1.Component({
            selector: 'services-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/services-table/services-table.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigation_helper_service_1.NavigationHelperService !== 'undefined' && navigation_helper_service_1.NavigationHelperService) === 'function' && _a) || Object, (typeof (_b = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _b) || Object, (typeof (_c = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _c) || Object, (typeof (_d = typeof instances_service_1.InstancesService !== 'undefined' && instances_service_1.InstancesService) === 'function' && _d) || Object, (typeof (_e = typeof bug_reporting_service_1.BugReportingService !== 'undefined' && bug_reporting_service_1.BugReportingService) === 'function' && _e) || Object])
    ], ServicesTableComponent);
    return ServicesTableComponent;
    var _a, _b, _c, _d, _e;
}());
exports.ServicesTableComponent = ServicesTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/services-table/services-table.html":
/***/ function(module, exports) {

module.exports = "<mc-table [tableHeaders]=\"tableHeaders\" [tableRows]=\"tableRows\" [isLoading]=\"isLoading\" [onRowClick]=\"onRowClick\"></mc-table>\n"

/***/ },

/***/ "./src/app/pages/shared/components/specifications-table/specifications-table.component.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var organizations_service_1 = __webpack_require__("./src/app/backend-api/identity-registry/services/organizations.service.ts");
var mc_notifications_service_1 = __webpack_require__("./src/app/shared/mc-notifications.service.ts");
var SpecificationsTableComponent = (function () {
    function SpecificationsTableComponent(orgsService, notifications) {
        this.orgsService = orgsService;
        this.notifications = notifications;
    }
    SpecificationsTableComponent.prototype.ngOnInit = function () {
    };
    SpecificationsTableComponent.prototype.ngOnChanges = function () {
        if (this.specifications) {
            this.generateHeadersAndRows();
        }
    };
    SpecificationsTableComponent.prototype.generateHeadersAndRows = function () {
        var tableHeaders = [];
        var tableRows = [];
        var tableHeader = { title: 'Name', class: '' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Version', class: 'nowrap align-center' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Status', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Organization', class: 'nowrap' };
        tableHeaders.push(tableHeader);
        tableHeader = { title: 'Description', class: '' };
        tableHeaders.push(tableHeader);
        for (var _i = 0, _a = this.specifications; _i < _a.length; _i++) {
            var specification = _a[_i];
            var cells = [];
            var tableCell = { valueHtml: specification.name, class: '', truncateNumber: 50 };
            cells.push(tableCell);
            tableCell = { valueHtml: specification.version, class: 'nowrap align-center', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: specification.status, class: 'nowrap', truncateNumber: 0 };
            cells.push(tableCell);
            tableCell = { valueHtml: '', class: 'nowrap', truncateNumber: 30 };
            this.setOrganizationCell(tableCell, specification.organizationId);
            cells.push(tableCell);
            tableCell = { valueHtml: specification.description, class: 'table-description', truncateNumber: 250 };
            cells.push(tableCell);
            var tableRow = { cells: cells };
            tableRows.push(tableRow);
        }
        this.tableHeaders = tableHeaders;
        this.tableRows = tableRows;
    };
    SpecificationsTableComponent.prototype.setOrganizationCell = function (tableCell, organizationId) {
        var _this = this;
        this.orgsService.getOrganizationName(organizationId).subscribe(function (organizationName) {
            tableCell.valueHtml = organizationName;
        }, function (err) {
            _this.notifications.generateNotification('Error', 'Error when trying to get organization', mc_notifications_service_1.MCNotificationType.Error, err);
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], SpecificationsTableComponent.prototype, "specifications", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], SpecificationsTableComponent.prototype, "isLoading", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function)
    ], SpecificationsTableComponent.prototype, "onRowClick", void 0);
    SpecificationsTableComponent = __decorate([
        core_1.Component({
            selector: 'specifications-table',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/pages/shared/components/specifications-table/specifications-table.html"),
            styles: []
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof organizations_service_1.OrganizationsService !== 'undefined' && organizations_service_1.OrganizationsService) === 'function' && _a) || Object, (typeof (_b = typeof mc_notifications_service_1.MCNotificationsService !== 'undefined' && mc_notifications_service_1.MCNotificationsService) === 'function' && _b) || Object])
    ], SpecificationsTableComponent);
    return SpecificationsTableComponent;
    var _a, _b;
}());
exports.SpecificationsTableComponent = SpecificationsTableComponent;


/***/ },

/***/ "./src/app/pages/shared/components/specifications-table/specifications-table.html":
/***/ function(module, exports) {

module.exports = "<mc-table [tableHeaders]=\"tableHeaders\" [tableRows]=\"tableRows\" [isLoading]=\"isLoading\" [onRowClick]=\"onRowClick\"></mc-table>\n"

/***/ },

/***/ "./src/app/pages/shared/services/organization-view-model.service.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var OrganizationViewModelService = (function () {
    function OrganizationViewModelService() {
    }
    OrganizationViewModelService.prototype.ngOnInit = function () {
    };
    OrganizationViewModelService.prototype.generateLabelValuesForOrganization = function (organization) {
        var labelValues = undefined;
        if (organization) {
            labelValues = [];
            labelValues.push({ label: 'MRN', valueHtml: organization.mrn });
            labelValues.push({ label: 'Name', valueHtml: organization.name });
            labelValues.push({ label: 'Address', valueHtml: organization.address });
            labelValues.push({ label: 'Country', valueHtml: organization.country });
            if (organization.email) {
                labelValues.push({ label: 'Email', valueHtml: "<a href='mailto:" + organization.email + "'>" + organization.email + "</a>" });
            }
            if (organization.url) {
                labelValues.push({ label: 'Website', valueHtml: "<a href='" + organization.url + "' target='_blank'>" + organization.url + "</a>" });
            }
        }
        return labelValues;
    };
    OrganizationViewModelService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], OrganizationViewModelService);
    return OrganizationViewModelService;
}());
exports.OrganizationViewModelService = OrganizationViewModelService;


/***/ },

/***/ "./src/app/pages/shared/services/vessel-helper.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var VesselAttribute_1 = __webpack_require__("./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts");
var AttributeNameEnum = VesselAttribute_1.VesselAttribute.AttributeNameEnum;
var VesselHelper = (function () {
    function VesselHelper() {
    }
    VesselHelper.isVesselAttEqualTo = function (vessel, imoNumber, mmsiNumber) {
        imoNumber = imoNumber || '';
        mmsiNumber = mmsiNumber || '';
        return imoNumber === VesselHelper.getIMO(vessel) && mmsiNumber === VesselHelper.getMMSI(vessel);
    };
    VesselHelper.labelForSelect = function (vessel) {
        var imo = VesselHelper.getIMO(vessel);
        var mmsi = VesselHelper.getMMSI(vessel);
        return vessel.name + ", IMO:" + (imo.length == 0 ? ' - ' : imo) + ", MMSI:" + (mmsi.length == 0 ? ' - ' : mmsi);
    };
    // Returns empty string if no IMO exists for the vessel
    VesselHelper.getIMO = function (vessel) {
        var imo = '';
        vessel.attributes.forEach(function (att) {
            if (att.attributeName === AttributeNameEnum.ImoNumber) {
                imo = att.attributeValue;
            }
        });
        return imo;
    };
    // Returns empty string if no MMSI exists for the vessel
    VesselHelper.getMMSI = function (vessel) {
        var mmsi = '';
        vessel.attributes.forEach(function (att) {
            if (att.attributeName === AttributeNameEnum.MmsiNumber) {
                mmsi = att.attributeValue;
            }
        });
        return mmsi;
    };
    return VesselHelper;
}());
exports.VesselHelper = VesselHelper;


/***/ },

/***/ "./src/app/pages/shared/shared.module.ts":
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var designs_table_component_1 = __webpack_require__("./src/app/pages/shared/components/designs-table/designs-table.component.ts");
var specifications_table_component_1 = __webpack_require__("./src/app/pages/shared/components/specifications-table/specifications-table.component.ts");
var nga_module_1 = __webpack_require__("./src/app/theme/nga.module.ts");
var instances_table_component_1 = __webpack_require__("./src/app/pages/shared/components/instances-table/instances-table.component.ts");
var sr_view_model_service_1 = __webpack_require__("./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts");
var certificates_table_component_1 = __webpack_require__("./src/app/pages/shared/components/certificates-table/certificates-table.component.ts");
var certificate_helper_service_1 = __webpack_require__("./src/app/pages/shared/services/certificate-helper.service.ts");
var organization_details_table_component_1 = __webpack_require__("./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts");
var organization_view_model_service_1 = __webpack_require__("./src/app/pages/shared/services/organization-view-model.service.ts");
var certificate_issue_new_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts");
var service_details_view_component_1 = __webpack_require__("./src/app/pages/shared/components/service-details-view/service-details-view.component.ts");
var certificate_revoke_component_1 = __webpack_require__("./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts");
var service_registry_search_component_1 = __webpack_require__("./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var sr_search_requests_service_1 = __webpack_require__("./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts");
var endorsed_by_list_component_1 = __webpack_require__("./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts");
var services_table_component_1 = __webpack_require__("./src/app/pages/shared/components/services-table/services-table.component.ts");
var SharedModule = (function () {
    function SharedModule() {
    }
    SharedModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                nga_module_1.NgaModule,
                forms_1.ReactiveFormsModule
            ],
            declarations: [
                designs_table_component_1.DesignsTableComponent,
                instances_table_component_1.InstancesTableComponent,
                specifications_table_component_1.SpecificationsTableComponent,
                certificates_table_component_1.CertificatesTableComponent,
                organization_details_table_component_1.OrganizationDetailsTableComponent,
                certificate_issue_new_component_1.CertificateIssueNewComponent,
                certificate_revoke_component_1.CertificateRevokeComponent,
                service_details_view_component_1.ServiceDetailsViewComponent,
                service_registry_search_component_1.ServiceRegistrySearchComponent,
                endorsed_by_list_component_1.EndorsedByListComponent,
                services_table_component_1.ServicesTableComponent
            ],
            exports: [
                organization_details_table_component_1.OrganizationDetailsTableComponent,
                designs_table_component_1.DesignsTableComponent,
                instances_table_component_1.InstancesTableComponent,
                specifications_table_component_1.SpecificationsTableComponent,
                certificates_table_component_1.CertificatesTableComponent,
                certificate_issue_new_component_1.CertificateIssueNewComponent,
                certificate_revoke_component_1.CertificateRevokeComponent,
                service_details_view_component_1.ServiceDetailsViewComponent,
                service_registry_search_component_1.ServiceRegistrySearchComponent,
                endorsed_by_list_component_1.EndorsedByListComponent,
                services_table_component_1.ServicesTableComponent,
            ],
            providers: [
                sr_view_model_service_1.SrViewModelService,
                certificate_helper_service_1.CertificateHelperService,
                organization_view_model_service_1.OrganizationViewModelService,
                sr_search_requests_service_1.SrSearchRequestsService
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], SharedModule);
    return SharedModule;
}());
exports.SharedModule = SharedModule;


/***/ }

});
//# sourceMappingURL=0.c8f613972b2cf5cd78ba.map