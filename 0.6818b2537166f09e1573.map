{"version":3,"file":"0.facdd2700e131a985487.chunk.js","sources":["webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts","webpack:///./src/app/backend-api/identity-registry/autogen/model/Service.ts","webpack:///./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts","webpack:///./src/app/pages/org-identity-registry/acting/acting-list/acting-list.component.ts","webpack:///./src/app/pages/org-identity-registry/acting/acting-list/acting-list.html","webpack:///./src/app/pages/org-identity-registry/acting/acting.component.ts","webpack:///./src/app/pages/org-identity-registry/acting/acting.module.ts","webpack:///./src/app/pages/org-identity-registry/acting/acting.routing.ts","webpack:///./src/app/pages/org-identity-registry/agents/agents.component.ts","webpack:///./src/app/pages/org-identity-registry/agents/agents.module.ts","webpack:///./src/app/pages/org-identity-registry/agents/agents.routing.ts","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.component.ts","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.html","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.component.ts","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.html","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.component.ts","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.html","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.component.ts","webpack:///./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-update/device-update.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-update/device-update.html","webpack:///./src/app/pages/org-identity-registry/devices/devices.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/devices.module.ts","webpack:///./src/app/pages/org-identity-registry/devices/devices.routing.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.component.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.module.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.routing.ts","webpack:///./src/app/pages/org-identity-registry/roles/components/role-details/role-details.component.ts","webpack:///./src/app/pages/org-identity-registry/roles/components/role-details/role-details.html","webpack:///./src/app/pages/org-identity-registry/roles/components/role-list/role-list.component.ts","webpack:///./src/app/pages/org-identity-registry/roles/components/role-list/role-list.html","webpack:///./src/app/pages/org-identity-registry/roles/components/role-new/role-new.component.ts","webpack:///./src/app/pages/org-identity-registry/roles/components/role-new/role-new.html","webpack:///./src/app/pages/org-identity-registry/roles/components/role-update/role-update.component.ts","webpack:///./src/app/pages/org-identity-registry/roles/components/role-update/role-update.html","webpack:///./src/app/pages/org-identity-registry/roles/roles.component.ts","webpack:///./src/app/pages/org-identity-registry/roles/roles.module.ts","webpack:///./src/app/pages/org-identity-registry/roles/roles.routing.ts","webpack:///./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.html","webpack:///./src/app/pages/org-identity-registry/services/services.component.ts","webpack:///./src/app/pages/org-identity-registry/services/services.module.ts","webpack:///./src/app/pages/org-identity-registry/services/services.routing.ts","webpack:///./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","webpack:///./src/app/pages/org-identity-registry/users/components/user-details/user-details.component.ts","webpack:///./src/app/pages/org-identity-registry/users/components/user-details/user-details.html","webpack:///./src/app/pages/org-identity-registry/users/components/user-list/user-list.component.ts","webpack:///./src/app/pages/org-identity-registry/users/components/user-list/user-list.html","webpack:///./src/app/pages/org-identity-registry/users/components/user-new/user-new.component.ts","webpack:///./src/app/pages/org-identity-registry/users/components/user-new/user-new.html","webpack:///./src/app/pages/org-identity-registry/users/components/user-update/user-update.component.ts","webpack:///./src/app/pages/org-identity-registry/users/components/user-update/user-update.html","webpack:///./src/app/pages/org-identity-registry/users/users.component.ts","webpack:///./src/app/pages/org-identity-registry/users/users.module.ts","webpack:///./src/app/pages/org-identity-registry/users/users.routing.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.html","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.module.ts","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.routing.ts","webpack:///./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts","webpack:///./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts","webpack:///./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts","webpack:///./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.html","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.html","webpack:///./src/app/pages/shared/components/service-registry-search/service-registry-search.scss","webpack:///./src/app/pages/shared/components/services-table/services-table.component.ts","webpack:///./src/app/pages/shared/components/services-table/services-table.html","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts","webpack:///./src/app/pages/shared/services/vessel-helper.ts","webpack:///./src/app/pages/shared/shared.module.ts"],"sourcesContent":["/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Organization {\n    address: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    country: string;\n\n    createdAt?: Date;\n\n    email: string;\n\n    /**\n     * Type of identity federation used by organization\n     */\n    federationType?: Organization.FederationTypeEnum;\n\n    id?: number;\n\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    /**\n     * The name of the organization\n     */\n    name: string;\n\n    updatedAt?: Date;\n\n    url: string;\n\n}\nexport namespace Organization {\n    export enum FederationTypeEnum {\n        TestIdp = <any> 'test-idp',\n        OwnIdp = <any> 'own-idp',\n        ExternalIdp = <any> 'external-idp'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface Service {\n    /**\n     * The domain name the service will be available on. Used in the issued certificates for the service.\n     */\n    certDomainName?: string;\n\n    /**\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    certificates?: Array<models.Certificate>;\n\n    createdAt?: Date;\n\n    id?: number;\n\n    /**\n     * The version of this service instance.\n     */\n    instanceVersion: string;\n\n    /**\n     * The Maritime Resource Name\n     */\n    mrn: string;\n\n    name: string;\n\n    /**\n     * Access type of the OpenId Connect client\n     */\n    oidcAccessType?: Service.OidcAccessTypeEnum;\n\n    /**\n     * The client id of the service in MCP. Will be generated.\n     */\n    oidcClientId?: string;\n\n    /**\n     * The client secret of the service in MCP. Will be generated.\n     */\n    oidcClientSecret?: string;\n\n    /**\n     * The OpenId Connect redirect uri of service.\n     */\n    oidcRedirectUri?: string;\n\n    /**\n     * Permissions as assigned from the organization\n     */\n    permissions?: string;\n\n    updatedAt?: Date;\n\n    /**\n     * The vessel that is linked to this service.\n     */\n    vessel?: models.Vessel;\n\n}\nexport namespace Service {\n    export enum OidcAccessTypeEnum {\n        Public = <any> 'public',\n        BearerOnly = <any> 'bearer-only',\n        Confidential = <any> 'confidential'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Service.ts","/**\n * Maritime Connectivity Platform Identity Registry API\n * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: info@maritimecloud.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as models from './models';\n\nexport interface VesselAttribute {\n    /**\n     * Vessel attribute name\n     */\n    attributeName: VesselAttribute.AttributeNameEnum;\n\n    /**\n     * Vessel attribute value\n     */\n    attributeValue: string;\n\n    createdAt?: Date;\n\n    end?: Date;\n\n    start?: Date;\n\n    updatedAt?: Date;\n\n}\nexport namespace VesselAttribute {\n    export enum AttributeNameEnum {\n        ImoNumber = <any> 'imo-number',\n        MmsiNumber = <any> 'mmsi-number',\n        Callsign = <any> 'callsign',\n        Flagstate = <any> 'flagstate',\n        AisClass = <any> 'ais-class',\n        PortOfRegister = <any> 'port-of-register'\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AgentsService } from '../../../../backend-api/identity-registry/services/agents.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthPermission, AuthService } from '../../../../authentication/services/auth.service';\nimport { OrganizationsService } from '../../../../backend-api/identity-registry/services/organizations.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../shared/mc-notifications.service';\nimport { Agent } from '../../../../backend-api/identity-registry/autogen/model/agent';\nimport { EntityImageModel } from '../../../../theme/components/mcEntityImage';\nimport { Organization } from '../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { Observable } from 'rxjs';\nimport { LogoService } from '../../../../backend-api/identity-registry/services/logo.service';\nimport { ActingService } from '../../../../shared/acting.service';\nimport { NavigationHelperService } from '../../../../shared/navigation-helper.service';\n\n@Component({\n    selector: 'acting-list',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./acting-list.html'),\n    styles: []\n})\nexport class ActingListComponent implements OnInit {\n\n    private actingFor: Array<Agent>;\n    private actingForOrgMrn: string;\n    public entityImageList: Array<EntityImageModel>;\n    public organization: Organization;\n    public isLoading: boolean;\n    public showModal: boolean = false;\n    public modalDescription: string;\n\n    constructor(private navigationService: NavigationHelperService, private actingService: ActingService, private agentsService: AgentsService, private router: Router, private authService: AuthService, private route: ActivatedRoute, private orgService: OrganizationsService, private notifications: MCNotificationsService, private logoService: LogoService) {\n    }\n\n    public ngOnInit() {\n        this.isLoading = true;\n        this.loadMyOrganization();\n        this.loadActingFor();\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(\n            organization => {\n                this.organization = organization;\n            },\n            err => {\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            }\n        );\n    }\n\n    private loadActingFor() {\n        this.agentsService.getActingOnBehalfOf().subscribe(actingForPage => {\n           this.actingFor = actingForPage.content;\n           this.isLoading = false;\n           this.generateEntityImageList();\n        });\n    }\n\n    public actOnBehalfOf(entityModel: EntityImageModel) {\n        this.modalDescription = 'Do you want to act on behalf of ' + entityModel.title + '?';\n        this.actingForOrgMrn = entityModel.entityId;\n        this.showModal = true;\n    }\n\n    public actForSure() {\n        this.actingService.actOnBehalfOf(this.actingForOrgMrn);\n        this.navigationService.takeMeHome();\n    }\n\n    public cancelModal() {\n        this.modalDescription = null;\n        this.actingForOrgMrn = null;\n        this.showModal = false;\n    }\n\n    private generateEntityImageList() {\n        this.entityImageList = [];\n        if (this.actingFor) {\n            this.actingFor.forEach(agent => {\n                this.orgService.getOrganizationById(agent.idOnBehalfOfOrganization).subscribe(org => {\n                    this.entityImageList.push({imageSourceObservable: this.createImgObservable(org), entityId: org.mrn, title: org.name});\n                });\n            });\n        }\n    }\n\n    private createImgObservable(organization: Organization): Observable<string> {\n        let imageSrc = 'assets/img/no_organization.png';\n        return Observable.create(observer => {\n            this.logoService.getLogoForOrganization(organization.mrn).subscribe(\n                logo => {\n                    observer.next(URL.createObjectURL(new Blob([logo])));\n                },\n                err => {\n                    observer.next(imageSrc);\n                }\n            );\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/acting/acting-list/acting-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Acting on behalf of\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"actOnBehalfOf($event)\\\"></mc-entity-image-list>\\n        </ba-card>\\n    </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"actForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Act on behalf of'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Act'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/acting/acting-list/acting-list.html\n// module id = ./src/app/pages/org-identity-registry/acting/acting-list/acting-list.html\n// module chunks = 0","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'acting',\n    template: '<router-outlet></router-outlet>'\n})\nexport class ActingComponent {\n    constructor() {\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/acting/acting.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgaModule } from '../../../theme/nga.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ActingComponent } from './acting.component';\nimport { routing } from './acting.routing';\nimport { ActingListComponent } from './acting-list/acting-list.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NgaModule,\n        SharedModule,\n        routing\n    ],\n    declarations: [\n        ActingComponent,\n        ActingListComponent\n    ]\n})\nexport default class ActingModule {\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/acting/acting.module.ts","import { RouterModule, Routes } from '@angular/router';\nimport { ActingComponent } from './acting.component';\nimport { ActingListComponent } from './acting-list/acting-list.component';\n\nconst routes : Routes = [\n    {\n        path: 'acting',\n        component: ActingComponent,\n        data: {breadcrumb: 'Acting'},\n        children: [\n            {\n                path: '',\n                component: ActingListComponent\n            }\n        ]\n    }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/acting/acting.routing.ts","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'agents',\n    template: `<router-outlet></router-outlet>`\n})\nexport class AgentsComponent {\n    constructor() {}\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/agents.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgaModule } from '../../../theme/nga.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { routing } from './agents.routing';\nimport { AgentsComponent } from './agents.component';\nimport { AgentListComponent } from './components/agent-list/agent-list.component';\nimport { AgentDetailsComponent } from './components/agent-details/agent-details.component';\nimport { AgentNewComponent } from './components/agent-new/agent-new.component';\nimport { AgentUpdateComponent } from './components/agent-update/agent-update.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NgaModule,\n        SharedModule,\n        routing\n    ],\n    declarations: [\n        AgentsComponent,\n        AgentListComponent,\n        AgentDetailsComponent,\n        AgentNewComponent,\n        AgentUpdateComponent\n    ]\n})\nexport default class AgentsModule {\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/agents.module.ts","import { RouterModule, Routes } from '@angular/router';\nimport { AgentListComponent } from './components/agent-list/agent-list.component';\nimport { AgentDetailsComponent } from './components/agent-details/agent-details.component';\nimport { AgentNewComponent } from './components/agent-new/agent-new.component';\nimport { AgentUpdateComponent } from './components/agent-update/agent-update.component';\n\nconst routes: Routes = [\n    {\n        path: 'agents',\n        data: {breadcrumb: 'Agents'},\n        children: [\n            {\n                path: '',\n                component: AgentListComponent\n            },\n            {\n                path: 'register',\n                component: AgentNewComponent,\n                data: {breadcrumb: 'Register'}\n            },\n            {\n                path: ':id',\n                component: AgentDetailsComponent,\n                data: {breadcrumb: 'Details'}\n            }/*,\n            {\n                path: 'update/:id',\n                component: AgentUpdateComponent,\n                data: {breadcrumb: 'Update'}\n            }*/\n        ]\n    }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/agents.routing.ts","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { LabelValueModel } from '../../../../../theme/components/mcLabelValueTable';\nimport { Agent } from '../../../../../backend-api/identity-registry/autogen/model/agent';\nimport { AuthPermission, AuthService } from '../../../../../authentication/services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AgentsService } from '../../../../../backend-api/identity-registry/services/agents.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\n\n@Component({\n    selector: 'agent-details',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./agent-details.html'),\n    styles: []\n})\nexport class AgentDetailsComponent implements OnInit {\n    private organization: Organization;\n    public labelValues: Array<LabelValueModel>;\n    public title: string;\n    public isLoading: boolean;\n    public agent: Agent;\n    public showModal: boolean = false;\n    public modalDescription: string;\n\n    constructor(private authService: AuthService, private route: ActivatedRoute, private router: Router, private agentsService: AgentsService, private organizationService: OrganizationsService, private notifications: MCNotificationsService, private navigationHelper: NavigationHelperService) {\n    }\n\n    ngOnInit() {\n        this.isLoading = true;\n        this.loadOrganization();\n        this.loadAgent();\n    }\n\n    private loadOrganization() {\n        this.organizationService.getMyOrganization().subscribe(org => {\n           this.organization = org;\n        });\n    }\n\n    private loadAgent() {\n        let id = this.route.snapshot.params['id'];\n        this.agentsService.getAgent(id).subscribe(agent => {\n           this.agent = agent;\n           this.organizationService.getOrganizationById(agent.idActingOrganization).subscribe(org => {\n              this.title = org.name;\n              this.isLoading = false;\n              this.generateLabelValues();\n           },\n               err => {\n                   this.isLoading = false;\n                   this.notifications.generateNotification('Error', 'Error when trying to get the name of organization', MCNotificationType.Error, err);\n               });\n        },\n            err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to get agent', MCNotificationType.Error, err);\n            });\n    }\n\n    private generateLabelValues() {\n        this.labelValues = [];\n        if (this.agent) {\n            this.labelValues.push({label: 'Agent Organization', valueHtml: this.title});\n        }\n    }\n\n    public showUpdate(): boolean {\n        return false;\n    }\n\n    public showDelete(): boolean {\n        return this.isAdmin() && this.agent != null;\n    }\n\n    private isAdmin(): boolean {\n        return this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n    }\n\n    public delete() {\n        this.modalDescription = 'Are you sure you want to delete the agent?';\n        this.showModal = true;\n    }\n\n    public update() {\n        this.navigationHelper.navigateToUpdateAgent(this.agent.id);\n    }\n\n    public cancelModal() {\n        this.showModal = false;\n    }\n\n    public deleteForSure() {\n        this.isLoading = true;\n        this.showModal = false;\n        this.agentsService.deleteAgent(this.agent.id).subscribe(() => {\n            this.router.navigate(['../'], {relativeTo: this.route});\n        },\n            err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to delete the agent', MCNotificationType.Error, err);\n            });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-log-12\\\">\\n        <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n            <ul *ngIf=\\\"!isLoading\\\" class=\\\"btn-list clearfix\\\">\\n                <li *ngIf=\\\"showUpdate()\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Agent</button>\\n                </li>\\n                <li *ngIf=\\\"showDelete()\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Agent</button>\\n                </li>\\n            </ul>\\n        </ba-card>\\n    </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete Agent'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.html\n// module id = ./src/app/pages/org-identity-registry/agents/components/agent-details/agent-details.html\n// module chunks = 0","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AgentsService } from '../../../../../backend-api/identity-registry/services/agents.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthPermission, AuthService } from '../../../../../authentication/services/auth.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { Agent } from '../../../../../backend-api/identity-registry/autogen/model/agent';\nimport { EntityImageModel } from '../../../../../theme/components/mcEntityImage';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { Observable } from 'rxjs';\nimport { LogoService } from '../../../../../backend-api/identity-registry/services/logo.service';\n\n@Component({\n    selector: 'agent-list',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./agent-list.html'),\n    styles: []\n})\nexport class AgentListComponent implements OnInit {\n    private KEY_NEW = 'KEY_NEW_AGENT';\n    private agents: Array<Agent>;\n    public entityImageList: Array<EntityImageModel>;\n    public organization: Organization;\n    public isLoading: boolean;\n\n    constructor(private agentsService: AgentsService, private router: Router, private authService: AuthService, private route: ActivatedRoute, private orgService: OrganizationsService, private notifications: MCNotificationsService, private logoService: LogoService) {\n    }\n\n    ngOnInit() {\n        this.isLoading = true;\n        this.loadMyOrganization();\n        this.loadAgents();\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(\n            organization => {\n                this.organization = organization;\n            },\n            err => {\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            }\n        );\n    }\n\n    private loadAgents() {\n        this.agentsService.getAgents().subscribe(\n            agents => {\n                this.agents = agents.content;\n                this.isLoading = false;\n                this.generateEntityImageList();\n            }\n        );\n    }\n\n    public gotoDetails(entityModel: EntityImageModel) {\n        if (entityModel.entityId === this.KEY_NEW) {\n            this.gotoCreate();\n        } else {\n            this.router.navigate([entityModel.entityId], {relativeTo: this.route});\n        }\n    }\n\n    public gotoCreate() {\n        this.router.navigate(['register'], {relativeTo: this.route});\n    }\n\n    private generateEntityImageList() {\n        this.entityImageList = [];\n        if (this.agents) {\n            for (let i = 0; i < this.agents.length; i++) {\n                let agent: Agent = this.agents[i];\n                this.orgService.getOrganizationById(agent.idActingOrganization).subscribe(org => {\n                    this.entityImageList.push({imageSourceObservable: this.createImgObservable(org, i === this.agents.length - 1), entityId: agent.id.toString(), title: org.name});\n                });\n            }\n        }\n        if (this.authService.authState.hasPermission(AuthPermission.OrgAdmin) && this.agents.length < 1) {\n            this.entityImageList.push({imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Agent', isAdd: true});\n        }\n    }\n\n    private createImgObservable(organization: Organization, last: boolean): Observable<string> {\n        let imageSrc = 'assets/img/no_organization.png';\n        return Observable.create(observer => {\n            this.logoService.getLogoForOrganization(organization.mrn).subscribe(\n                logo => {\n                    observer.next(URL.createObjectURL(new Blob([logo])));\n                    if (this.authService.authState.hasPermission(AuthPermission.OrgAdmin) && last) {\n                        this.entityImageList.push({imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Agent', isAdd: true});\n                    }\n                },\n                err => {\n                    observer.next(imageSrc);\n                    if (this.authService.authState.hasPermission(AuthPermission.OrgAdmin) && last) {\n                        this.entityImageList.push({imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Agent', isAdd: true});\n                    }\n                }\n            );\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Agents for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n        </ba-card>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.html\n// module id = ./src/app/pages/org-identity-registry/agents/components/agent-list/agent-list.html\n// module chunks = 0","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {\n    McFormControlModel, McFormControlModelSelect,\n    McFormControlType,\n    SelectModel\n} from '../../../../../theme/components/mcForm/mcFormControlModel';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { AgentsService } from '../../../../../backend-api/identity-registry/services/agents.service';\nimport { SelectValidator } from '../../../../../theme/validators';\nimport { Agent } from '../../../../../backend-api/identity-registry/autogen/model/agent';\n\n@Component({\n    selector: 'agent-new',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./agent-new.html'),\n    styles: []\n})\nexport class AgentNewComponent implements OnInit, OnDestroy {\n    private agentOrg: Organization;\n    private allOrgs: Array<Organization>;\n\n    public organization: Organization;\n    public isLoading: boolean;\n    public isRegistering: boolean = false;\n    public registerTitle: string = \"Register Agent\";\n    public registerForm: FormGroup;\n    public formControlModels: Array<McFormControlModel>;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private agentsService: AgentsService) {\n    }\n\n    ngOnInit() {\n        this.isRegistering = false;\n        this.isLoading = true;\n        this.loadMyOrganization();\n    }\n\n    ngOnDestroy() {\n        this.changeDetector.detach();\n    }\n\n    public register() {\n        this.isRegistering = true;\n        let agent: Agent = {\n            idActingOrganization: this.agentOrg.id,\n            idOnBehalfOfOrganization: this.organization.id\n        };\n        this.createAgent(agent);\n    }\n\n    public cancel() {\n        this.navigationService.cancelCreateAgent();\n    }\n\n    private createAgent(agent: Agent) {\n        this.agentsService.createAgent(agent).subscribe(agent => {\n           this.navigationService.navigateToAgent(agent.id);\n           this.isRegistering = false;\n        },\n        err => {\n            this.isRegistering = false;\n            this.notifications.generateNotification('Error', 'Error when trying to create agent', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(org => {\n            this.organization = org;\n            this.loadAllOrgs();\n        },\n            err => {\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            });\n    }\n\n    private loadAllOrgs() {\n        this.orgService.getAllOrganizations().subscribe(orgs => {\n            this.allOrgs = orgs;\n            this.generateForm();\n            this.isLoading = false;\n            this.changeDetector.detectChanges();\n        });\n    }\n\n    private generateForm() {\n        this.registerForm = this.formBuilder.group({});\n        this.formControlModels = [];\n\n        let selectValues = this.selectValues();\n        let formControlModel: McFormControlModelSelect = {selectValues: selectValues, formGroup: this.registerForm, elementId: 'agentOrg', controlType: McFormControlType.Select, labelName: 'Agent Organization', placeholder: '', validator: SelectValidator.validate, showCheckmark: true};\n        let formControl = new FormControl(this.selectedValue(selectValues), formControlModel.validator);\n        formControl.valueChanges.subscribe(param => {\n            if (param && this.agentOrg != param) {\n                this.agentOrg = param;\n                this.generateForm();\n            }\n        });\n        this.registerForm.addControl(formControlModel.elementId, formControl);\n        this.formControlModels.push(formControlModel);\n        this.changeDetector.detectChanges();\n    }\n\n    private selectValues(): Array<SelectModel> {\n        let selectValues: Array<SelectModel> = [];\n        selectValues.push({value: undefined, label: 'Choose Organization...', isSelected: this.agentOrg === null});\n\n        this.allOrgs.forEach(org => {\n           let isSelected = org === this.agentOrg;\n           selectValues.push({value: org, label: org.name, isSelected: isSelected});\n        });\n        return selectValues;\n    }\n\n    private selectedValue(selectValues: Array<SelectModel>): any {\n        selectValues.forEach(selectModel => {\n          if (selectModel.isSelected) {\n              return selectModel.value;\n          }\n        });\n        return '';\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Register new Agent for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-form [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\n        </ba-card>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.html\n// module id = ./src/app/pages/org-identity-registry/agents/components/agent-new/agent-new.html\n// module chunks = 0","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { AgentsService } from '../../../../../backend-api/identity-registry/services/agents.service';\nimport { Agent } from '../../../../../backend-api/identity-registry/autogen/model/agent';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport {\n    McFormControlModel,\n    McFormControlModelSelect,\n    McFormControlType,\n    SelectModel\n} from '../../../../../theme/components/mcForm/mcFormControlModel';\nimport { SelectValidator } from '../../../../../theme/validators';\n\n@Component({\n    selector: 'agent-update',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./agent-update.html'),\n    styles: []\n})\nexport class AgentUpdateComponent implements OnInit, OnDestroy {\n\n    private agentOrg: Organization;\n    public agentOrgName: string;\n    private allOrgs: Array<Organization>;\n\n    private organization: Organization;\n    private agent: Agent;\n    public isLoading: boolean;\n    public isUpdating: boolean;\n    public showModal: boolean = false;\n    public modalDescription: string;\n    public updateTitle: string = 'Update agent';\n    public updateForm: FormGroup;\n    public formControlModels: Array<McFormControlModel>;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private agentsService: AgentsService, private orgService: OrganizationsService) {\n    }\n\n    public ngOnInit() {\n        this.isLoading = true;\n        this.isUpdating = false;\n        this.loadMyOrganization();\n    }\n\n    public ngOnDestroy() {\n        this.changeDetector.detach();\n    }\n\n    public cancel() {\n        this.navigationService.navigateToAgent(this.agent.id);\n    }\n\n    public cancelModal() {\n        this.showModal = false;\n    }\n\n    public update() {\n        this.modalDescription = 'Are you sure you want to update this agent?';\n        this.showModal = true;\n    }\n\n    public updateForSure() {\n        this.isUpdating = true;\n        this.updateAgent();\n    }\n\n    private updateAgent() {\n        this.agentsService.updateAgent(this.agent.id, this.agent).subscribe(agent => {\n            this.navigationService.navigateToAgent(agent.id);\n        }, err => {\n            this.isUpdating = false;\n            this.notifications.generateNotification('Error', 'Error when trying to update agent', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(organization => {\n            this.organization = organization;\n            this.loadAgent();\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadAllOrgs() {\n        this.orgService.getAllOrganizations().subscribe(orgs => {\n            this.allOrgs = orgs;\n            this.generateForm();\n            this.isLoading = false;\n            this.changeDetector.detectChanges();\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get all organizations', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadAgent() {\n        let agentId = this.activatedRoute.snapshot.params['id'];\n        this.agentsService.getAgent(agentId).subscribe(agent => {\n            this.agent = agent;\n            this.orgService.getOrganizationById(agent.idActingOrganization).subscribe(org => {\n                this.agentOrg = org;\n                this.agentOrgName = org.name;\n                this.loadAllOrgs();\n            }, err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to get agent organization', MCNotificationType.Error, err);\n            });\n        },\n        err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get agent', MCNotificationType.Error, err);\n        });\n    }\n\n    private generateForm() {\n        this.updateForm = this.formBuilder.group({});\n        this.formControlModels = [];\n\n        let selectValues = this.selectValues();\n        let formControlModel: McFormControlModelSelect = {selectValues: selectValues, formGroup: this.updateForm, elementId: 'agentOrgs', controlType: McFormControlType.Select, labelName: 'Agent Organization', validator: SelectValidator.validate, showCheckmark: true};\n        let formControl = new FormControl(this.selectedValue(selectValues), formControlModel.validator);\n        formControl.valueChanges.subscribe(param => {\n            if (param && this.agentOrg != param) {\n                this.agentOrg = param;\n                this.generateForm();\n            }\n        });\n        this.updateForm.addControl(formControlModel.elementId, formControl);\n        this.formControlModels.push(formControlModel);\n        this.changeDetector.detectChanges();\n    }\n\n    private selectValues(): Array<SelectModel> {\n        let selectValues: Array<SelectModel> = [];\n        selectValues.push({value: undefined, label: 'Choose Organization...', isSelected: this.agentOrg == null});\n\n        this.allOrgs.forEach(org => {\n            let isSelected = org.name === this.agentOrg.name;\n            selectValues.push({value: org, label: org.name, isSelected: isSelected});\n        });\n        return selectValues;\n    }\n\n    private selectedValue(selectValues: Array<SelectModel>): any {\n        selectValues.forEach(selectModel => {\n            if (selectModel.isSelected) {\n                return selectModel.value;\n            }\n        });\n        return '';\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Update Agent - {{agentOrgName}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n        </ba-card>\\n    </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update agent'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.html\n// module id = ./src/app/pages/org-identity-registry/agents/components/agent-update/agent-update.html\n// module chunks = 0","import { Component, ViewEncapsulation } from '@angular/core';\nimport { Device } from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\nimport { CertificateEntityType } from \"../../../../shared/services/certificate-helper.service\";\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { DevicesService } from \"../../../../../backend-api/identity-registry/services/devices.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'device-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./device-details.html'),\n  styles: []\n})\nexport class DeviceDetailsComponent {\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic title:string;\n\tpublic isLoading:boolean;\n\tpublic device:Device;\n\tpublic entityType: CertificateEntityType;\n\tpublic certificateTitle: string;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tconstructor(private authService: AuthService, private route: ActivatedRoute, private devicesService: DevicesService, private router:Router, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.entityType = CertificateEntityType.Device;\n\t\tthis.loadDevice();\n\t}\n\n\tprivate loadDevice() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tthis.devicesService.getDevice(mrn).subscribe(\n\t\t\tdevice => {\n\t\t\t\tthis.device = device;\n\t\t\t\tthis.title = device.name;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the device', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.device) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.device.mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.device.name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.device.permissions});\n\t\t}\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.isAdmin() && this.device != null;\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.isAdmin() && this.device != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.DeviceAdmin);\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateDevice(this.device.mrn);\n\t}\n\n\tpublic delete() {\n\t\tthis.modalDescription = 'Are you sure you want to delete the device?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoading = true;\n\t\tthis.showModal = false;\n\t\tthis.devicesService.deleteDevice(this.device.mrn).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the device', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"!isLoading && (showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update device</button>\\n        </li>\\n        <li *ngIf=\\\"showDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete device</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"device\\\">\\n      <ba-card title=\\\"Certificates for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"device.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"title\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"device.certificates\\\"></certificates-table>\\n      </ba-card>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete device'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html\n// module chunks = 0","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { EntityImageModel } from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport { Device } from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\nimport { DevicesService } from \"../../../../../backend-api/identity-registry/services/devices.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: 'device-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./device-list.html'),\n  styles: []\n})\nexport class DeviceListComponent implements OnInit {\n\tprivate KEY_NEW = 'KEY_NEW_DEVICE';\n\tprivate devices:Array<Device>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public organization: Organization;\n  public isLoading: boolean;\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private devicesService: DevicesService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\n\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadMyOrganization();\n\t  this.loadDevices();\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadDevices() {\n\t\tthis.devicesService.getDevices().subscribe(\n\t\t\tdevicePage => {\n\t\t\t\tthis.devices = devicePage.content;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get devices', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (entityModel.entityId === this.KEY_NEW) {\n\t\t\tthis.gotoCreate();\n\t\t} else {\n\t\t\tthis.router.navigate([entityModel.entityId], {relativeTo: this.route});\n\t\t}\n\t}\n\n\tpublic gotoCreate() {\n\t\tthis.router.navigate(['register'], {relativeTo: this.route})\n\t}\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.devices) {\n\t\t  this.devices.forEach(device => {\n\t\t\t    this.entityImageList.push({imageSourceObservable:this.createImgObservable(device), entityId:device.mrn, title:device.name});\n\t\t\t  }\n\t\t  );\n\t  }\n\t  if (this.authService.authState.hasPermission(AuthPermission.DeviceAdmin)) {\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new Device', isAdd:true});\n\t  }\n  }\n\n\tprivate createImgObservable(device:Device):Observable<string> {\n\t\tlet imageSrc = 'assets/img/no_device.svg';\n\t\treturn Observable.create(observer => {\n\t\t\tobserver.next(imageSrc);\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Devices for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Device} from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {DevicesService} from \"../../../../../backend-api/identity-registry/services/devices.service\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {McFormControlModel, McFormControlType} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\n\n\n@Component({\n  selector: 'device-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./device-new.html'),\n  styles: []\n})\nexport class DeviceNewComponent implements OnInit {\n  public organization: Organization;\n\tprivate mrn: string;\n\tprivate mrnMask:string;\n\tprivate mrnPattern:string;\n\tprivate mrnPatternError:string;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isRegistering = false;\n\tpublic registerTitle = \"Register Device\";\n\tpublic registerForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private devicesService: DevicesService, mrnHelper: MrnHelperService) {\n\t\tthis.mrnMask = mrnHelper.mrnMaskForDevice();\n\t\tthis.mrnPattern = mrnHelper.mrnPattern();\n\t\tthis.mrnPatternError = mrnHelper.mrnPatternError();\n\t\tthis.mrn = this.mrnMask;\n\t}\n\n\tngOnInit() {\n\t\tthis.isRegistering = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadMyOrganization();\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.cancelCreateDevice();\n\t}\n\n\tpublic register() {\n\t\tthis.isRegistering = true;\n\t\tlet device:Device = {\n\t\t\tmrn: this.mrn,\n\t\t\tname: this.registerForm.value.name,\n\t\t\tpermissions: this.registerForm.value.permissions\n\t\t};\n\t\tthis.createDevice(device);\n\t}\n\n\tprivate createDevice(device:Device) {\n\t\tthis.devicesService.createDevice(device).subscribe(\n\t\t\tdevice => {\n\t\t\t\tthis.navigationService.navigateToDevice(device.mrn);\n\t\t\t\tthis.isRegistering = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isRegistering = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to create device', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateMRN(idValue:string) {\n\t\tvar mrn = (idValue?idValue:'');\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\n\t}\n\n\tprivate generateForm() {\n\t\tthis.registerForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'deviceId', controlType: McFormControlType.Text, labelName: 'Device ID', placeholder: 'Enter Device ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.generateMRN(param));\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Device for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Device} from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {DevicesService} from \"../../../../../backend-api/identity-registry/services/devices.service\";\nimport {\n\tMcFormControlModel, McFormControlType\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\n\n\n@Component({\n  selector: 'device-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./device-update.html'),\n  styles: []\n})\nexport class DeviceUpdateComponent implements OnInit {\n\tpublic device: Device;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update device\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private devicesService: DevicesService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadDevice();\n\t}\n\n\tpublic cancel() {\n\t\tlet deviceMrn = (this.device ? this.device.mrn : '');\n\t\tthis.navigationService.navigateToDevice(deviceMrn);\n\t}\n\n\tpublic update() {\n\t\tthis.isUpdating = true;\n\t\tthis.device.name = this.updateForm.value.name;\n\t\tthis.device.permissions = this.updateForm.value.permissions;\n\n\t\tthis.updateDevice(this.device);\n\t}\n\n\tprivate updateDevice(device:Device) {\n\t\tthis.devicesService.updateDevice(device).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.navigateToDevice(this.device.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update device', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadDevice() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\n\t\tthis.devicesService.getDevice(mrn).subscribe(\n\t\t\tdevice => {\n\t\t\t\tthis.device = device;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the device', MCNotificationType.Error, err);\n\n\t\t\t\tthis.navigationService.navigateToDevice(mrn);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.device.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.device.name, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(this.device.permissions, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-update/device-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Device - {{device?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-update/device-update.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-update/device-update.html\n// module chunks = 0","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'devices',\n  template: `<router-outlet></router-outlet>`\n})\nexport class DevicesComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './devices.routing';\nimport {DevicesComponent} from \"./devices.component\";\nimport {DeviceListComponent} from \"./components/device-list/device-list.component\";\nimport {DeviceDetailsComponent} from \"./components/device-details/device-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {DeviceNewComponent} from \"./components/device-new/device-new.component\";\nimport {DeviceUpdateComponent} from \"./components/device-update/device-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    DevicesComponent,\n    DeviceDetailsComponent,\n    DeviceListComponent,\n\t  DeviceNewComponent,\n\t  DeviceUpdateComponent\n  ]\n})\nexport default class DevicesModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {DevicesComponent} from \"./devices.component\";\nimport {DeviceListComponent} from \"./components/device-list/device-list.component\";\nimport {DeviceDetailsComponent} from \"./components/device-details/device-details.component\";\nimport {DeviceNewComponent} from \"./components/device-new/device-new.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {DeviceUpdateComponent} from \"./components/device-update/device-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'devices',\n    component: DevicesComponent,\n    data:{breadcrumb: 'Devices'},\n    children: [\n      {\n        path: '',\n        component: DeviceListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: DeviceNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n      {\n        path: ':id',\n        component: DeviceDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: DeviceUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.routing.ts","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'org-identity-registry',\n  template: `<router-outlet></router-outlet>`\n})\nexport class OrgIdentityRegistryComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport { NgaModule } from '../../theme/nga.module';\n\nimport { routing }       from './org-identity-registry.routing';\nimport { OrgIdentityRegistryComponent } from './org-identity-registry.component';\nimport VesselsModule from \"./vessels/vessels.module\";\nimport DevicesModule from \"./devices/devices.module\";\nimport UsersModule from \"./users/users.module\";\nimport ServicesModule from \"./services/services.module\";\nimport RolesModule from './roles/roles.module';\nimport AgentsModule from './agents/agents.module';\nimport ActingModule from './acting/acting.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n\t  VesselsModule,\n\t  DevicesModule,\n\t  ServicesModule,\n\t  UsersModule,\n      RolesModule,\n      AgentsModule,\n      ActingModule,\n    routing\n  ],\n  declarations: [\n    OrgIdentityRegistryComponent\n  ]\n})\nexport default class OrgIdentityRegistryModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.module.ts","import { Routes, RouterModule }  from '@angular/router';\n\nimport { OrgIdentityRegistryComponent } from './org-identity-registry.component';\nimport {VesselsComponent} from \"./vessels/vessels.component\";\nimport {DevicesComponent} from \"./devices/devices.component\";\nimport {UsersComponent} from \"./users/users.component\";\nimport {ServicesComponent} from \"./services/services.component\";\nimport { RolesComponent } from './roles/roles.component';\nimport { AgentsComponent } from './agents/agents.component';\nimport { ActingComponent } from './acting/acting.component';\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrgIdentityRegistryComponent,\n    children: [\n\t    { path: 'devices', component: DevicesComponent },\n\t    { path: 'services', component: ServicesComponent },\n\t    { path: 'users', component: UsersComponent },\n\t    { path: 'vessels', component: VesselsComponent },\n        { path: 'roles', component: RolesComponent },\n        { path: 'agents', component: AgentsComponent },\n        { path: 'acting', component: ActingComponent}\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.routing.ts","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AuthPermission, AuthService } from '../../../../../authentication/services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RolesService } from '../../../../../backend-api/identity-registry/services/roles.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport { LabelValueModel } from '../../../../../theme/components/mcLabelValueTable';\nimport { Role } from '../../../../../backend-api/identity-registry/autogen/model/Role';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { RoleViewModel } from '../../view-models/RoleViewModel';\n\n@Component({\n    selector: 'role-details',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./role-details.html'),\n    styles: []\n})\nexport class RoleDetailsComponent implements OnInit{\n    private organization: Organization;\n\n    public labelValues: Array<LabelValueModel>;\n    public title: string;\n    public isLoading: boolean;\n    public role: Role;\n    public showModal: boolean = false;\n    public modalDescription: string;\n\n    constructor(private authService: AuthService, private orgService: OrganizationsService, private route: ActivatedRoute, private router: Router, private rolesService: RolesService, private notifications: MCNotificationsService, private navigationHelper: NavigationHelperService) {\n    }\n\n    ngOnInit() {\n        this.isLoading = true;\n        this.loadMyOrganization();\n    }\n\n    private loadRole() {\n        let id = this.route.snapshot.params['id'];\n        this.rolesService.getRole(this.organization.mrn, id).subscribe(role => {\n           this.role = role;\n           this.title = role.permission;\n           this.isLoading = false;\n           this.generateLabelValues();\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get role', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(organization => {\n            this.organization = organization;\n            this.loadRole();\n        },\n            err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            });\n    }\n\n    private generateLabelValues() {\n        this.labelValues = [];\n        if (this.role) {\n            this.labelValues.push({label: 'Permission Name', valueHtml: this.role.permission});\n            this.labelValues.push({label: 'Role Name', valueHtml: RoleViewModel.getLabelForEnum(this.role.roleName)});\n        }\n    }\n\n    public showDelete(): boolean {\n        return this.isAdmin() && this.role != null;\n    }\n\n    public showUpdate(): boolean {\n        return this.isAdmin() && this.role != null;\n    }\n\n    private isAdmin(): boolean {\n        return this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n    }\n\n    public delete() {\n        this.modalDescription = 'Are you sure you want to delete this role?';\n        this.showModal = true;\n    }\n\n    public deleteForSure() {\n        this.isLoading = true;\n        this.showModal = false;\n        this.rolesService.deleteRole(this.organization.mrn, this.role.id).subscribe(() => {\n            this.router.navigate(['../'], {relativeTo: this.route});\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to delete role', MCNotificationType.Error, err);\n        });\n    }\n\n    public cancelModal() {\n        this.showModal = false;\n    }\n\n    public update() {\n        this.navigationHelper.navigateToUpdateRole(this.role.id);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/components/role-details/role-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n            <ul *ngIf=\\\"!isLoading && (showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n                <li *ngIf=\\\"showUpdate()\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update Role</button>\\n                </li>\\n                <li *ngIf=\\\"showDelete()\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Role</button>\\n                </li>\\n            </ul>\\n        </ba-card>\\n    </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete Role'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/roles/components/role-details/role-details.html\n// module id = ./src/app/pages/org-identity-registry/roles/components/role-details/role-details.html\n// module chunks = 0","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Role } from '../../../../../backend-api/identity-registry/autogen/model/Role';\nimport { EntityImageModel } from '../../../../../theme/components/mcEntityImage';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { AuthPermission, AuthService } from '../../../../../authentication/services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { RolesService } from '../../../../../backend-api/identity-registry/services/roles.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'role-list',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./role-list.html'),\n    styles: []\n})\nexport class RoleListComponent implements OnInit {\n    private KEY_NEW = 'KEY_NEW_ROLE';\n    private roles: Array<Role>;\n    public entityImageList: Array<EntityImageModel>;\n    public organization: Organization;\n    public isLoading: boolean;\n\n    constructor(private authService: AuthService, private router: Router, private route: ActivatedRoute, private rolesService: RolesService, private orgService: OrganizationsService, private notifications: MCNotificationsService) {\n    }\n\n    ngOnInit() {\n        this.isLoading = true;\n        this.loadMyOrganization();\n        this.loadRoles();\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(\n            organization => {\n                this.organization = organization;\n            },\n            err => {\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            }\n        );\n    }\n\n    private loadRoles() {\n        this.rolesService.getOrgRoles(this.organization.mrn).subscribe(\n            roles => {\n                this.roles = roles;\n                this.isLoading = false;\n                this.generateEntityImageList();\n            },\n            err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to get roles', MCNotificationType.Error, err);\n            }\n        )\n    }\n\n    public gotoDetails(entityModel: EntityImageModel) {\n        if (entityModel.entityId === this.KEY_NEW) {\n            this.gotoCreate();\n        } else {\n            this.router.navigate([entityModel.entityId], {relativeTo: this.route});\n        }\n    }\n\n    private gotoCreate() {\n        this.router.navigate(['register'], {relativeTo: this.route});\n    }\n\n    private generateEntityImageList() {\n        this.entityImageList = [];\n        if (this.roles) {\n            this.roles.forEach(role => {\n               this.entityImageList.push({imageSourceObservable: this.createImgObservable(), entityId: role.id.toString(), title: role.permission});\n            });\n        }\n        if (this.authService.authState.hasPermission(AuthPermission.OrgAdmin)) {\n            this.entityImageList.push({imageSourceObservable: null, entityId: this.KEY_NEW, title: 'Register new Role', isAdd: true});\n        }\n    }\n\n    private createImgObservable(): Observable<string> {\n        let imageSrc = 'assets/img/no_service.svg';\n        return Observable.create(observer => {\n            observer.next(imageSrc);\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/components/role-list/role-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Roles for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n        </ba-card>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/roles/components/role-list/role-list.html\n// module id = ./src/app/pages/org-identity-registry/roles/components/role-list/role-list.html\n// module chunks = 0","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { RolesService } from '../../../../../backend-api/identity-registry/services/roles.service';\nimport {\n    McFormControlModel,\n    McFormControlModelSelect,\n    McFormControlType,\n    SelectModel\n} from '../../../../../theme/components/mcForm/mcFormControlModel';\nimport { SelectValidator } from '../../../../../theme/validators';\nimport { Role } from '../../../../../backend-api/identity-registry/autogen/model/Role';\nimport { RoleViewModel } from '../../view-models/RoleViewModel';\nimport RoleNameEnum = Role.RoleNameEnum;\n\n@Component({\n    selector: 'role-new',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./role-new.html'),\n    styles: []\n})\nexport class RoleNewComponent implements OnInit, OnDestroy {\n    private roleName: RoleNameEnum = null;\n\n    public organization: Organization;\n    public isLoading = true;\n    public isRegistering = false;\n    public registerTitle = \"Register Role\";\n    public registerForm: FormGroup;\n    public formControlModels: Array<McFormControlModel>;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private rolesService: RolesService){\n    }\n\n    ngOnInit() {\n        this.isRegistering = false;\n        this.isLoading = true;\n        this.loadMyOrganization();\n    }\n\n    ngOnDestroy() {\n        this.changeDetector.detach();\n    }\n\n    public cancel() {\n        this.navigationService.cancelCreateRole();\n    }\n\n    public register() {\n        this.isRegistering = true;\n        let role: Role = {\n            permission: this.registerForm.value.permission,\n            roleName: this.registerForm.value.role\n        };\n        this.createRole(role);\n    }\n\n    private createRole(role: Role) {\n        this.rolesService.createRole(this.organization.mrn, role).subscribe(role => {\n           this.navigationService.navigateToRole(role.id);\n           this.isRegistering = false;\n        },\n            err => {\n                this.isRegistering = false;\n                this.notifications.generateNotification('Error', 'Error when trying to create role', MCNotificationType.Error, err);\n            });\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(\n            organization => {\n                this.organization = organization;\n                this.generateForm();\n                this.isLoading = false;\n                this.changeDetector.detectChanges();\n            },\n            err => {\n                this.isLoading = false;\n                this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n            }\n        )\n    }\n\n    private generateForm() {\n        let oldForm = this.registerForm;\n        this.registerForm = this.formBuilder.group({});\n        if (!oldForm) {\n            oldForm = this.registerForm;\n        }\n        this.formControlModels = [];\n\n        let formControlModel: McFormControlModel = {formGroup: this.registerForm, elementId: 'permission', controlType: McFormControlType.Text, labelName: 'Permission Name', placeholder: 'Enter Permission name', validator: Validators.required};\n        let formControl = new FormControl(oldForm.value.permission, formControlModel.validator);\n        this.registerForm.addControl(formControlModel.elementId, formControl);\n        this.formControlModels.push(formControlModel);\n\n        let selectValues = this.selectValues();\n        let formControlModelSelect: McFormControlModelSelect = {selectValues: selectValues, formGroup: this.registerForm, elementId: 'role', controlType: McFormControlType.Select, labelName: 'Role Name', placeholder: '', validator: SelectValidator.validate, showCheckmark: true};\n        formControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n        formControl.valueChanges.subscribe(param => {\n           if (param && this.roleName != param) {\n               this.roleName = param;\n               this.generateForm();\n           }\n        });\n        this.registerForm.addControl(formControlModelSelect.elementId, formControl);\n        this.formControlModels.push(formControlModelSelect);\n        this.changeDetector.detectChanges();\n    }\n\n    private selectValues(): Array<SelectModel> {\n        let selectValues: Array<SelectModel> = [];\n        selectValues.push({value: undefined, label: 'Choose Role...', isSelected: this.roleName == null});\n        let allRoleNames = RoleViewModel.getAllRoleNames();\n        allRoleNames.forEach(roleName => {\n            let isSelected = RoleNameEnum[roleName.value] === RoleNameEnum[this.roleName];\n            selectValues.push({value: roleName.value, label: roleName.label, isSelected: isSelected});\n        });\n        return selectValues;\n    }\n\n    private selectedValue(selectValues: Array<SelectModel>): any {\n        selectValues.forEach(selectModel => {\n           if (selectModel.isSelected) {\n               return selectModel.value;\n           }\n        });\n        return '';\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/components/role-new/role-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Register new Role for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-form [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\n        </ba-card>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/roles/components/role-new/role-new.html\n// module id = ./src/app/pages/org-identity-registry/roles/components/role-new/role-new.html\n// module chunks = 0","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, OnChanges, OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Role } from '../../../../../backend-api/identity-registry/autogen/model/Role';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {\n    McFormControlModel,\n    McFormControlModelSelect,\n    McFormControlType,\n    SelectModel\n} from '../../../../../theme/components/mcForm/mcFormControlModel';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationHelperService } from '../../../../../shared/navigation-helper.service';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from '../../../../../shared/mc-notifications.service';\nimport { RolesService } from '../../../../../backend-api/identity-registry/services/roles.service';\nimport { OrganizationsService } from '../../../../../backend-api/identity-registry/services/organizations.service';\nimport { Organization } from '../../../../../backend-api/identity-registry/autogen/model/Organization';\nimport { RoleViewModel } from '../../view-models/RoleViewModel';\nimport { SelectValidator } from '../../../../../theme/validators';\nimport RoleNameEnum = Role.RoleNameEnum;\n\n@Component({\n    selector: 'role-update',\n    encapsulation: ViewEncapsulation.None,\n    template: require('./role-update.html'),\n    styles: []\n})\nexport class RoleUpdateComponent implements OnInit, OnDestroy {\n    private organization: Organization;\n    private roleName: RoleNameEnum;\n\n    public role: Role;\n    public showModal: boolean = false;\n    public modalDescription: string;\n    public isLoading = true;\n    public isUpdating = false;\n    public updateTitle: string = 'Update role';\n    public updateForm: FormGroup;\n    public formControlModels: Array<McFormControlModel>;\n\n    constructor(private changeDetector: ChangeDetectorRef, private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private rolesService: RolesService, private orgService: OrganizationsService) {\n    }\n\n    ngOnInit() {\n        this.isLoading = true;\n        this.isUpdating = false;\n        this.loadMyOrganization();\n    }\n\n    ngOnDestroy() {\n        this.changeDetector.detach();\n    }\n\n    public cancel() {\n        this.navigationService.navigateToRole(this.role.id);\n    }\n\n    public update() {\n        this.modalDescription = 'Are you sure you want to update this role?';\n        this.showModal = true;\n    }\n\n    public updateForSure() {\n        this.isUpdating = true;\n        this.role.roleName = this.updateForm.value.roleName;\n        this.updateRole();\n    }\n\n    public cancelModal() {\n        this.showModal = false;\n    }\n\n    private updateRole() {\n        this.rolesService.updateRole(this.organization.mrn, this.role.id, this.role).subscribe(() => {\n            this.navigationService.navigateToRole(this.role.id);\n        }, err => {\n           this.isUpdating = false;\n           this.notifications.generateNotification('Error', 'Error when trying to update role', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadMyOrganization() {\n        this.orgService.getMyOrganization().subscribe(organization => {\n            this.organization = organization;\n            this.loadRole();\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n        });\n    }\n\n    private loadRole() {\n        let roleId = this.activatedRoute.snapshot.params['id'];\n        this.rolesService.getRole(this.organization.mrn, roleId).subscribe(role => {\n            this.role = role;\n            this.roleName = role.roleName;\n            this.generateForm();\n            this.isLoading = false;\n            this.changeDetector.detectChanges();\n        }, err => {\n            this.isLoading = false;\n            this.notifications.generateNotification('Error', 'Error when trying to get role', MCNotificationType.Error, err);\n        });\n    }\n\n    private generateForm() {\n        this.updateForm = this.formBuilder.group({});\n        this.formControlModels = [];\n\n        let formControlModel: McFormControlModel = {\n            formGroup: this.updateForm,\n            elementId: 'permission',\n            controlType: McFormControlType.Text,\n            labelName: 'Permission',\n            placeholder: '',\n            isDisabled: true\n        };\n        let formControl = new FormControl(this.role.permission, formControlModel.validator);\n        this.updateForm.addControl(formControlModel.elementId, formControl);\n        this.formControlModels.push(formControlModel);\n\n        let selectValues = this.selectValues();\n        let formControlModelSelect: McFormControlModelSelect = {selectValues: selectValues, formGroup: this.updateForm, elementId: 'roleName', controlType: McFormControlType.Select, labelName: 'Role Name', validator: SelectValidator.validate, showCheckmark: true};\n        formControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n        formControl.valueChanges.subscribe(param => {\n            if (param && this.roleName != param) {\n                this.roleName = param;\n                this.generateForm();\n            }\n        });\n        this.updateForm.addControl(formControlModelSelect.elementId, formControl);\n        this.formControlModels.push(formControlModelSelect);\n        this.changeDetector.detectChanges();\n    }\n\n    private selectValues(): Array<SelectModel> {\n        let selectValues: Array<SelectModel> = [];\n        selectValues.push({value: undefined, label: 'Choose Role...', isSelected: this.roleName == null});\n        let allRoleNames = RoleViewModel.getAllRoleNames();\n        allRoleNames.forEach(roleName => {\n            let isSelected = RoleNameEnum[roleName.value] === RoleNameEnum[this.roleName];\n            selectValues.push({value: roleName.value, label: roleName.label, isSelected: isSelected});\n        });\n        return selectValues;\n    }\n\n    private selectedValue(selectValues: Array<SelectModel>): any {\n        selectValues.forEach(selectModel => {\n            if (selectModel.isSelected) {\n                return selectModel.value;\n            }\n        });\n        return '';\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/components/role-update/role-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <ba-card title=\\\"Update Role - {{role?.permission}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n            <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n        </ba-card>\\n    </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update role'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/roles/components/role-update/role-update.html\n// module id = ./src/app/pages/org-identity-registry/roles/components/role-update/role-update.html\n// module chunks = 0","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'roles',\n    template: `<router-outlet></router-outlet>`\n})\nexport class RolesComponent {\n    constructor() {\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/roles.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgaModule } from '../../../theme/nga.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { routing } from './roles.routing';\nimport { RolesComponent } from './roles.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { RoleNewComponent } from './components/role-new/role-new.component';\nimport { RoleDetailsComponent } from './components/role-details/role-details.component';\nimport { RoleUpdateComponent } from './components/role-update/role-update.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NgaModule,\n        SharedModule,\n        routing\n    ],\n    declarations: [\n        RolesComponent,\n        RoleListComponent,\n        RoleNewComponent,\n        RoleDetailsComponent,\n        RoleUpdateComponent\n    ]\n})\nexport default class RolesModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/roles.module.ts","import { RouterModule, Routes } from '@angular/router';\nimport { RolesComponent } from './roles.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { RoleNewComponent } from './components/role-new/role-new.component';\nimport { RoleDetailsComponent } from './components/role-details/role-details.component';\nimport { RoleUpdateComponent } from './components/role-update/role-update.component';\n\nconst routes: Routes = [\n    {\n        path: 'roles',\n        component: RolesComponent,\n        data: {breadcrumb: 'Roles'},\n        children: [\n            {\n                path: '',\n                component: RoleListComponent\n            },\n            {\n                path: 'register',\n                component: RoleNewComponent,\n                data: {breadcrumb: 'Register'}\n            },\n            {\n                path: ':id',\n                component: RoleDetailsComponent,\n                data: {breadcrumb: 'Details'}\n            },\n            {\n                path: 'update/:id',\n                component: RoleUpdateComponent,\n                data: {breadcrumb: 'Update'}\n            }\n        ]\n    }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/roles.routing.ts","import { EnumsHelper } from '../../../../shared/enums-helper';\nimport { Role } from '../../../../backend-api/identity-registry/autogen/model/Role';\nimport RoleNameEnum = Role.RoleNameEnum;\n\nexport interface RoleNameViewModel {\n    value?: string;\n    label?: string;\n}\n\nexport class RoleViewModel {\n    public static getAllRoleNames(): Array<RoleNameViewModel> {\n        let models: Array<RoleNameViewModel> = [];\n\n        let keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(RoleNameEnum);\n        keysAndValues.forEach(enumKeyAndValue => {\n           let model: RoleNameViewModel = {};\n           if (enumKeyAndValue.value != RoleNameEnum.APPROVEORG && enumKeyAndValue.value != RoleNameEnum.SITEADMIN) {\n               model.value = enumKeyAndValue.value;\n               model.label = RoleViewModel.getLabelForEnum(enumKeyAndValue.value);\n               models.push(model);\n           }\n        });\n        return models;\n    }\n\n    public static getLabelForEnum(roleNameEnum: RoleNameEnum): string {\n        if (!roleNameEnum) {\n            return '';\n        }\n        let text = '';\n        switch (roleNameEnum) {\n            case RoleNameEnum.ORGADMIN: {\n                text = 'Org Admin';\n                break;\n            }\n            case RoleNameEnum.ENTITYADMIN: {\n                text = 'Entity Admin';\n                break;\n            }\n            case RoleNameEnum.SERVICEADMIN: {\n                text = 'Service Admin';\n                break;\n            }\n            case RoleNameEnum.USER: {\n                text = 'User';\n                break;\n            }\n            case RoleNameEnum.USERADMIN: {\n                text = 'User Admin';\n                break;\n            }\n            case RoleNameEnum.VESSELADMIN: {\n                text = 'Vessel Admin';\n                break;\n            }\n            case RoleNameEnum.DEVICEADMIN: {\n                text = 'Device Admin';\n                break;\n            }\n            case RoleNameEnum.APPROVEORG: {\n                text = 'Approve Admin';\n                break;\n            }\n            case RoleNameEnum.SITEADMIN: {\n                text = 'Site Admin';\n                break;\n            }\n            default: {\n                text = '';\n                break;\n            }\n        }\n        return text;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/roles/view-models/RoleViewModel.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'service-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details.html'),\n  styles: []\n})\nexport class ServiceDetailsComponent {\n\tpublic title:string;\n\tpublic isLoading:boolean;\n\tpublic service:Service;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tconstructor(private route: ActivatedRoute, private servicesService: IdServicesService, private router:Router, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.loadService();\n\t}\n\n\tprivate loadService() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tlet version = this.route.snapshot.queryParams['serviceVersion'];\n\t\tthis.servicesService.getIdService(mrn, version).subscribe(\n\t\t\tservice => {\n\t\t\t\tthis.service = service;\n\t\t\t\tthis.title = service.name;\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateIdService(this.service.mrn, this.service.instanceVersion);\n\t}\n\n\tpublic delete() {\n\t\tthis.modalDescription = 'Are you sure you want to delete the service?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoading = true;\n\t\tthis.showModal = false;\n\t\tthis.servicesService.deleteIdService(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <service-details-view [shouldShowDelete]=\\\"true\\\" (updateAction)=\\\"update()\\\" (deleteAction)=\\\"delete()\\\" [isLoading]=\\\"isLoading\\\" [title]=\\\"title\\\" [service]=\\\"service\\\"></service-details-view>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module chunks = 0 1","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { EntityImageModel } from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Observable } from \"rxjs\";\nimport { Service } from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { IdServicesService } from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../../shared/app.constants\";\n\n@Component({\n  selector: 'service-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-list.html'),\n  styles: []\n})\nexport class ServiceListComponent implements OnInit {\n\tprivate KEY_NEW = 'KEY_NEW_SERVICE';\n\tprivate services:Array<Service>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public organization: Organization;\n  public isLoading: boolean;\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private servicesService: IdServicesService, private orgService: OrganizationsService, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadMyOrganization();\n\t  this.loadServices();\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadServices() {\n\t\tthis.servicesService.getIdServices().subscribe(\n\t\t\tpageService => {\n\t\t\t\tthis.services = pageService.content;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get services', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (entityModel.entityId === this.KEY_NEW) {\n\t\t\tthis.navigationHelper.navigateToCreateIdService();\n\t\t} else {\n\t\t\tlet serviceMrnAndVersion = entityModel.entityId.split(TOKEN_DELIMITER);\n\t\t\tthis.navigationHelper.navigateToService(serviceMrnAndVersion[0], serviceMrnAndVersion[1]);\n\t\t}\n\t}\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.services) {\n\t\t  this.services.forEach(service => {\n\t\t  \tif (service.instanceVersion) {\n\t\t\t      this.entityImageList.push({imageSourceObservable:this.createImgObservable(service), entityId:service.mrn + TOKEN_DELIMITER + service.instanceVersion, title:service.name});\n\t\t\t  }\n\t\t  });\n\t  }\n\t  if (this.authService.authState.hasPermission(AuthPermission.ServiceAdmin)) {\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new Service', isAdd:true});\n\t  }\n  }\n\n\tprivate createImgObservable(service:Service):Observable<string> {\n\t\tlet imageSrc = 'assets/img/no_service.svg';\n\t\treturn Observable.create(observer => {\n\t\t\tobserver.next(imageSrc);\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Services for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {VesselHelper} from \"../../../../shared/services/vessel-helper\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\n\n\n@Component({\n  selector: 'service-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-new.html'),\n  styles: []\n})\nexport class ServiceNewComponent implements OnInit {\n  public organization: Organization;\n  private isPrefilled = false;\n\tprivate mrn: string;\n\tprivate name: string;\n\tprivate instanceVersion: string;\n\tprivate mrnMask:string;\n\tprivate mrnPattern:string;\n\tprivate mrnPatternError:string;\n\tpublic onRegister: Function;\n\tprivate vessel: Vessel;\n\tprivate vessels: Array<Vessel>;\n\t// McForm params\n\tprivate useOIDCRedirect:boolean = true;\n\tprivate useOIDC:boolean = false;\n\tprivate oidcAccessType:OidcAccessTypeEnum = null;\n\tprivate linkToVessel: boolean = false;\n\tpublic isLoading = true;\n\tpublic isRegistering = false;\n\tpublic registerTitle = \"Register Service\";\n\tpublic registerButtonClass = \"btn btn-danger btn-raised\";\n\tpublic registerForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService, private vesselsService: VesselsService) {\n\t\tthis.mrnMask = mrnHelper.mrnMaskForInstance();\n\t\tthis.mrnPattern = mrnHelper.mrnPattern();\n\t\tthis.mrnPatternError = mrnHelper.mrnPatternError();\n\t\tthis.mrn = this.mrnMask;\n\t}\n\n\tngOnInit() {\n\t\tthis.onRegister = this.register.bind(this);\n\t\tthis.isRegistering = false;\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.activatedRoute.snapshot.queryParams['mrn'];\n\t\tlet name = this.activatedRoute.snapshot.queryParams['name'];\n\t\tlet instanceVersion = this.activatedRoute.snapshot.queryParams['instanceVersion'];\n\t\tif (name && mrn && instanceVersion) {\n\t\t\tthis.isPrefilled = true;\n\t\t\tthis.mrn = mrn;\n\t\t\tthis.name = name;\n\t\t\tthis.instanceVersion = instanceVersion;\n\t\t}\n\t\tthis.loadMyOrganization();\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.cancelCreateService();\n\t}\n\n\tpublic register() {\n\t\tthis.isRegistering = true;\n\t\tlet service:Service = {\n\t\t\tmrn: this.mrn,\n\t\t\tname: this.registerForm.value.name,\n\t\t\tinstanceVersion: this.registerForm.value.instanceVersion,\n\t\t\tpermissions: this.registerForm.value.permissions,\n\t\t\tcertDomainName: this.registerForm.value.certDomainName\n\t\t};\n\t\tif (this.useOIDC) {\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tservice.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;\n\t\t\t} else {\n\t\t\t\tservice.oidcRedirectUri = '';\n\t\t\t}\n\n\t\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\n\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\n\t\t\t\tservice.oidcAccessType = oidcAccessType;\n\t\t\t}\n\t\t} else {\n\t\t\tservice.oidcAccessType = null;\n\t\t\tservice.oidcRedirectUri = null;\n\t\t}\n\n\t\tif (this.linkToVessel) {\n\t\t\tservice.vessel = this.vessel;\n\t\t}\n\t\tthis.createService(service);\n\t}\n\n\tprivate createService(service:Service) {\n\t\tthis.servicesService.createIdService(service).subscribe(\n\t\t\tservice => {\n\t\t\t\tif (this.isPrefilled) {\n\t\t\t\t\tthis.cancel();\n\t\t\t\t} else {\n\t\t\t\t\tthis.navigationService.navigateToService(service.mrn, service.instanceVersion);\n\t\t\t\t}\n\t\t\t\tthis.isRegistering = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isRegistering = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to create service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.loadVessels();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(pageVessel => {\n\t\t\tthis.vessels = pageVessel.content;\n\t\t\tthis.generateForm();\n\t\t\tthis.isLoading = false;\n\t\t},error => {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', MCNotificationType.Error, error);\n\t\t\tthis.cancel()\n\t\t});\n\t}\n\n\tprivate shouldLinkToVessel(linkToVessel: boolean) {\n\t\tthis.linkToVessel = linkToVessel;\n\t\tthis.generateForm();\n\t}\n\n\tprivate shouldUseOIDCRedirect(value:OidcAccessTypeEnum) {\n\t\tif (value && this.oidcAccessType != value) {\n\t\t\tthis.oidcAccessType = value;\n\t\t\tthis.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;\n\t\t\tthis.generateForm();\n\t\t}\n\t}\n\n\tprivate shouldUseOIDC(useOIDC:boolean) {\n\t\tthis.useOIDC = useOIDC;\n\t\tthis.generateForm();\n\t}\n\n\tprivate generateMRN(idValue:string) {\n\t\tvar mrn = (idValue?idValue:'');\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\n\t}\n\n\tpublic isFormValid() {\n\t\tvar oidcTypeValid = true;\n\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\n\t\tif (this.useOIDC && (!oidcAccessType || oidcAccessType.toLowerCase().indexOf('undefined') >= 0)) {\n\t\t\toidcTypeValid = false;\n\t\t}\n\t\treturn this.registerForm.valid && oidcTypeValid;\n\t}\n\n\tprivate generateForm() {\n\t\tvar oldForm = this.registerForm;\n\t\tthis.registerForm = this.formBuilder.group({});\n\t\tif (!oldForm) {\n\t\t\toldForm = this.registerForm;\n\t\t}\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tif (!this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'serviceId', controlType: McFormControlType.Text, labelName: 'Service ID', placeholder: 'Enter Service ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\n\t\t\tformControl = new FormControl(oldForm.value.serviceId, formControlModel.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.generateMRN(param));\n\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModel);\n\t\t}\n\n\t\tif (this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\n\t\t\tformControl = new FormControl(this.name, formControlModel.validator);\n\t\t} else {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t\t\tformControl = new FormControl(oldForm.value.name, formControlModel.validator);\n\t\t}\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tif (this.isPrefilled) {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'instanceVersion', controlType: McFormControlType.Text, labelName: 'Version', placeholder: '', isDisabled: true};\n\t\t\tformControl = new FormControl(this.instanceVersion, formControlModel.validator);\n\t\t} else {\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'instanceVersion', controlType: McFormControlType.Text, labelName: 'Version', placeholder: 'Version is required', validator:Validators.required};\n\t\t\tformControl = new FormControl(oldForm.value.instanceVersion, formControlModel.validator);\n\t\t}\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(oldForm.value.permissions, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\n\t\tformControl = new FormControl(oldForm.value.certDomainName, formControlModel.validator);\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\n\t\tformControl = new FormControl({value: formControlModelCheckbox.state, disabled: false}, formControlModelCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\n\t\tthis.registerForm.addControl(formControlModelCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelCheckbox);\n\n\t\tif (this.useOIDC) {\n\t\t\tlet selectValues = this.selectValues();\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate, showCheckmark:true};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDCRedirect(param));\n\t\t\tthis.registerForm.addControl(formControlModelSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.required, errorText:'URI is required'};\n\t\t\t\tformControl = new FormControl(oldForm.value.oidcRedirectUri, formControlModel.validator);\n\t\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\n\t\t\t\tthis.formControlModels.push(formControlModel);\n\t\t\t}\n\t\t}\n\n\t\tlet linkToVesselCheckbox:McFormControlModelCheckbox = {state: this.linkToVessel, formGroup: this.registerForm, elementId: 'linkToVessel', controlType: McFormControlType.Checkbox, labelName: 'Link to a vessel'};\n\t\tformControl = new FormControl({value: linkToVesselCheckbox.state, disabled: false}, linkToVesselCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldLinkToVessel(param));\n\t\tthis.registerForm.addControl(linkToVesselCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(linkToVesselCheckbox);\n\n\t\tif (this.linkToVessel) {\n\t\t\tlet selectValues = this.vesselSelectValues();\n\t\t\tlet vesselSelect:McFormControlModelSelect = {selectValues: selectValues, formGroup: this.registerForm, elementId: 'vesselSelect', controlType: McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), vesselSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => {\n\t\t\t\tif (param) {\n\t\t\t\t\tthis.vessel = param;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.registerForm.addControl(vesselSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(vesselSelect);\n\t\t}\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.oidcAccessType == null});\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\n\t\tallOidcTypes.forEach(oidcType => {\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.oidcAccessType];\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\n\t\t});\n\t\treturn selectValues;\n\t}\n\n\tprivate vesselSelectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tvar defaultSelected = true;\n\t\tif (this.vessels && this.vessels.length > 0) {\n\t\t\tthis.vessels.forEach(vessel => {\n\t\t\t\tlet isSelected = false;\n\t\t\t\tif (this.vessel) {\n\t\t\t\t\tisSelected = this.vessel.mrn === vessel.mrn;\n\t\t\t\t} else {\n\t\t\t\t\tisSelected = defaultSelected;\n\t\t\t\t\tdefaultSelected = false;\n\t\t\t\t}\n\t\t\t\tselectValues.push({value: vessel, label: VesselHelper.labelForSelect(vessel), isSelected: isSelected});\n\t\t\t});\n\t\t}\n\t\treturn selectValues;\n\t}\n\n\tprivate selectedValue(selectValues:Array<SelectModel>):any {\n\t\tfor(let selectModel of selectValues) {\n\t\t\tif (selectModel.isSelected) {\n\t\t\t\treturn selectModel.value;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Service for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [hideButtons]=\\\"true\\\" [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\"></mc-form>\\n\\n      <ul *ngIf=\\\"registerForm\\\" class=\\\"btn-list clearfix\\\">\\n        <li>\\n          <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid()\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\n        </li>\\n        <li>\\n          <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\nimport {isNullOrUndefined} from \"util\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport {VesselHelper} from \"../../../../shared/services/vessel-helper\";\n\n\n@Component({\n  selector: 'service-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-update.html'),\n  styles: []\n})\nexport class ServiceUpdateComponent implements OnInit {\n\n\tpublic idService:Service;\n\tpublic showModal:boolean = false;\n\tpublic showModalVesselAtt:boolean = false;\n\tpublic modalDescription:string;\n\tprivate vessel: Vessel;\n\tprivate vessels: Array<Vessel>;\n\t// McForm params\n\tprivate useOIDC:boolean = false;\n\tprivate useOIDCRedirect:boolean = true;\n\tprivate linkToVessel:boolean = false;\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\t// Changed fields\n\tprivate permissions:string;\n\tprivate certDomainName:string;\n\tprivate oidcRedirectUri:string;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService, private vesselsService: VesselsService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadIdService();\n\t}\n\n\tprivate loadIdService() {\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\n\t\tlet version = this.activatedRoute.snapshot.queryParams['instanceVersion'];\n\t\tthis.servicesService.getIdService(mrn, version).subscribe(\n\t\t\tidService => {\n\t\t\t\tthis.idService = idService;\n\t\t\t\tthis.useOIDC = this.idService.oidcAccessType != undefined;\n\t\t\t\tthis.useOIDCRedirect = (this.idService.oidcAccessType && this.idService.oidcAccessType != OidcAccessTypeEnum.BearerOnly);\n\t\t\t\tthis.linkToVessel = !isNullOrUndefined(this.idService.vessel);\n\t\t\t\tthis.permissions = this.idService.permissions;\n\t\t\t\tthis.certDomainName = this.idService.certDomainName;\n\t\t\t\tthis.oidcRedirectUri = this.idService.oidcRedirectUri;\n\t\t\t\tif (this.linkToVessel) {\n\t\t\t\t\tthis.vessel = this.idService.vessel;\n\t\t\t\t}\n\t\t\t\tthis.loadVessels();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\n\t\t\t\tthis.navigationService.navigateToService(mrn, version);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(pageVessel => {\n\t\t\tthis.vessels = pageVessel.content;\n\t\t\tthis.generateForm();\n\t\t\tthis.isLoading = false;\n\t\t},error => {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels for the service', MCNotificationType.Error, error);\n\t\t\tthis.navigationService.navigateToService(this.idService.mrn, this.idService.instanceVersion);\n\t\t});\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.gobackFromUpdateService();\n\t}\n\n\tpublic update() {\n\t\tif (this.hasActiveCertificate()){\n\t\t\tthis.modalDescription = \"<b>Certificates</b> will be <b>invalid</b> if you update the service.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?\";\n\t\t\tthis.showModal = true;\n\t\t} else {\n\t\t\tthis.showVesselAttWarning();\n\t\t}\n\t}\n\n\tpublic showVesselAttWarning() {\n\t\tif (this.linkToVessel && this.isNewVessel()) {\n\t\t\tthis.showModal = false;\n\t\t\tthis.modalDescription = \"The linked Vessel has changed. You should change the IMO and MMSI in the Instance XML as well.<br><br>Would you still like to update?\";\n\t\t\tthis.showModalVesselAtt = true;\n\t\t} else {\n\t\t\tthis.updateForSure();\n\t\t}\n\t}\n\n\tprivate isNewVessel() : boolean {\n\t\tif (this.vessel && this.idService.vessel) {\n\t\t\treturn this.vessel.mrn !== this.idService.vessel.mrn;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate hasActiveCertificate() : boolean {\n\t\tif (this.idService.certificates && this.idService.certificates.length > 0) {\n\t\t\tfor(let certificate of this.idService.certificates) {\n\t\t\t\tif (!certificate.revoked) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t\tthis.showModalVesselAtt = false;\n\t}\n\n\tpublic updateForSure() {\n\t\tthis.isUpdating = true;\n\t\tthis.updateValues(true);\n\t\tthis.updateIdService(this.idService);\n\t}\n\n\tprivate updateValues(overwriteOidc: boolean) {\n\t\tthis.idService.name = this.updateForm.value.name;\n\t\tthis.idService.permissions = this.updateForm.value.permissions;\n\t\tthis.idService.certDomainName = this.updateForm.value.certDomainName;\n\n\t\tif (this.linkToVessel) {\n\t\t\tthis.idService.vessel = this.updateForm.value.vesselSelect;\n\t\t} else {\n\t\t\tthis.idService.vessel = null;\n\t\t}\n\n\t\tif (overwriteOidc) {\n\t\t\tif (this.useOIDC) {\n\t\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\t\tthis.idService.oidcRedirectUri = this.updateForm.value.oidcRedirectUri;\n\t\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcRedirectUri = '';\n\t\t\t\t}\n\t\t\t\tlet oidcAccessType = this.updateForm.value.oidcAccessType;\n\t\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\n\t\t\t\t\tthis.idService.oidcAccessType = oidcAccessType;\n\t\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcAccessType = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\tthis.idService.oidcAccessType = null;\n\t\t\t\t\tthis.idService.oidcRedirectUri = null;\n\t\t\t\t\tthis.idService.oidcClientId = null;\n\t\t\t\t\tthis.idService.oidcClientSecret = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateIdService(service:Service) {\n\t\tthis.servicesService.updateIdService(service).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.gobackFromUpdateService();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update service', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate shouldUseOIDCRedirect(value:OidcAccessTypeEnum) {\n\t\tif (value && this.idService.oidcAccessType != value) {\n\t\t\tthis.idService.oidcAccessType = value;\n\t\t\tthis.useOIDCRedirect = value != OidcAccessTypeEnum.BearerOnly;\n\t\t\tthis.generateForm();\n\t\t}\n\t}\n\n\tprivate shouldUseOIDC(useOIDC:boolean) {\n\t\tthis.useOIDC = useOIDC;\n\t\tthis.updateValues(false);\n\t\tthis.generateForm();\n\t}\n\n\tprivate shouldLinkToVessel(linkToVessel: boolean) {\n\t\tthis.linkToVessel = linkToVessel;\n\t\tthis.generateForm();\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.idService.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\n\t\tformControl = new FormControl(this.idService.name, formControlModel.validator);\n\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(this.permissions, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.permissions = param);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\n\t\tformControl = new FormControl(this.certDomainName, formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.certDomainName = param);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.updateForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\n\t\tformControl = new FormControl({value: \"\\\"\" + formControlModelCheckbox.state + \"\\\"\", disabled: false}, formControlModelCheckbox.validator);\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\n\t\tthis.updateForm.addControl(formControlModelCheckbox.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelCheckbox);\n\n\t\tif (this.useOIDC) {\n\t\t\tlet selectValues = this.selectValues();\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.updateForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate, showCheckmark:true};\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\n\t\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDCRedirect(param));\n\t\t\tthis.updateForm.addControl(formControlModelSelect.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\t\tif (this.useOIDCRedirect) {\n\t\t\t\tformControlModel = {formGroup: this.updateForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.required, errorText:'URI is required'};\n\t\t\t\tformControl = new FormControl(this.oidcRedirectUri, formControlModel.validator);\n\t\t\t\tformControl.valueChanges.subscribe(param => this.oidcRedirectUri = param);\n\t\t\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\t\t\tthis.formControlModels.push(formControlModel);\n\t\t\t}\n\n\t\t}\n\n    let linkToVesselCheckbox:McFormControlModelCheckbox = {state: this.linkToVessel, formGroup: this.updateForm, elementId: 'linkToVessel', controlType: McFormControlType.Checkbox, labelName: 'Link to a vessel'};\n    formControl = new FormControl({value: linkToVesselCheckbox.state, disabled: false}, linkToVesselCheckbox.validator);\n    formControl.valueChanges.subscribe(param => this.shouldLinkToVessel(param));\n    this.updateForm.addControl(linkToVesselCheckbox.elementId, formControl);\n    this.formControlModels.push(linkToVesselCheckbox);\n\n    if (this.linkToVessel) {\n        let selectValues = this.vesselSelectValues();\n        let vesselSelect:McFormControlModelSelect = {selectValues: selectValues, formGroup: this.updateForm, elementId: 'vesselSelect', controlType: McFormControlType.Select, validator: null, labelName: 'Vessel', placeholder: '', showCheckmark: false, requireGroupValid: false};\n        formControl = new FormControl(this.selectedValue(selectValues));\n        formControl.valueChanges.subscribe(param => {\n            if (param) {\n                this.vessel = param;\n            }\n        });\n        this.updateForm.addControl(vesselSelect.elementId, formControl);\n        this.formControlModels.push(vesselSelect);\n    }\n\t}\n\n\tprivate selectedValue(selectValues:Array<SelectModel>):string {\n\t\tfor(let selectModel of selectValues) {\n\t\t\tif (selectModel.isSelected) {\n\t\t\t\treturn selectModel.value;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.idService.oidcAccessType == null});\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\n\t\tallOidcTypes.forEach(oidcType => {\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.idService.oidcAccessType];\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\n\t\t});\n\t\treturn selectValues;\n\t}\n\n\tprivate vesselSelectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tvar defaultSelected = true;\n\t\tif (this.vessels && this.vessels.length > 0) {\n\t\t\tthis.vessels.forEach(vessel => {\n\t\t\t\tlet isSelected = false;\n\t\t\t\tif (this.vessel) {\n\t\t\t\t\tisSelected = this.vessel.mrn === vessel.mrn;\n\t\t\t\t} else {\n\t\t\t\t\tisSelected = defaultSelected;\n\t\t\t\t\tdefaultSelected = false;\n\t\t\t\t}\n\t\t\t\tselectValues.push({value: vessel, label: VesselHelper.labelForSelect(vessel), isSelected: isSelected});\n\t\t\t});\n\t\t}\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update - {{idService?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"showVesselAttWarning()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModalVesselAtt\\\" [title]=\\\"'Update service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module chunks = 0 1","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'services',\n  template: `<router-outlet></router-outlet>`\n})\nexport class ServicesComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './services.routing';\nimport {ServicesComponent} from \"./services.component\";\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    ServicesComponent,\n    ServiceDetailsComponent,\n    ServiceListComponent,\n\t  ServiceNewComponent,\n\t  ServiceUpdateComponent\n  ],\n\texports: [\n\t\tServiceNewComponent,\n\t\tServiceUpdateComponent\n\t]\n})\nexport default class ServicesModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {ServicesComponent} from \"./services.component\";\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'services',\n    component: ServicesComponent,\n    data:{breadcrumb: 'Services'},\n    children: [\n      {\n        path: '',\n        component: ServiceListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: ServiceNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n      {\n        path: ':id',\n        component: ServiceDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: ServiceUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.routing.ts","import {EnumsHelper} from \"../../../../shared/enums-helper\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\n\nexport interface OidcAccessTypeViewModel {\n\tvalue?:string;\n\tlabel?:string;\n}\n\nexport class ServiceViewModel {\n\n\n\tpublic static getAllOidcAccessTypes(): Array<OidcAccessTypeViewModel> {\n\t\tlet models:Array<OidcAccessTypeViewModel> = [];\n\n\t\tlet keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);\n\t\tkeysAndValues.forEach(enumKeyAndValue => {\n\t\t\tlet model:OidcAccessTypeViewModel = {};\n\t\t\tmodel.value = enumKeyAndValue.value;\n\t\t\tmodel.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);\n\t\t\tmodels.push(model);\n\t\t});\n\t\treturn models;\n\t}\n\n\n\tpublic static getLabelForEnum(oidcAccessTypeEnum:OidcAccessTypeEnum):string {\n\t\tif (!oidcAccessTypeEnum) {\n\t\t\treturn '';\n\t\t}\n\t\tvar text = '';\n\t\tswitch (oidcAccessTypeEnum) {\n\t\t\tcase OidcAccessTypeEnum.BearerOnly: {\n\t\t\t\ttext = 'Bearer only';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Confidential: {\n\t\t\t\ttext = 'Confidential';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase OidcAccessTypeEnum.Public: {\n\t\t\t\ttext = 'Public';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault : {\n\t\t\t\ttext = OidcAccessTypeEnum[oidcAccessTypeEnum];\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = ''+ oidcAccessTypeEnum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport { CertificateEntityType } from \"../../../../shared/services/certificate-helper.service\";\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { User } from \"../../../../../backend-api/identity-registry/autogen/model/User\";\nimport { UsersService } from \"../../../../../backend-api/identity-registry/services/users.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport FederationTypeEnum = Organization.FederationTypeEnum;\n\n@Component({\n  selector: 'user-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./user-details.html'),\n  styles: []\n})\nexport class UserDetailsComponent {\n\tprivate organization:Organization;\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic title:string;\n\tpublic isLoading:boolean;\n\tpublic user:User;\n\tpublic entityType: CertificateEntityType;\n\tpublic certificateTitle: string;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\tconstructor(private authService:AuthService, private route: ActivatedRoute, private router:Router, private usersService: UsersService, private organizationService: OrganizationsService, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.entityType = CertificateEntityType.User;\n\t\tthis.loadOrganization();\n\t\tthis.loadUser();\n\t}\n\n\tprivate loadUser() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tthis.usersService.getUser(mrn).subscribe(\n\t\t\tuser => {\n\t\t\t\tthis.user = user;\n\t\t\t\tthis.title = user.firstName + \" \" + user.lastName;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the user', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadOrganization() {\n\t\tthis.organizationService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.user) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.user.mrn});\n\t\t\tthis.labelValues.push({label: 'First Name', valueHtml: this.user.firstName});\n\t\t\tthis.labelValues.push({label: 'Last Name', valueHtml: this.user.lastName});\n\t\t\tthis.labelValues.push({label: 'Email', valueHtml: this.user.email});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.user.permissions});\n\t\t}\n\t}\n\n\tpublic showUpdate():boolean {\n\t\tif (!this.organization) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.isAdmin() && this.organization.federationType === FederationTypeEnum.TestIdp;\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateUser(this.user.mrn);\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.isAdmin() && this.user != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.UserAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.modalDescription = 'Are you sure you want to delete the user?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoading = true;\n\t\tthis.showModal = false;\n\t\tthis.usersService.deleteUser(this.user.mrn).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the user', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/components/user-details/user-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"!isLoading && showDelete() || showUpdate()\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"organization && showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update user</button>\\n        </li>\\n        <li *ngIf=\\\"showDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete user</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"user\\\">\\n      <ba-card title=\\\"Certificates for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"user?.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"title\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"user?.certificates\\\"></certificates-table>\\n      </ba-card>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete user'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/users/components/user-details/user-details.html\n// module id = ./src/app/pages/org-identity-registry/users/components/user-details/user-details.html\n// module chunks = 0","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { EntityImageModel } from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Observable } from \"rxjs\";\nimport { User } from \"../../../../../backend-api/identity-registry/autogen/model/User\";\nimport { UsersService } from \"../../../../../backend-api/identity-registry/services/users.service\";\nimport FederationTypeEnum = Organization.FederationTypeEnum;\n\n@Component({\n  selector: 'user-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./user-list.html'),\n  styles: []\n})\nexport class UserListComponent implements OnInit {\n\tprivate KEY_NEW = 'KEY_NEW_USER';\n\tprivate users:Array<User>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public organization: Organization;\n  public isLoading: boolean;\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private usersService: UsersService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadMyOrganization();\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.loadUsers();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadUsers() {\n\t\tthis.usersService.getUsers().subscribe(\n\t\t\tpageUser => {\n\t\t\t\tthis.users = pageUser.content;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get users', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (entityModel.entityId === this.KEY_NEW) {\n\t\t\tthis.gotoCreate();\n\t\t} else {\n\t\t\tthis.router.navigate([entityModel.entityId], {relativeTo: this.route});\n\t\t}\n\t}\n\n\tpublic gotoCreate() {\n\t\tthis.router.navigate(['register'], {relativeTo: this.route});\n\t}\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.users) {\n\t\t  this.users.forEach(user => {\n\t\t\t  var htmlContent = '&nbsp;';\n\t\t\t  if (user.email) {\n\t\t\t\t  htmlContent = \"<a href='mailto:\" + user.email + \"'>\" + user.email + \"</a>\";\n\t\t\t  }\n\t\t\t    this.entityImageList.push({imageSourceObservable:this.createImgObservable(user), entityId:user.mrn, title:user.firstName + \" \" + user.lastName, htmlContent:htmlContent});\n\t\t\t  }\n\t\t  );\n\t  }\n\t  if (this.canCreateUser()) {\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new User', isAdd:true, htmlContent: '&nbsp;'});\n\t  }\n  }\n\n  private canCreateUser():boolean {\n  \treturn this.authService.authState.hasPermission(AuthPermission.UserAdmin) && this.organization.federationType === FederationTypeEnum.TestIdp;\n  }\n\n\tprivate createImgObservable(user:User):Observable<string> {\n\t\tlet imageSrc = 'assets/img/no_user.png';\n\t\treturn Observable.create(observer => {\n\t\t\tobserver.next(imageSrc);\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/components/user-list/user-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Users for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/users/components/user-list/user-list.html\n// module id = ./src/app/pages/org-identity-registry/users/components/user-list/user-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {McFormControlModel, McFormControlType} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {UsersService} from \"../../../../../backend-api/identity-registry/services/users.service\";\nimport {User} from \"../../../../../backend-api/identity-registry/autogen/model/User\";\nimport {McUtils} from \"../../../../../shared/mc-utils\";\n\n\n@Component({\n  selector: 'user-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./user-new.html'),\n  styles: []\n})\nexport class UserNewComponent implements OnInit {\n  public organization: Organization;\n\tprivate mrn: string;\n\tprivate mrnMask:string;\n\tprivate mrnPattern:string;\n\tprivate mrnPatternError:string;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isRegistering = false;\n\tpublic registerTitle = \"Register User\";\n\tpublic userForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private usersService: UsersService, mrnHelper: MrnHelperService) {\n\t\tthis.mrnMask = mrnHelper.mrnMaskForUser();\n\t\tthis.mrnPattern = mrnHelper.mrnPattern();\n\t\tthis.mrnPatternError = mrnHelper.mrnPatternError();\n\t\tthis.mrn = this.mrnMask;\n\t}\n\n\tngOnInit() {\n\t\tthis.isRegistering = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadMyOrganization();\n\t}\n\n\tpublic cancel() {\n\t\tthis.navigationService.cancelCreateUser();\n\t}\n\n\tpublic register() {\n\t\tthis.isRegistering = true;\n\t\tlet user:User = {\n\t\t\tmrn: this.mrn,\n\t\t\tfirstName: this.userForm.value.firstName,\n\t\t\tlastName: this.userForm.value.lastName,\n\t\t\tpermissions: this.userForm.value.permissions,\n\t\t\temail: this.userForm.value.emails.email\n\t\t};\n\n\t\tthis.createUser(user);\n\t}\n\n\n\n\tprivate createUser(user:User) {\n\t\tthis.usersService.createUser(user).subscribe(\n\t\t\tuser => {\n\t\t\t\tthis.navigationService.navigateToUser(user.mrn);\n\t\t\t\tthis.isRegistering = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isRegistering = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to create user', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateMRN(idValue:string) {\n\t\tvar mrn = (idValue?idValue:'');\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\n\t\tthis.userForm.patchValue({mrn: this.mrn});\n\t}\n\n\tprivate generateForm() {\n\t\tthis.userForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.userForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\n\t\tthis.userForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.userForm, elementId: 'userId', controlType: McFormControlType.Text, labelName: 'User ID', placeholder: 'Enter user ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tformControl.valueChanges.subscribe(param => this.generateMRN(param));\n\t\tthis.userForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.userForm, elementId: 'firstName', controlType: McFormControlType.Text, labelName: 'First Name', placeholder: 'First Name is required', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.userForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.userForm, elementId: 'lastName', controlType: McFormControlType.Text, labelName: 'Last Name', placeholder: 'Last Name is required', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.userForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tMcUtils.generateEmailConfirmGroup(this.formBuilder, this.userForm, this.formControlModels);\n\n\t\tformControlModel = {formGroup: this.userForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.userForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/components/user-new/user-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new User for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formGroup]=\\\"userForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/users/components/user-new/user-new.html\n// module id = ./src/app/pages/org-identity-registry/users/components/user-new/user-new.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {\n\tMcFormControlModel, McFormControlType\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\nimport {User} from \"../../../../../backend-api/identity-registry/autogen/model/User\";\nimport {UsersService} from \"../../../../../backend-api/identity-registry/services/users.service\";\nimport {McUtils} from \"../../../../../shared/mc-utils\";\nimport {EmailValidator} from \"../../../../../theme/validators/email.validator\";\n\n\n@Component({\n  selector: 'user-update',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./user-update.html'),\n  styles: []\n})\nexport class UserUpdateComponent implements OnInit {\n\tpublic user: User;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update user\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private usersService: UsersService) {\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadUser();\n\t}\n\n\tpublic cancel() {\n\t\tlet userMrn = (this.user ? this.user.mrn : '');\n\t\tthis.navigationService.navigateToUser(userMrn);\n\t}\n\n\tpublic update() {\n\t\tthis.isUpdating = true;\n\t\tthis.user.firstName = this.updateForm.value.firstName;\n\t\tthis.user.lastName = this.updateForm.value.lastName;\n\t\tthis.user.permissions = this.updateForm.value.permissions;\n\n\t\tthis.updateUser(this.user);\n\t}\n\n\tprivate updateUser(user:User) {\n\t\tthis.usersService.updateUser(user).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.navigateToUser(this.user.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update user', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadUser() {\n\t\tthis.isLoading = true;\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\n\t\tthis.usersService.getUser(mrn).subscribe(\n\t\t\tuser => {\n\t\t\t\tthis.user = user;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the user', MCNotificationType.Error, err);\n\n\t\t\t\tthis.navigationService.navigateToUser(mrn);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.user.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'email', controlType: McFormControlType.Text, labelName: 'Email',  placeholder: '', isDisabled: true};\n\t\tformControl = new FormControl(this.user.email, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'firstName', controlType: McFormControlType.Text, labelName: 'First Name', placeholder: 'First Name is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.user.firstName, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'lastName', controlType: McFormControlType.Text, labelName: 'Last Name', placeholder: 'Last Name is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.user.lastName, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(this.user.permissions, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/components/user-update/user-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update User - {{user?.firstName}} {{user?.lastName}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/users/components/user-update/user-update.html\n// module id = ./src/app/pages/org-identity-registry/users/components/user-update/user-update.html\n// module chunks = 0","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'users',\n  template: `<router-outlet></router-outlet>`\n})\nexport class UsersComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/users.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './users.routing';\nimport {UsersComponent} from \"./users.component\";\nimport {UserListComponent} from \"./components/user-list/user-list.component\";\nimport {UserDetailsComponent} from \"./components/user-details/user-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {UserNewComponent} from \"./components/user-new/user-new.component\";\nimport {UserUpdateComponent} from \"./components/user-update/user-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    UsersComponent,\n    UserDetailsComponent,\n    UserListComponent,\n\t  UserNewComponent,\n\t  UserUpdateComponent\n  ]\n})\nexport default class UsersModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/users.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {UsersComponent} from \"./users.component\";\nimport {UserListComponent} from \"./components/user-list/user-list.component\";\nimport {UserDetailsComponent} from \"./components/user-details/user-details.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {UserNewComponent} from \"./components/user-new/user-new.component\";\nimport {UserUpdateComponent} from \"./components/user-update/user-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'users',\n    component: UsersComponent,\n    data:{breadcrumb: 'Users'},\n    children: [\n      {\n        path: '',\n        component: UserListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: UserNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n      {\n        path: ':id',\n        component: UserDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: UserUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/users/users.routing.ts","import { Component, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { VesselsService } from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Vessel } from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport { LabelValueModel } from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { VesselViewModel } from \"../../view-models/VesselViewModel\";\nimport { CertificateEntityType } from \"../../../../shared/services/certificate-helper.service\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { NavigationHelperService } from \"../../../../../shared/navigation-helper.service\";\nimport { Service } from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { VesselImageService } from \"../../../../../backend-api/identity-registry/services/vessel-image.service\";\n\n@Component({\n  selector: 'vessel-details',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./vessel-details.html'),\n  styles: []\n})\nexport class VesselDetailsComponent {\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic vesselServices:Array<Service>;\n\tpublic title:string;\n\tpublic isLoadingVesselAndImage:boolean;\n\tpublic vesselViewModel:VesselViewModel;\n\tpublic vessel:Vessel;\n\tpublic entityType: CertificateEntityType;\n\tpublic certificateTitle: string;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\n\t// Images\n\tpublic image:string;\n\tpublic canChangeImage:boolean;\n\tpublic uploadingImage:boolean = false;\n\n  constructor(private vesselImageService:VesselImageService, private authService: AuthService, private route: ActivatedRoute, private router:Router, private vesselsService: VesselsService, private notifications:MCNotificationsService, private navigationHelper: NavigationHelperService) {\n\n  }\n\n  ngOnInit() {\n\t  this.entityType = CertificateEntityType.Vessel;\n\t  this.loadVessel();\n  }\n\n  public showUpdate():boolean {\n\t\treturn this.isAdmin() && this.vessel != null;\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.isAdmin() && this.vessel != null;\n\t}\n\n  private isAdmin() {\n\t  return this.authService.authState.hasPermission(AuthPermission.VesselAdmin);\n  }\n\n\tprivate loadVessel() {\n\t\tthis.isLoadingVesselAndImage = true;\n\t\tlet mrn = this.route.snapshot.params['id'];\n\t\tthis.vesselsService.getVessel(mrn).subscribe(\n\t\t\tvessel => {\n\t\t\t\tthis.vessel = vessel;\n\t\t\t\tthis.vesselViewModel = new VesselViewModel(vessel);\n\t\t\t\tthis.title = vessel.name;\n\n\t\t\t\tthis.canChangeImage = this.canChangeTheImage();\n\t\t\t\tthis.loadImage();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingVesselAndImage = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the vessel', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadImage(){\n\t\tthis.vesselImageService.getImageForVessel(this.vessel.mrn).subscribe(\n\t\t\timage => {\n\t\t\t\tthis.image = URL.createObjectURL(new Blob([image]));\n\t\t\t\tthis.uploadingImage = false;\n\t\t\t\tthis.imageLoaded();\n\t\t\t\tthis.loadVesselServices();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (this.canChangeTheImage()) {\n\t\t\t\t\tthis.image = 'assets/img/no_ship.png';\n\t\t\t\t}\n\t\t\t\tthis.uploadingImage = false;\n\t\t\t\tthis.imageLoaded();\n\t\t\t\tthis.loadVesselServices();\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate imageLoaded() {\n\n\t}\n\n\tprivate canChangeTheImage():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.VesselAdmin);\n\t}\n\n\tpublic uploadImage(image:any) {\n\t\tlet oldImage = this.image;\n\t\tthis.uploadingImage = true;\n\t\tthis.vesselImageService.uploadImage(this.vessel.mrn, image).subscribe(\n\t\t\timage => {\n\t\t\t\tthis.loadImage();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.image = oldImage;\n\t\t\t\tthis.uploadingImage = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to upload vessel image', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVesselServices() {\n\t\tthis.vesselsService.getVesselServices(this.vessel.mrn).subscribe(\n\t\t\tservices => { // FIXME: change when new api is here\n\t\t\t\tthis.vesselServices = services;\n\t\t\t\tthis.isLoadingVesselAndImage = false;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingVesselAndImage = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the vessel', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.vesselViewModel) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.vesselViewModel.getVessel().mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.vesselViewModel.getVessel().name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.vesselViewModel.getVessel().permissions});\n\t\t\tlet attributeViewModels = this.vesselViewModel.getAttributeViewModels();\n\t\t\tattributeViewModels.forEach(attributeViewModel => {\n\t\t\t\tthis.labelValues.push({label: attributeViewModel.attributeNameText, valueHtml: attributeViewModel.attributeValue});\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic update() {\n\t\tthis.navigationHelper.navigateToUpdateVessel(this.vessel.mrn);\n\t}\n\n\tprivate delete() {\n\t\tthis.modalDescription = 'Are you sure you want to delete the vessel?';\n\t\tthis.showModal = true;\n\t}\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic deleteForSure() {\n\t\tthis.isLoadingVesselAndImage = true;\n\t\tthis.showModal = false;\n\t\tthis.vesselsService.deleteVessel(this.vessel.mrn).subscribe(\n\t\t\t() => {\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoadingVesselAndImage = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the vessel', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <div *ngIf=\\\"image\\\" style=\\\"margin-bottom: 10px;\\\">\\n        <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"image | sanitizeUrl\\\" *ngIf=\\\"image && !canChangeImage\\\">\\n        <mc-logo-uploader [logo]=\\\"image\\\" [uploadingLogo]=\\\"uploadingImage\\\" (onUpload)=\\\"uploadImage($event)\\\" *ngIf=\\\"image && canChangeImage\\\"></mc-logo-uploader>\\n      </div>\\n      <mc-label-value-table [isLoading]=\\\"isLoadingVesselAndImage\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n      <ul *ngIf=\\\"!isLoadingVesselAndImage && (showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n        <li *ngIf=\\\"showUpdate()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update vessel</button>\\n        </li>\\n        <li *ngIf=\\\"showDelete()\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete vessel</button>\\n        </li>\\n      </ul>\\n    </ba-card>\\n\\n    <ba-card title=\\\"Services for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <h5>Update the ID information in the Instance-details-view to link additional services to this Vessel</h5>\\n      <services-table [services]=\\\"vesselServices\\\" [isLoading]=\\\"isLoadingVesselAndImage\\\"></services-table>\\n    </ba-card>\\n\\n    <div *ngIf=\\\"vessel\\\">\\n        <ba-card title=\\\"Certificates for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n          <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"vessel.mrn\\\" [isLoading]=\\\"isLoadingVesselAndImage\\\" [certificateTitle]=\\\"title\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"vessel.certificates\\\"></certificates-table>\\n        </ba-card>\\n    </div>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete vessel'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html\n// module chunks = 0","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../../shared/mc-notifications.service\";\nimport { Organization } from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationsService } from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Vessel } from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport { VesselsService } from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport { EntityImageModel } from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport { AuthPermission, AuthService } from \"../../../../../authentication/services/auth.service\";\nimport { Observable } from \"rxjs\";\nimport { VesselImageService } from \"../../../../../backend-api/identity-registry/services/vessel-image.service\";\n\n@Component({\n  selector: 'vessel-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./vessel-list.html'),\n  styles: []\n})\nexport class VesselListComponent implements OnInit {\n\tprivate KEY_NEW = 'KEY_NEW_VESSEL';\n\tprivate vessels:Array<Vessel>;\n\tpublic entityImageList: Array<EntityImageModel>;\n  public organization: Organization;\n  public isLoading: boolean;\n  constructor(private vesselImageService:VesselImageService, private authService: AuthService, private router:Router, private route:ActivatedRoute, private vesselsService: VesselsService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.loadMyOrganization();\n\t  this.loadVessels();\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.organization = organization;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate loadVessels() {\n\t\tthis.vesselsService.getVessels().subscribe(\n\t\t\tpageVessel => {\n\t\t\t\tthis.vessels = pageVessel.content;\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.generateEntityImageList();\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  public gotoDetails(entityModel:EntityImageModel) {\n\t  if (entityModel.entityId === this.KEY_NEW) {\n\t\t  this.gotoCreate();\n\t  } else {\n\t    this.router.navigate([entityModel.entityId], {relativeTo: this.route});\n\t  }\n  }\n\n  public gotoCreate() {\n\t  this.router.navigate(['register'], {relativeTo: this.route})\n  }\n\n  private generateEntityImageList() {\n\t  this.entityImageList = [];\n\t  if (this.vessels) {\n\t\t  this.vessels.forEach(vessel => {\n\t\t\t    this.entityImageList.push({imageSourceObservable:this.createImgObservable(vessel), entityId:vessel.mrn, title:vessel.name});\n\t\t\t  }\n\t\t  );\n\t  }\n\t  if (this.authService.authState.hasPermission(AuthPermission.VesselAdmin)) {\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new Vessel', isAdd:true});\n\t  }\n  }\n\n\tprivate createImgObservable(vessel:Vessel):Observable<string> {\n\t\tlet imageSrc = 'assets/img/no_ship.png';\n\t\treturn Observable.create(observer => {\n\t\t\tthis.vesselImageService.getImageForVessel(vessel.mrn).subscribe(\n\t\t\t\tlogo => {\n\t\t\t\t\tobserver.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tobserver.next(imageSrc);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Vessels for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {FormGroup, Validators, FormBuilder, FormControl} from \"@angular/forms\";\nimport {VesselViewModel, VesselAttributeViewModel} from \"../../view-models/VesselViewModel\";\nimport {VesselAttribute} from \"../../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\nimport {McFormControlModel, McFormControlType} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\n\n\n@Component({\n  selector: 'vessel-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./vessel-new.html'),\n  styles: []\n})\nexport class VesselNewComponent implements OnInit {\n  public organization: Organization;\n\n\tprivate mrn: string;\n\tprivate mrnMask:string;\n\tprivate mrnPattern:string;\n\tprivate mrnPatternError:string;\n\t// McForm params\n  public isLoading = true;\n  public isRegistering = false;\n  public registerTitle = \"Register Vessel\";\n\tpublic registerForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n  constructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private vesselsService: VesselsService, mrnHelper: MrnHelperService) {\n\t  this.mrnMask = mrnHelper.mrnMaskForVessel();\n\t  this.mrnPattern = mrnHelper.mrnPattern();\n\t  this.mrnPatternError = mrnHelper.mrnPatternError();\n\t  this.mrn = this.mrnMask;\n  }\n\n  ngOnInit() {\n    this.isRegistering = false;\n    this.isLoading = true;\n    this.loadMyOrganization();\n  }\n\n  public cancel() {\n    this.navigationService.cancelCreateVessel();\n  }\n\n  public register() {\n    this.isRegistering = true;\n\t  let vessel:Vessel = {\n\t\t  mrn: this.mrn,\n\t\t  name: this.registerForm.value.name,\n\t\t  permissions: this.registerForm.value.permissions\n\t  };\n\t  let formAttributes = this.registerForm.value.attributes;\n\t  let vesselAttributes:Array<VesselAttribute> = [];\n\t  Object.getOwnPropertyNames(formAttributes).forEach(propertyName => {\n\t\t  if (formAttributes[propertyName] && formAttributes[propertyName].length > 0) {\n\t\t\t  vesselAttributes.push({attributeName: AttributeNameEnum[propertyName], attributeValue: formAttributes[propertyName]});\n\t\t  }\n\t  });\n\t\tvessel.attributes = vesselAttributes;\n    this.createVessel(vessel);\n  }\n\n  private createVessel(vessel:Vessel) {\n    this.vesselsService.createVessel(vessel).subscribe(\n      vessel => {\n        this.navigationService.navigateToVessel(vessel.mrn);\n        this.isRegistering = false;\n      },\n      err => {\n        this.isRegistering = false;\n        this.notifications.generateNotification('Error', 'Error when trying to create vessel', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  private loadMyOrganization() {\n    this.orgService.getMyOrganization().subscribe(\n      organization => {\n        this.organization = organization;\n\t      this.generateForm();\n\t      this.isLoading = false;\n      },\n      err => {\n\t      this.isLoading = false;\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n\tprivate generateMRN(idValue:string) {\n\t\tvar mrn = (idValue?idValue:'');\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\n\t}\n\n  private generateForm() {\n\t  this.registerForm = this.formBuilder.group({});\n\t  this.formControlModels = [];\n\n\t  var formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t  var formControl = new FormControl(this.mrn, formControlModel.validator);\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\n\t  this.formControlModels.push(formControlModel);\n\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'vesselId', controlType: McFormControlType.Text, labelName: 'Vessel ID', placeholder: 'Enter Vessel ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\n\t  formControl = new FormControl('', formControlModel.validator);\n\t  formControl.valueChanges.subscribe(param => this.generateMRN(param));\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\n\t  this.formControlModels.push(formControlModel);\n\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t  formControl = new FormControl('', formControlModel.validator);\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\n\t  this.formControlModels.push(formControlModel);\n\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t  formControl = new FormControl('', formControlModel.validator);\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\n\t  this.formControlModels.push(formControlModel);\n\n\t  this.generateAttributesGroup();\n  }\n\n  private generateAttributesGroup() {\n    let attributesGroup = this.formBuilder.group({});\n\t  this.registerForm.addControl('attributes', attributesGroup);\n\n\t  let vesselAttributes:Array<VesselAttributeViewModel> = VesselViewModel.getAllPossibleVesselAttributes();\n\t\tvesselAttributes.forEach(vesselAttribute => {\n\t\t\tlet formControlModel:McFormControlModel = {formGroup: attributesGroup, elementId: AttributeNameEnum[vesselAttribute.attributeName], controlType: McFormControlType.Text, labelName: vesselAttribute.attributeNameText, placeholder: ''};\n\t\t\tlet formControl = new FormControl('', formControlModel.validator);\n\t\t\tattributesGroup.addControl(formControlModel.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModel);\n\t\t});\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Register new Vessel for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-form [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {FormGroup, Validators, FormBuilder, FormControl} from \"@angular/forms\";\nimport {VesselViewModel, VesselAttributeViewModel} from \"../../view-models/VesselViewModel\";\nimport {VesselAttribute} from \"../../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\nimport {McFormControlModel, McFormControlType} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\n\n\n@Component({\n\tselector: 'vessel-update',\n\tencapsulation: ViewEncapsulation.None,\n\ttemplate: require('./vessel-update.html'),\n\tstyles: []\n})\nexport class VesselUpdateComponent implements OnInit {\n\tpublic vessel:Vessel;\n\tpublic showModal:boolean = false;\n\tpublic modalDescription:string;\n\t// McForm params\n\tpublic isLoading = true;\n\tpublic isUpdating = false;\n\tpublic updateTitle = \"Update vessel\";\n\tpublic updateForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private vesselsService: VesselsService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isUpdating = false;\n\t\tthis.isLoading = true;\n\t\tthis.loadVessel();\n\t}\n\n\tprivate loadVessel() {\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\n\t\tthis.vesselsService.getVessel(mrn).subscribe(\n\t\t\tvessel => {\n\t\t\t\tthis.vessel = vessel;\n\t\t\t\tthis.generateForm();\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the vessel', MCNotificationType.Error, err);\n\n\t\t\t\tthis.navigationService.navigateToVessel(mrn);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic cancel() {\n\t\tlet vesselMrn = (this.vessel ? this.vessel.mrn : '');\n\t\tthis.navigationService.navigateToVessel(vesselMrn);\n\t}\n\n\tpublic update() {\n\t\tif (this.hasActiveCertificate()){\n\t\t\tthis.modalDescription = \"<b>Certificates</b> will be <b>invalid</b> if you update the Vessel.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?\";\n\t\t\tthis.showModal = true;\n\t\t} else {\n\t\t\tthis.updateForSure();\n\t\t}\n\t}\n\n\tprivate hasActiveCertificate() : boolean {\n\t\tif (this.vessel.certificates && this.vessel.certificates.length > 0) {\n\t\t\tfor(let certificate of this.vessel.certificates) {\n\t\t\t\tif (!certificate.revoked) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic cancelModal() {\n\t\tthis.showModal = false;\n\t}\n\n\tpublic updateForSure() {\n\t\tthis.isUpdating = true;\n\t\tthis.vessel.name = this.updateForm.value.name;\n\t\tthis.vessel.permissions = this.updateForm.value.permissions;\n\n\t\tlet formAttributes = this.updateForm.value.attributes;\n\t\tlet vesselAttributes:Array<VesselAttribute> = [];\n\t\tObject.getOwnPropertyNames(formAttributes).forEach(propertyName => {\n\t\t\tif (formAttributes[propertyName] && formAttributes[propertyName].length > 0) {\n\t\t\t\tvesselAttributes.push({attributeName: AttributeNameEnum[propertyName], attributeValue: formAttributes[propertyName]});\n\t\t\t}\n\t\t});\n\t\tthis.vessel.attributes = vesselAttributes;\n\t\tthis.updateVessel(this.vessel);\n\t}\n\n\tprivate updateVessel(vessel:Vessel) {\n\t\tthis.vesselsService.updateVessel(vessel).subscribe(\n\t\t\t_ => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.navigationService.navigateToVessel(vessel.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isUpdating = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update vessel', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate generateForm() {\n\t\tthis.updateForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\n\t\tvar formControl = new FormControl(this.vessel.mrn, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\n\t\tformControl = new FormControl(this.vessel.name, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\n\t\tformControl = new FormControl(this.vessel.permissions, formControlModel.validator);\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t\tthis.generateAttributesGroup();\n\t}\n\n\tprivate generateAttributesGroup() {\n\t\tlet attributesGroup = this.formBuilder.group({});\n\t\tthis.updateForm.addControl('attributes', attributesGroup);\n\n\t\tlet vesselAttributes:Array<VesselAttributeViewModel> = VesselViewModel.getAllPossibleVesselAttributes();\n\t\tvesselAttributes.forEach(vesselAttribute => {\n\t\t\tlet formControlModel:McFormControlModel = {formGroup: attributesGroup, elementId: AttributeNameEnum[vesselAttribute.attributeName], controlType: McFormControlType.Text, labelName: vesselAttribute.attributeNameText, placeholder: ''};\n\t\t\tlet formControl = new FormControl(this.getAttributeValue(vesselAttribute.attributeName), formControlModel.validator);\n\t\t\tattributesGroup.addControl(formControlModel.elementId, formControl);\n\t\t\tthis.formControlModels.push(formControlModel);\n\t\t});\n\t}\n\n\tprivate getAttributeValue(attributeName:AttributeNameEnum) : string {\n\t\tfor (let attribute of this.vessel.attributes) {\n\t\t\tif (attribute.attributeName === attributeName) {\n\t\t\t\treturn attribute.attributeValue;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Update Vessel - {{vessel?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n        <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\n    </ba-card>\\n  </div>\\n</div>\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update vessel'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-update/vessel-update.html\n// module chunks = 0","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'vessels',\n  template: `<router-outlet></router-outlet>`\n})\nexport class VesselsComponent {\n  constructor() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.component.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\n\nimport { routing }       from './vessels.routing';\nimport {VesselsComponent} from \"./vessels.component\";\nimport {VesselListComponent} from \"./components/vessel-list/vessel-list.component\";\nimport {VesselDetailsComponent} from \"./components/vessel-details/vessel-details.component\";\nimport {NgaModule} from \"../../../theme/nga.module\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {VesselNewComponent} from \"./components/vessel-new/vessel-new.component\";\nimport {VesselUpdateComponent} from \"./components/vessel-update/vessel-update.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n    SharedModule,\n    routing\n  ],\n  declarations: [\n    VesselsComponent,\n    VesselDetailsComponent,\n    VesselListComponent,\n\t  VesselNewComponent,\n\t  VesselUpdateComponent\n  ]\n})\nexport default class VesselsModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.module.ts","import { Routes, RouterModule }  from '@angular/router';\nimport {VesselsComponent} from \"./vessels.component\";\nimport {VesselListComponent} from \"./components/vessel-list/vessel-list.component\";\nimport {VesselDetailsComponent} from \"./components/vessel-details/vessel-details.component\";\nimport {VesselNewComponent} from \"./components/vessel-new/vessel-new.component\";\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\nimport {VesselUpdateComponent} from \"./components/vessel-update/vessel-update.component\";\nimport {CertificateRevokeComponent} from \"../../shared/components/certificate-revoke/certificate-revoke.component\";\n\n// noinspection TypeScriptValidateTypes\nconst routes: Routes = [\n  {\n    path: 'vessels',\n    component: VesselsComponent,\n    data:{breadcrumb: 'Vessels'},\n    children: [\n      {\n        path: '',\n        component: VesselListComponent\n      },\n\t    {\n\t\t    path: 'issuecert',\n\t\t    component: CertificateIssueNewComponent,\n\t\t    data:{breadcrumb: 'New Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'revokecert',\n\t\t    component: CertificateRevokeComponent,\n\t\t    data:{breadcrumb: 'Revoke Certificate'},\n\t\t    children: [\n\t\t    ]\n\t    },\n\t    {\n\t\t    path: 'register',\n\t\t    component: VesselNewComponent,\n\t\t    data:{breadcrumb: 'Register'}\n\t    },\n      {\n        path: ':id',\n        component: VesselDetailsComponent,\n        data:{breadcrumb: 'Details'}\n      },\n\t    {\n\t\t    path: 'update/:id',\n\t\t    component: VesselUpdateComponent,\n\t\t    data:{breadcrumb: 'Update'}\n\t    }\n    ]\n  }\n];\n\nexport const routing = RouterModule.forChild(routes);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.routing.ts","import {Vessel} from \"../../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselAttribute} from \"../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\nimport {EnumsHelper} from \"../../../../shared/enums-helper\";\n\nexport interface VesselAttributeViewModel extends VesselAttribute {\n\tattributeNameText?:string;\n}\n\n// TODO maybe this should just be a helper.service instead. Or mayby just static methods if no objects is needed\nexport class VesselViewModel {\n\tprivate attributes:Array<VesselAttributeViewModel>;\n\tprivate vessel:Vessel;\n\tconstructor(vessel:Vessel) {\n\t\tthis.vessel = vessel;\n\t\tthis.generateAttributes();\n\t}\n\n\tpublic static getAllPossibleVesselAttributes(): Array<VesselAttributeViewModel> {\n\t\tlet attributes:Array<VesselAttributeViewModel> = [];\n\n\t\tlet attributeKeysAndValues = EnumsHelper.getKeysAndValuesFromEnum(AttributeNameEnum);\n\t\tattributeKeysAndValues.forEach(enumKeyAndValue => {\n\t\t\tlet vesselAttribute:VesselAttributeViewModel = {\n\t\t\t\tattributeValue: '',\n\t\t\t\tattributeName: enumKeyAndValue.value,\n\t\t\t\tattributeNameText: VesselViewModel.getTextForVesselAttributeNameEnum(enumKeyAndValue.value)\n\t\t\t};\n\t\t\tattributes.push(vesselAttribute);\n\t\t});\n\t\treturn attributes;\n\t}\n\n\tpublic static convertVesselsToViewModels(vessels:Array<Vessel>):Array<VesselViewModel> {\n\t\tlet viewModels:Array<VesselViewModel> = [];\n\t\tif (vessels) {\n\t\t\tvessels.forEach(vessel => {\n\t\t\t\tviewModels.push(new VesselViewModel(vessel));\n\t\t\t});\n\t\t}\n\t\treturn viewModels;\n\t}\n\n\tpublic getVessel():Vessel {\n\t\treturn this.vessel;\n\t}\n\n\tpublic getAttributeViewModels():Array<VesselAttributeViewModel> {\n\t\treturn this.attributes;\n\t}\n\n\tprivate generateAttributes() {\n\t\tthis.attributes = [];\n\t\tif (this.vessel.attributes) {\n\t\t\tthis.vessel.attributes.forEach(attribute => {\n\t\t\t\tthis.attributes.push(this.attributeViewModelFromAttribute(attribute));\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate attributeViewModelFromAttribute(attribute:VesselAttribute): VesselAttributeViewModel {\n\t\tlet attributeViewModel: VesselAttributeViewModel = attribute;\n\t\tattributeViewModel.attributeNameText = VesselViewModel.getTextForVesselAttributeNameEnum(attribute.attributeName);\n\t\treturn attributeViewModel;\n\t}\n\n\n\tprivate static getTextForVesselAttributeNameEnum(vesselAttributeEnum:AttributeNameEnum):string {\n\t\tvar text = '';\n\t\tswitch (vesselAttributeEnum) {\n\t\t\tcase AttributeNameEnum.AisClass: {\n\t\t\t\ttext = 'AIS class';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AttributeNameEnum.Callsign: {\n\t\t\t\ttext = 'Call sign';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AttributeNameEnum.Flagstate: {\n\t\t\t\ttext = 'Flag state';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AttributeNameEnum.ImoNumber: {\n\t\t\t\ttext = 'IMO number';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AttributeNameEnum.MmsiNumber: {\n\t\t\t\ttext = 'MMSI number';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AttributeNameEnum.PortOfRegister: {\n\t\t\t\ttext = 'Port of register';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault : {\n\t\t\t\ttext = AttributeNameEnum[vesselAttributeEnum];\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = ''+ vesselAttributeEnum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {ServiceRegistrySearchRequest} from \"../../../shared/components/service-registry-search/ServiceRegistrySearchRequest\";\n\n@Injectable()\nexport class SrSearchRequestsService {\n\tprivate searchRequests: { [key: string]: ServiceRegistrySearchRequest } = {};\n  constructor() {\n  }\n\n  // Returns null if none found\n  public getSearchRequest(key:string) : ServiceRegistrySearchRequest {\n  \treturn this.searchRequests[key];\n\t}\n\n\tpublic addSearchRequest(key:string, searchRequest:ServiceRegistrySearchRequest) {\n  \tthis.searchRequests[key] = searchRequest;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-search-requests.service.ts","import {Injectable, OnInit} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\nimport {isNullOrUndefined} from \"util\";\n\n@Injectable()\nexport class SrViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  public generateLabelValuesForSpecification(specification:Specification, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (specification) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: specification.specificationId});\n      labelValues.push({label: 'Name', valueHtml: specification.name});\n      labelValues.push({label: 'Version', valueHtml: specification.version});\n\t    labelValues.push({label: 'Status', valueHtml: specification.status});\n\t\t  labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: specification.description});\n    }\n    return labelValues\n  }\n\n  public generateLabelValuesForDesign(design:Design, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (design) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: design.designId});\n      labelValues.push({label: 'Name', valueHtml: design.name});\n      labelValues.push({label: 'Version', valueHtml: design.version});\n      labelValues.push({label: 'Status', valueHtml: design.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: design.description});\n    }\n    return labelValues;\n  }\n\n  public generateLabelValuesForInstance(instance:Instance, organizationName:string):Array<LabelValueModel> {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (instance) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: instance.instanceId});\n      labelValues.push({label: 'Name', valueHtml: instance.name});\n      labelValues.push({label: 'Version', valueHtml: instance.version});\n      labelValues.push({label: 'Status', valueHtml: instance.status});\n\t    labelValues.push({label: 'Organization', valueHtml: organizationName});\n      labelValues.push({label: 'Description', valueHtml: instance.description});\n\t    labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\n\n\t    if (!isNullOrUndefined(instance.compliant)) {\n\t    \tlet compliantClass =  instance.compliant ? '' : 'label-danger';\n\t\t    labelValues.push({label: 'Compliant', valueHtml: McUtils.getYesNoString(instance.compliant), linkClass: compliantClass});\n\t    }\n    }\n    return labelValues;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\nimport {CertificateBundle} from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\nimport {TOKEN_DELIMITER} from \"../../../../shared/app.constants\";\n\n\n@Component({\n  selector: 'certificate-issue-new',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-issue-new.html'),\n  styles: []\n})\nexport class CertificateIssueNewComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n  public entityTitle: string;\n  public isLoading: boolean;\n  public certificate: CertificateBundle;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = false;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n    this.generateLabelValues();\n  }\n\n  public zipAndDownload() {\n    this.fileHelper.downloadPemCertificate(this.certificate, this.entityTitle);\n  }\n\n  public issueNew() {\n    this.isLoading = true;\n    this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(\n      certificateBundle => {\n        this.certificate = certificateBundle;\n        this.isLoading = false;\n      },\n      err => {\n        this.isLoading = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn.split(TOKEN_DELIMITER)[0]});\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !certificate && !isLoading\\\">\\n        <h5>Issuing a new certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n\\n      <!-- After issue and success -->\\n      <div *ngIf=\\\"certificate\\\">\\n        Certificate issued with success\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\n          </li>\\n          <li>\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\nimport {\n\tMcFormControlModel, McFormControlType,\n\tMcFormControlModelSelect, McFormControlModelDatepicker, SelectModel\n} from \"../../../../theme/components/mcForm/mcFormControlModel\";\nimport {SelectValidator} from \"../../../../theme/validators/select.validator\";\nimport {CertificateRevocation} from \"../../../../backend-api/identity-registry/autogen/model/CertificateRevocation\";\nimport RevokationReasonEnum = CertificateRevocation.RevokationReasonEnum;\n\n\n@Component({\n  selector: 'certificate-revoke',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificate-revoke.html'),\n  styles: []\n})\nexport class CertificateRevokeComponent implements OnInit {\n  public entityType: CertificateEntityType;\n  public entityMrn: string;\n\tpublic entityTitle: string;\n\tpublic certificateId: string;\n  public isLoading: boolean;\n  \n\tpublic isRevoking = false;\n\tpublic revokeTitle = \"Revoke\";\n\tpublic revokeForm: FormGroup;\n\tpublic formControlModels: Array<McFormControlModel>;\n\n  public labelValues:Array<LabelValueModel>;\n\n  constructor(private certificateHelper:CertificateHelperService, private formBuilder: FormBuilder, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\n\t  let entityTitle = this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\n\t  let certificateId = this.route.snapshot.queryParams[queryKeys.CERT_ID];\n    if (entityType == null || !entityMrn || !entityTitle) {\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to revoke certificate\", MCNotificationType.Error);\n      this.navigationHelper.takeMeHome();\n    }\n    this.entityMrn = entityMrn;\n    this.entityTitle = entityTitle;\n    this.entityType = +entityType; // +-conversion from string to int\n\t  this.certificateId = certificateId;\n    this.generateLabelValues();\n    this.generateForm();\n\n\t  this.isLoading = false;\n  }\n\n  public revoke() {\n    this.isRevoking = true;\n    let revokeDate:Date = this.revokeForm.value.revokedAt;\n\t  let tempRevocationReason = this.revokeForm.value.revocationReason;\n\t  var revocationReason:RevokationReasonEnum = null;\n\t  if (tempRevocationReason && tempRevocationReason.toLowerCase().indexOf('undefined') < 0) {\n\t\t  revocationReason = tempRevocationReason;\n\t  }\n    let certificateRevocation:CertificateRevocation = {revokationReason:revocationReason, revokedAt:revokeDate.getTime()+''}\n    this.certificateService.revokeCertificate(this.entityType, this.entityMrn, this.certificateId, certificateRevocation).subscribe(\n      _ => {\n        this.isRevoking = false;\n        this.navigationHelper.cancelNavigateCertificates();\n      },\n      err => {\n        this.isRevoking = false;\n        this.notificationService.generateNotification('Error', 'Error when trying to revoke certificate', MCNotificationType.Error, err);\n      }\n    );\n  }\n\n  public cancel() {\n    this.navigationHelper.cancelNavigateCertificates();\n  }\n\n  private generateLabelValues() {\n    this.labelValues = [];\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\n  }\n  \n\tprivate generateForm() {\n\t\tthis.revokeForm = this.formBuilder.group({});\n\t\tthis.formControlModels = [];\n\n\t\tlet selectValues = this.selectValues();\n\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.revokeForm, elementId: 'revocationReason', controlType: McFormControlType.Select, labelName: '', placeholder: '', validator:SelectValidator.validate, showCheckmark:false};\n\t\tvar formControl = new FormControl('', formControlModelSelect.validator);\n\t\tthis.revokeForm.addControl(formControlModelSelect.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModelSelect);\n\n\t\tlet formControlModel:McFormControlModelDatepicker = {minDate:new Date(), formGroup: this.revokeForm, elementId: 'revokedAt', controlType: McFormControlType.Datepicker, labelName: '', validator:Validators.required};\n\t\tformControl = new FormControl('', formControlModel.validator);\n\t\tthis.revokeForm.addControl(formControlModel.elementId, formControl);\n\t\tthis.formControlModels.push(formControlModel);\n\t}\n\n\tprivate selectValues():Array<SelectModel> {\n\t\tlet selectValues:Array<SelectModel> = [];\n\t\tselectValues.push({value:undefined, label:'Choose reason...', isSelected: true});\n\t\tlet allrevokeTypes = this.certificateHelper.getAllRevocationTypes();\n\t\tallrevokeTypes.forEach(revokeType => {\n\t\t\tselectValues.push({value:revokeType.value, label:revokeType.label, isSelected: false});\n\t\t});\n\t\treturn selectValues;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-revoke/certificate-revoke.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"Revoke certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <!-- Before issue -->\\n      <div *ngIf=\\\"entityType != null && !isLoading\\\">\\n        <h5>Revoking certificate for:</h5>\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n        <br>\\n        <h5>\\n          Please choose a reason and date for revocation.\\n        </h5>\\n        <mc-form [formGroup]=\\\"revokeForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRevoking\\\" [registerTitle]=\\\"revokeTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"revoke()\\\"></mc-form>\\n      </div>\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module id = ./src/app/pages/shared/components/certificate-revoke/certificate-revoke.html\n// module chunks = 0 1 2 3 4","import { Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { Certificate } from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\nimport {\n    CertificateEntityType,\n    CertificateHelperService\n} from \"../../services/certificate-helper.service\";\nimport { DATE_FORMAT } from \"../../../../theme/theme.constants\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { CertificateViewModel } from \"../../view-models/CertificateViewModel\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { MCNotificationsService } from \"../../../../shared/mc-notifications.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { PemCertificate } from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\nimport {\n    TableActionButton,\n    TableCell,\n    TableCellActionButtons,\n    TableHeader,\n    TableRow\n} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport { DatePipe } from \"@angular/common\";\nimport { CertificateBundle } from \"../../../../backend-api/identity-registry/autogen/model/CertificateBundle\";\n\n@Component({\n  selector: 'certificates-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./certificates-table.html'),\n  styles: [require('./certificates-table.scss')]\n})\nexport class CertificatesTableComponent implements OnChanges{\n  @Input() certificates: Array<Certificate>;\n  @Input() certificateEntityType: CertificateEntityType;\n  @Input() entityMrn: string;\n  @Input() isLoading: boolean;\n  @Input() certificateTitle: string;\n  @Input() isAdmin: boolean;\n\n\tpublic tableHeaders: Array<TableHeader>;\n\tpublic tableRows: Array<TableRow>;\n  public newCertificateTitle = \"Issue new Certificate\";\n  public certificateViewModels: Array<CertificateViewModel>;\n  public tableClass:string;\n  public onIssueCertificate: Function;\n\n\tpublic onDownload:Function;\n\n  constructor(private datePipe: DatePipe, private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\n    this.onIssueCertificate = this.issueCertificate.bind(this);\n  }\n\n\tngOnInit() {\n\t\tif (!this.authService.authState.rolesLoaded) {\n\t\t\tthis.authService.rolesLoaded.subscribe((mode)=> {\n\t\t\t\tthis.generateHeadersAndRows();\n\t\t\t});\n\t\t}\n\t}\n\n  ngOnChanges() {\n    if (this.certificates) {\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\n      this.sortCertificates();\n\t    this.generateHeadersAndRows();\n    }\n  }\n\tprivate generateHeadersAndRows() {\n\t\tvar tableHeaders: Array<TableHeader> = [];\n\t\tvar tableRows: Array<TableRow> = [];\n\n\t\tvar tableHeader: TableHeader = {title:'Certificate', class:''};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid from', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'Valid to', class:'nowrap'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\ttableHeader = {title:'', class:'table-buttons'};\n\t\ttableHeaders.push(tableHeader);\n\n\t\tfor (let certificate of this.certificateViewModels) {\n\t\t\tvar cells:Array<TableCell> = [];\n\n\t\t\tvar tableCell: TableCell = {valueHtml:'Certificate for ' + this.certificateTitle, class:'', truncateNumber:50};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.start, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.end, DATE_FORMAT), class:'nowrap', truncateNumber:0};\n\t\t\tcells.push(tableCell);\n\n\t\t\tif (certificate.revoked) {\n\t\t\t\ttableCell = {valueHtml:'Revoked (' + certificate.revokeReasonText + ')', class:'red-text', truncateNumber:50};\n\t\t\t\tcells.push(tableCell);\n\t\t\t} else {\n\t\t\t\tlet actionButtons:Array<TableActionButton> = [];\n\t\t\t\tlet actionButton:TableActionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick:() => {this.download(certificate)}};\n\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\tif (this.isAdmin) {\n\t\t\t\t\tactionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Revoke certificate', onClick:() => {this.revoke(certificate)}};\n\t\t\t\t\tactionButtons.push(actionButton);\n\t\t\t\t}\n\t\t\t\tlet tableCellActionButtons: TableCellActionButtons = {valueHtml:'', class:'table-buttons', truncateNumber:0, actionButtons:actionButtons};\n\t\t\t\tcells.push(tableCellActionButtons);\n\t\t\t}\n\n\t\t\tlet tableRow: TableRow = {cells: cells};\n\t\t\ttableRows.push(tableRow);\n\t\t}\n\n\t\tthis.tableHeaders = tableHeaders;\n\t\tthis.tableRows = tableRows;\n\t}\n  private sortCertificates() {\n    // We are sorting with longest due date on top\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\n      var obj1Time:number;\n      var obj2Time:number;\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\n      if (typeof obj1.end === \"Date\") {\n        obj1Time = obj1.end.getTime();\n      } else {\n        obj1Time = obj1.end;\n      }\n      if (typeof obj2.end === \"Date\") {\n        obj2Time = obj2.end.getTime();\n      } else {\n        obj2Time = obj2.end;\n      }\n\n      if (obj1.revoked && obj2.revoked) {\n        return obj2Time - obj1Time;\n      }\n      if (obj1.revoked) {\n        return 1;\n      }\n      if (obj2.revoked) {\n        return -1;\n      }\n      return obj2Time - obj1Time;\n    });\n  }\n\n  public issueCertificate() {\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\n  }\n\n  public revoke(certificate:Certificate) {\n  \tthis.navigationHelper.navigateToRevokeCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle, certificate.serialNumber);\n  }\n\n  public download(certificate:Certificate) {\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\n    let certBundle:CertificateBundle = {pemCertificate:pemCertificate};\n    this.fileHelper.downloadPemCertificate(certBundle, this.certificateTitle);\n  }\n\n  public canCreate(): boolean {\n      return this.isAdmin;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\"></mc-table>\\n<div *ngIf=\\\"!isLoading\\\">\\n  <mc-create-button [isAdmin]=\\\"canCreate()\\\" [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3 4","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'designs-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./designs-table.html'),\n  styles: []\n})\nexport class DesignsTableComponent implements OnChanges {\n  @Input() designs: Array<Design>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.designs) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let design of this.designs) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, design.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input} from '@angular/core';\nimport {EntityImageModel} from \"../../../../theme/components/mcEntityImage/mcEntityImage.component\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {Observable} from \"rxjs\";\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport {Endorsement} from \"../../../../backend-api/endorsements/autogen/model/Endorsement\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\n\n@Component({\n  selector: 'endorsed-by-list',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./endorsed-by-list.html'),\n  styles: []\n})\nexport class EndorsedByListComponent {\n\t@Input() endorsements:Array<Endorsement>;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\tprivate cardTitle:string;\n\n\tprivate oldEndorsements:Array<Endorsement>;\n\tpublic entityImageList: Array<EntityImageModel>;\n\n  constructor(private logoService: LogoService, private authService: AuthService, private orgService:OrganizationsService, private navigationHelper:NavigationHelperService) {\n  }\n\n  ngOnInit() {\n  \tthis.cardTitle = this.title;\n\t  this.generateEntityImageList();\n  }\n\n\tngOnChanges() {\n\t\tthis.cardTitle = this.title;\n\t\tthis.generateEntityImageList();\n\t}\n\n\tpublic gotoDetails(entityModel:EntityImageModel) {\n\t\tif (this.isMyOrg(entityModel.entityId)) {\n\t\t\tthis.navigationHelper.takeMeHome();\n\t\t} else {\n\t\t\tthis.navigationHelper.navigateToOrganizationDetails(entityModel.entityId)\n\t\t}\n\t}\n\n\tprivate isMyOrg(orgMrn) {\n\t\treturn this.authService.authState.orgMrn === orgMrn;\n\t}\n\n  private generateEntityImageList() {\n  \tif (this.endorsements) {\n  \t\tif (this.endorsements !== this.oldEndorsements) { // Check to see if the endorsements is the same as last time we generated the list, because no need to do all this load again if not needed\n\t\t\t\tthis.oldEndorsements = this.endorsements;\n\t\t\t  this.entityImageList = [];\n\t\t\t  this.endorsements.forEach(endorsement => {\n\t\t\t\t\t\tlet entityImage:EntityImageModel = {imageSourceObservable:this.createImgObservable(endorsement.orgMrn), entityId:endorsement.orgMrn, title:endorsement.orgName};\n\n\t\t\t\t    this.entityImageList.push(entityImage);\n\t\t\t\t  }\n\t\t\t  );\n\t\t  }\n\t  }\n  }\n\n  private createImgObservable(orgMrn:string):Observable<string> {\n\t  let imageSrc = 'assets/img/no_organization.png';\n\t  return Observable.create(observer => {\n\t\t  this.logoService.getLogoForOrganization(orgMrn).subscribe(\n\t\t\t  logo => {\n\t\t\t\t  observer.next(URL.createObjectURL(new Blob([logo])));\n\t\t\t  },\n\t\t\t  err => {\n\t\t\t\t  observer.next(imageSrc);\n\t\t\t  }\n\t\t  );\n\t  });\n  }\n\n\tprivate setRealOrganizationName(entityImage:EntityImageModel, organizationMrn:string) {\n\t\tthis.orgService.getOrganizationName(organizationMrn).subscribe(\n\t\t\torganizationName => {\n\t\t\t\tentityImage.title = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\t// Do nothing. We already have a name set, which should be correct 99% of the time\n\t\t\t}\n\t\t);\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n      <mc-entity-image-list [noDataText]=\\\"'None'\\\" [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\n    </ba-card>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module id = ./src/app/pages/shared/components/endorsed-by-list/endorsed-by-list.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {McUtils} from \"../../../../shared/mc-utils\";\n\n@Component({\n  selector: 'instances-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./instances-table.html'),\n  styles: []\n})\nexport class InstancesTableComponent implements OnChanges {\n  @Input() instances: Array<Instance>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.instances) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Status', class:'nowrap'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Compliant', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Service endpoint', class:''};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Description', class:''};\n\t  tableHeaders.push(tableHeader);\n\n    for (let instance of this.instances) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:45};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    let compliantClass = instance.compliant ? '' : 'label-danger';\n\t    tableCell = {valueHtml:McUtils.getYesNoString(instance.compliant), class:'nowrap ' + compliantClass, truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:25};\n\t    this.setOrganizationCell(tableCell, instance.organizationId);\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:instance.endpointUri, class:'list-endpoint', truncateNumber:60};\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:instance.description, class:'table-description-short', truncateNumber:150};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n\tprivate setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3 4","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Organization } from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport { OrganizationViewModelService } from \"../../services/organization-view-model.service\";\nimport { LogoService } from \"../../../../backend-api/identity-registry/services/logo.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'organization-details-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./organization-details-table.html'),\n  styles: []\n})\nexport class OrganizationDetailsTableComponent implements OnChanges {\n  private labelValues:Array<LabelValueModel>;\n\t@Input() displayLogo:boolean = true;\n  @Input() isLoading:boolean;\n\t@Input() organization: Organization;\n\t@Output() onLogoLoaded: EventEmitter<any> = new EventEmitter<any>();\n\tpublic logo:string;\n\tpublic canChangeLogo:boolean;\n\tpublic isLoadingOrgAndLogo:boolean = true;\n\tpublic uploadingLogo:boolean = false;\n  constructor(private authService:AuthService, private logoService: LogoService, private orgViewModelService: OrganizationViewModelService, private notifications:MCNotificationsService) {\n  }\n  ngOnChanges() {\n    if (this.organization) {\n\t    this.canChangeLogo = this.canChangeTheLogo();\n\t    this.loadLogo();\n    }\n  }\n\n  public uploadLogo(logo:any) {\n\t  let oldLogo = this.logo;\n\t  this.uploadingLogo = true;\n\t  this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(\n\t\t  logo => {\n\t\t\t  this.loadLogo();\n\t\t  },\n\t\t  err => {\n\t\t\t  this.logo = oldLogo;\n\t\t\t  this.uploadingLogo = false;\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to upload logo', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n\n  private setLabelValues() {\n\t  this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\n\t  this.isLoadingOrgAndLogo = false;\n  }\n\n\tprivate loadLogo(){\n\t\tthis.logoService.getLogoForOrganization(this.organization.mrn).subscribe(\n\t\t\tlogo => {\n\t\t\t\tthis.logo = URL.createObjectURL(new Blob([logo]));\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (this.canChangeTheLogo()) {\n\t\t\t\t\tthis.logo = 'assets/img/no_organization.png';\n\t\t\t\t}\n\t\t\t\tthis.setLabelValues();\n\t\t\t\tthis.uploadingLogo = false;\n\t\t\t\tthis.onLogoLoaded.emit('');\n\t\t\t}\n\t\t);\n\t}\n\tprivate canChangeTheLogo():boolean {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.OrgAdmin);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<div *ngIf=\\\"displayLogo && logo\\\" style=\\\"margin-bottom: 10px;\\\">\\n  <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"logo | sanitizeUrl\\\" *ngIf=\\\"logo && !canChangeLogo\\\">\\n  <mc-logo-uploader [logo]=\\\"logo\\\" [uploadingLogo]=\\\"uploadingLogo\\\" (onUpload)=\\\"uploadLogo($event)\\\" *ngIf=\\\"logo && canChangeLogo\\\"></mc-logo-uploader>\\n</div>\\n<mc-label-value-table [isLoading]=\\\"isLoadingOrgAndLogo\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3 4","import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { LabelValueModel } from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\nimport { Service } from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport { CertificateEntityType } from \"../../services/certificate-helper.service\";\nimport { FileHelperService } from \"../../../../shared/file-helper.service\";\nimport { AuthPermission, AuthService } from \"../../../../authentication/services/auth.service\";\nimport { ServiceViewModel } from \"../../../org-identity-registry/services/view-models/ServiceViewModel\";\nimport {\n    MCNotificationsService,\n    MCNotificationType\n} from \"../../../../shared/mc-notifications.service\";\nimport { IdServicesService } from \"../../../../backend-api/identity-registry/services/id-services.service\";\nimport { NavigationHelperService } from \"../../../../shared/navigation-helper.service\";\nimport { TOKEN_DELIMITER } from \"../../../../shared/app.constants\";\nimport { InstancesService } from \"../../../../backend-api/service-registry/services/instances.service\";\n\n@Component({\n  selector: 'service-details-view',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-details-view.html'),\n  styles: []\n})\nexport class ServiceDetailsViewComponent {\n\t@Input() service:Service;\n\t@Input() shouldShowDelete:boolean = true;\n\t@Input() shouldShowUpdate:boolean = true;\n\t@Input() shouldShowLinkToInstance:boolean = true;\n\t@Input() isLoading:boolean;\n\t@Input() title:string;\n\n\t@Output() deleteAction:EventEmitter<any> = new EventEmitter<any>();\n\t@Output() updateAction:EventEmitter<any> = new EventEmitter<any>();\n\n\tpublic labelValues:Array<LabelValueModel>;\n\tpublic entityType: CertificateEntityType;\n\tpublic entityMrn:string;\n\tpublic onGotoVessel: Function;\n\tpublic onGotoInstance: Function;\n\tprivate linkToInstance:boolean = false;\n\tpublic isLoadingInstance:boolean = false;\n\n\tconstructor(private fileHelperService:FileHelperService, private authService: AuthService, private servicesService: IdServicesService, private notifications:MCNotificationsService, private navigationHelperService: NavigationHelperService, private instancesService:InstancesService) {\n\n\t}\n\n\tngOnInit() {\n\t\tthis.isLoadingInstance = true;\n\t\tthis.entityType = CertificateEntityType.Service;\n\t\tthis.onGotoVessel = this.gotoVessel.bind(this);\n\t\tthis.onGotoInstance = this.gotoInstance.bind(this);\n\t}\n\n\tngOnChanges() {\n\t\tif (this.service) {\n\t\t\tthis.entityMrn = this.service.mrn + TOKEN_DELIMITER + this.service.instanceVersion;\n\t\t\tif (this.shouldShowLinkToInstance) {\n\t\t\t\tthis.loadInstance();\n\t\t\t} else {\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadInstance() {\n\t\tthis.instancesService.getInstance(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.linkToInstance = true;\n\t\t\t\tthis.generateLabelValues();\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\tthis.linkToInstance = false;\n\t\t\t\t\tthis.generateLabelValues();\n\t\t\t\t} else {\n\t\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the Instance for the ID service', MCNotificationType.Error, err);\n\t\t\t\t}\n\t\t\t\tthis.isLoadingInstance = false;\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic showDownload():boolean {\n\t\treturn this.service.oidcClientId && this.isAdmin();\n\t}\n\n\tpublic downloadXML() {\n\t\tthis.servicesService.getIdServiceJbossXml(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\txmlString => {\n\t\t\t\tthis.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the XML', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic downloadJSON() {\n\t\tthis.servicesService.getServiceKeycloakJson(this.service.mrn, this.service.instanceVersion).subscribe(\n\t\t\tjsonString => {\n\t\t\t\tthis.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the JSON', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic generateLabelValues() {\n\t\tthis.labelValues = [];\n\t\tif (this.service) {\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.service.mrn});\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.service.name});\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.service.permissions});\n\t\t\tthis.labelValues.push({label: 'Certificate domain name', valueHtml: this.service.certDomainName});\n\t\t\tif (this.service.oidcRedirectUri) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri});\n\t\t\t}\n\t\t\tif (this.service.oidcClientId) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client ID', valueHtml: this.service.oidcClientId});\n\t\t\t}\n\t\t\tif (this.service.oidcClientSecret) {\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret});\n\t\t\t}\n\n\t\t\tif (this.service.oidcAccessType) {\n\t\t\t\tthis.labelValues.push({label: 'Access type', valueHtml: ServiceViewModel.getLabelForEnum(this.service.oidcAccessType)});\n\t\t\t}\n\n\t\t\tthis.generateLabelValueForVessel();\n\n\t\t\tthis.generateLabelValueForInstance();\n\t\t}\n\t}\n\n\tprivate generateLabelValueForVessel() {\n\t\tlet vessel = this.service.vessel;\n\t\tif (vessel) {\n\t\t\tlet label = 'Linked vessel';\n\t\t\tthis.labelValues.push({label: label, valueHtml: vessel.name, linkFunction: this.onGotoVessel, linkValue: [vessel.mrn]});\n\t\t}\n\t}\n\n\tprivate generateLabelValueForInstance() {\n\t\tif (this.shouldShowLinkToInstance && this.linkToInstance) {\n\t\t\tlet label = 'Linked Instance';\n\t\t\tthis.labelValues.push({label: label, valueHtml: this.service.name, linkFunction: this.onGotoInstance, linkValue: [this.service.mrn, this.service.instanceVersion]});\n\t\t}\n\t}\n\n\tpublic showDelete():boolean {\n\t\treturn this.shouldShowDelete && this.isAdmin() && this.service != null;\n\t}\n\n\tpublic showUpdate():boolean {\n\t\treturn this.shouldShowUpdate && this.isAdmin() && this.service != null;\n\t}\n\n\tprivate isAdmin() {\n\t\treturn this.authService.authState.hasPermission(AuthPermission.ServiceAdmin);\n\t}\n\n\tprivate delete() {\n\t\tthis.deleteAction.emit('');\n\t}\n\n\tprivate update() {\n\t\tthis.updateAction.emit('');\n\t}\n\n\tprivate gotoInstance(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToOrgInstance(linkValue[0], linkValue[1]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\n\t\t}\n\t}\n\n\tprivate gotoVessel(linkValue:any) {\n\t\ttry {\n\t\t\tthis.navigationHelperService.navigateToVessel(linkValue[0]);\n\t\t} catch (error) {\n\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to go to vessel', MCNotificationType.Error, error);\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","module.exports = \"<ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n  <mc-label-value-table [isLoading]=\\\"isLoading || isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\n  <ul *ngIf=\\\"!isLoading && service && (showDownload() || showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXML()\\\">Download JBOSS XML</button>\\n    </li>\\n    <li *ngIf=\\\"showDownload()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadJSON()\\\">Download Keycloak JSON</button>\\n    </li>\\n    <li *ngIf=\\\"showUpdate()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update</button>\\n    </li>\\n    <li *ngIf=\\\"showDelete()\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Service</button>\\n    </li>\\n  </ul>\\n</ba-card>\\n\\n<div *ngIf=\\\"service\\\">\\n  <ba-card title=\\\"Certificates for {{service.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\n    <certificates-table [isAdmin]=\\\"isAdmin()\\\" [entityMrn]=\\\"entityMrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"service.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"service.certificates\\\"></certificates-table>\\n  </ba-card>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module id = ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {ServiceRegistrySearchRequest} from \"./ServiceRegistrySearchRequest\";\nimport {FormGroup, FormBuilder, FormControl} from \"@angular/forms\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\nimport {SrSearchRequestsService} from \"../../../org-service-registry/shared/services/sr-search-requests.service\";\nimport {SHOW_ENDORSEMENTS} from \"../../../../shared/app.constants\";\n\ninterface SelectModel {\n\tlabel:string;\n\tvalue:string;\n}\n\n@Component({\n  selector: 'service-registry-search',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./service-registry-search.html'),\n\tstyles: [require('./service-registry-search.scss')]\n})\nexport class ServiceRegistrySearchComponent implements OnDestroy {\n\t@Input() searchTitle: string;\n\t@Input() searchKey: string;\n\t@Input() isSearching: boolean;\n\t@Input() preFilterMyOrg: boolean;\n\t@Input() showEndorsement: boolean;\n\t@Input() showKeywords: boolean = true;\n\t@Output() onSearch:EventEmitter<ServiceRegistrySearchRequest> = new EventEmitter<ServiceRegistrySearchRequest>();\n\tprivate endorsementMainSwitch = SHOW_ENDORSEMENTS;\n\n\tpublic isLoading: boolean;\n\tpublic formGroup: FormGroup;\n\tpublic selectValuesOrganizations:Array<SelectModel>;\n\tpublic selectValuesOrganizationsForEndorsement:Array<SelectModel>;\n\tpublic onSearchFunction: Function;\n\tpublic isCollapsed:boolean;\n\tpublic collapsedClass:string;\n\tpublic toggleClass:string;\n\n  constructor(private searchRequestsService:SrSearchRequestsService, private changeDetector: ChangeDetectorRef, private authService:AuthService, formBuilder:FormBuilder, private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  \tthis.formGroup = formBuilder.group({});\n  }\n\n\tngOnDestroy() {\n\t\tthis.changeDetector.detach();\n\t}\n\n\tngOnInit() {\n\t\tthis.onSearchFunction = this.search.bind(this);\n\t\tthis.isCollapsed = false;\n\t\tthis.setClass();\n  \tthis.isLoading = true;\n\t\tthis.generateForm();\n  \tthis.loadOrganizations();\n\t}\n\n\tpublic toggle() {\n\t\tthis.isCollapsed = !this.isCollapsed;\n\t\tthis.setClass();\n\t}\n\n\tprivate setClass() {\n\t\tthis.toggleClass = this.isCollapsed ? 'fa fa-caret-square-o-down' : 'fa fa-caret-square-o-up';\n\t}\n\n\tpublic search() {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\t\tlet registeredBy:string;\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromRegisteredBy(registeredBy) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet endorsedBy:string;\n\n\t\tif (registeredBy && registeredBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tregisteredBy = undefined;\n\t\t}\n\n\t\tlet endorsedByValue = this.formGroup.value.endorsedBy;\n\t\tif (endorsedByValue && endorsedByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tendorsedBy = endorsedByValue;\n\t\t}\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate searchFromEndorsedBy(endorsedBy:string) {\n\t\tlet keywords = this.formGroup.value.keywords;\n\n\t\tlet registeredBy:string;\n\n\n\t\tlet registeredByValue = this.formGroup.value.registeredBy;\n\t\tif (registeredByValue && registeredByValue.toLowerCase().indexOf('undefined') < 0) {\n\t\t\tregisteredBy = registeredByValue;\n\t\t}\n\n\t\tif (endorsedBy && endorsedBy.toLowerCase().indexOf('undefined') > -1) {\n\t\t\tendorsedBy = undefined;\n\t\t}\n\n\t\tthis.doSearch(keywords, registeredBy, endorsedBy);\n\t}\n\n\tprivate doSearch(keywords:string, registeredBy:string, endorsedBy:string) {\n\t\tlet searchRequest: ServiceRegistrySearchRequest = {keywords:keywords, registeredBy:registeredBy, endorsedBy:endorsedBy};\n\t\tthis.searchRequestsService.addSearchRequest(this.searchKey, searchRequest);\n\t\tthis.notifications.errorLog = null; // Remove error log if it is present\n\t\tthis.onSearch.emit(searchRequest);\n\t}\n\n\tprivate generateForm() {\n\t\tvar formControl = new FormControl('');\n\t\tthis.formGroup.addControl('keywords', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('registeredBy', formControl);\n\n\t\tformControl = new FormControl(undefined);\n\t\tthis.formGroup.addControl('endorsedBy', formControl);\n\t}\n\n\tprivate loadOrganizations() {\n\t\tthis.orgsService.getAllOrganizations().subscribe(\n\t\t\torganizations => {\n\t\t\t\tthis.setupSearchRequest(organizations);\n\t\t\t\tthis.isLoading = false;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.setupSearchRequest([]);\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organizations', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate setupSearchRequest(organizations:Array<Organization>) {\n\t\tthis.selectValuesOrganizations = [];\n\t\tthis.selectValuesOrganizations.push({value:undefined, label:'All'});\n\t\tthis.selectValuesOrganizationsForEndorsement = [];\n\t\tthis.selectValuesOrganizationsForEndorsement.push({value:undefined, label:'No filter'});\n\n\t\torganizations.forEach(organization => {\n\t\t\tthis.selectValuesOrganizations.push({value:organization.mrn, label:organization.name});\n\t\t\tthis.selectValuesOrganizationsForEndorsement.push({value:organization.mrn, label:organization.name});\n\t\t});\n\t\tvar registeredBy:string;\n\t\tvar endorsedBy:string;\n\t\tvar keywords:string = '';\n\t\tlet searchRequest = this.searchRequestsService.getSearchRequest(this.searchKey);\n\t\tif (searchRequest) {\n\t\t\tregisteredBy = searchRequest.registeredBy;\n\t\t\tendorsedBy = searchRequest.endorsedBy;\n\t\t\tif (searchRequest.keywords) {\n\t\t\t\tkeywords = searchRequest.keywords;\n\t\t\t}\n\t\t} else if (this.preFilterMyOrg){\n\t\t\tregisteredBy = this.authService.authState.orgMrn;\n\t\t}\n\t\tthis.formGroup.patchValue({registeredBy: registeredBy});\n\t\tthis.formGroup.patchValue({endorsedBy: endorsedBy});\n\t\tthis.formGroup.patchValue({keywords: keywords});\n\n\t\tthis.formGroup.controls['registeredBy'].valueChanges.subscribe(param => this.searchFromRegisteredBy(param));\n\t\tthis.formGroup.controls['endorsedBy'].valueChanges.subscribe(param => this.searchFromEndorsedBy(param));\n\n\t\tthis.changeDetector.detectChanges();\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-registry-search/service-registry-search.component.ts","module.exports = \"<a class=\\\"search-link\\\" (click)=\\\"toggle()\\\">\\n  <h4>{{searchTitle}} <i style=\\\"margin-left:2px;color: white; font-size: 16px;\\\" class=\\\"{{toggleClass}}\\\" aria-hidden=\\\"true\\\"></i></h4>\\n</a>\\n<div class=\\\"mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\" *ngIf=\\\"!isCollapsed && !isLoading && formGroup\\\">\\n  <form [formGroup]=\\\"formGroup\\\">\\n    <div *ngIf=\\\"showKeywords\\\" class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\">\\n          <label class=\\\"mc-form-label\\\">Keywords\\n            <div class=\\\"input-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control mc-form-control\\\" formControlName=\\\"keywords\\\">\\n              <span class=\\\"mc-form-control-input-group-btn input-group-btn\\\">\\n                <mc-loading-button [type]=\\\"'submit'\\\" [class]=\\\"'btn btn-primary search-button'\\\" [isLoading]=\\\"isSearching\\\" [title]=\\\"'Search'\\\" [onClick]=\\\"onSearchFunction\\\" ></mc-loading-button>\\n              </span>\\n            </div>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Registered by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"registeredBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizations\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"showEndorsement && endorsementMainSwitch\\\" class=\\\"col-sm-6\\\">\\n        <div [formGroup]=\\\"formGroup\\\" class=\\\"form-group mc-form-group\\\" style=\\\"margin-bottom: 0px !important;\\\">\\n          <label class=\\\"mc-form-label\\\">Endorsed by\\n            <select class=\\\"form-control mc-form-control mc-form-control-select\\\" formControlName=\\\"endorsedBy\\\">\\n              <option *ngFor=\\\"let selectValue of selectValuesOrganizationsForEndorsement\\\" [ngValue]=\\\"selectValue.value\\\">\\n                {{selectValue.label}}\\n              </option>\\n            </select>\\n          </label>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<div *ngIf=\\\"!isCollapsed\\\">\\n  <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.html\n// module chunks = 0 1 2 3 4","module.exports = \".mc-form-label {\\n  width: 100%; }\\n\\n.mc-form-control {\\n  margin-top: 5px; }\\n\\n.mc-form-control:read-only {\\n  cursor: not-allowed;\\n  color: rgba(255, 255, 255, 0.7); }\\n\\n.mc-form-control-success {\\n  border: 1px solid #8bd22f !important; }\\n  .mc-form-control-success:focus {\\n    border: 1px solid #aee06d !important; }\\n\\n.mc-form-control-error {\\n  border: 1px solid #f95372 !important; }\\n  .mc-form-control-error:focus {\\n    border: 1px solid #fb879c !important; }\\n\\n.mc-form-group {\\n  max-width: 450px;\\n  margin-bottom: 0.5rem !important; }\\n\\n.mc-form-control-feedback {\\n  top: 20px !important;\\n  right: 10px !important; }\\n\\n.mc-form-control-select:read-only {\\n  cursor: default !important;\\n  color: #ffffff !important; }\\n\\n.search-link {\\n  cursor: pointer;\\n  color: #ffffff; }\\n  .search-link:hover {\\n    transform: none;\\n    color: #ffffff; }\\n\\n.mc-form-control-input-group-btn {\\n  padding-top: 5px; }\\n\\n.search-button {\\n  border-bottom-left-radius: 0 !important;\\n  border-top-left-radius: 0 !important; }\\n  .search-button:hover {\\n    transform: none; }\\n\\n.input-group {\\n  margin-bottom: 0px !important; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module id = ./src/app/pages/shared/components/service-registry-search/service-registry-search.scss\n// module chunks = 0 1 2 3 4","import {Component, Input, OnChanges, ViewEncapsulation} from '@angular/core';\nimport {TableCell, TableHeader, TableRow} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\nimport {InstancesService} from \"../../../../backend-api/service-registry/services/instances.service\";\nimport {BugReportingService} from \"../../../../backend-api/identity-registry/services/bug-reporting.service\";\nimport {BugReport} from \"../../../../backend-api/identity-registry/autogen/model/BugReport\";\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\n\n@Component({\n  selector: 'services-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./services-table.html'),\n  styles: []\n})\nexport class ServicesTableComponent implements OnChanges {\n  @Input() services: Array<Service>;\n  @Input() isLoading: boolean;\n\tpublic onRowClick: Function;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private navigationHelperService:NavigationHelperService, private orgsService:OrganizationsService, private notifications: MCNotificationsService, private instancesService: InstancesService, private bugService: BugReportingService) {\n  }\n  ngOnInit() {\n\t  this.onRowClick = this.gotoService.bind(this);\n  }\n  ngOnChanges() {\n    if (this.services) {\n\t    this.loadMyOrganization();\n    }\n  }\n\n\tprivate loadMyOrganization() {\n\t\tthis.orgsService.getMyOrganization().subscribe(\n\t\t\torganization => {\n\t\t\t\tthis.generateHeadersAndRows(organization.mrn);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n  private generateHeadersAndRows(orgMrn:string) {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    for (let service of this.services) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:service.name, class:'', truncateNumber:250};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:service.instanceVersion, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, orgMrn);\n\t    cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t\tthis.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t\torganizationName => {\n\t\t\t\ttableCell.valueHtml = organizationName;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate gotoService(index:number) {\n  \tlet mrn = this.services[index].mrn;\n  \tlet version = this.services[index].instanceVersion;\n  \tthis.isLoading = true;\n\t\tthis.instancesService.getInstance(mrn, version).subscribe(\n\t\t\tinstance => {\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err.status == 404) {\n\t\t\t\t\t// when using the portal only to register instances, this should never happen. However, if someone uses the SR api only then there might be something missing. We log it for further investigation\n\t\t\t\t\tlet bugReport:BugReport = {subject:\"Missing instance\", description:\"There is a service in the IR that doesn't exist in the SR.\\n\\n MRN: \" + mrn + \",\\nVersion: \" + version};\n\t\t\t\t\tthis.bugService.reportBug(bugReport)\n\t\t\t\t}\n\t\t\t\tthis.navigationHelperService.navigateToOrgInstance(mrn, version);\n\n\t\t\t},\n\t\t);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/services-table/services-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/services-table/services-table.html\n// module id = ./src/app/pages/shared/components/services-table/services-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {OrganizationsService} from \"../../../../backend-api/identity-registry/services/organizations.service\";\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\n\n@Component({\n  selector: 'specifications-table',\n  encapsulation: ViewEncapsulation.None,\n  template: require('./specifications-table.html'),\n  styles: []\n})\nexport class SpecificationsTableComponent implements OnChanges {\n  @Input() specifications: Array<Specification>;\n  @Input() isLoading: boolean;\n  @Input() onRowClick: (index:number) => void;\n  public tableHeaders: Array<TableHeader>;\n  public tableRows: Array<TableRow>;\n  constructor(private orgsService: OrganizationsService, private notifications: MCNotificationsService) {\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    if (this.specifications) {\n      this.generateHeadersAndRows();\n    }\n  }\n  private generateHeadersAndRows() {\n    var tableHeaders: Array<TableHeader> = [];\n    var tableRows: Array<TableRow> = [];\n\n    var tableHeader: TableHeader = {title:'Name', class:''};\n    tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Version', class:'nowrap align-center'};\n    tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Status', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n\t  tableHeader = {title:'Organization', class:'nowrap'};\n\t  tableHeaders.push(tableHeader);\n\n    tableHeader = {title:'Description', class:''};\n    tableHeaders.push(tableHeader);\n\n    for (let specification of this.specifications) {\n      var cells:Array<TableCell> = [];\n\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\n      cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\n      cells.push(tableCell);\n\n\t    tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\n\t    cells.push(tableCell);\n\n\t    tableCell = {valueHtml:'', class:'nowrap', truncateNumber:30};\n\t    this.setOrganizationCell(tableCell, specification.organizationId);\n\t    cells.push(tableCell);\n\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\n      cells.push(tableCell);\n\n      let tableRow: TableRow = {cells: cells};\n      tableRows.push(tableRow);\n    }\n\n    this.tableHeaders = tableHeaders;\n    this.tableRows = tableRows;\n  }\n\n  private setOrganizationCell(tableCell: TableCell, organizationId) {\n\t  this.orgsService.getOrganizationName(organizationId).subscribe(\n\t\t  organizationName => {\n\t\t\t  tableCell.valueHtml = organizationName;\n\t\t  },\n\t\t  err => {\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\n\t\t  }\n\t  );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3 4","import {Injectable, OnInit} from '@angular/core';\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\n\n@Injectable()\nexport class OrganizationViewModelService implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\n    var labelValues:Array<LabelValueModel> = undefined;\n    if (organization) {\n      labelValues = [];\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\n\t    labelValues.push({label: 'Name', valueHtml: organization.name});\n      labelValues.push({label: 'Address', valueHtml: organization.address});\n      labelValues.push({label: 'Country', valueHtml: organization.country});\n      if (organization.email) {\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\n      }\n      if (organization.url) {\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\n      }\n    }\n    return labelValues;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import {Vessel} from \"../../../backend-api/identity-registry/autogen/model/Vessel\";\nimport {VesselAttribute} from \"../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\n\nexport class VesselHelper {\n\n\tpublic static isVesselAttEqualTo(vessel:Vessel, imoNumber:string, mmsiNumber:string) : boolean {\n\t\timoNumber = imoNumber || '';\n\t\tmmsiNumber = mmsiNumber || '';\n\t\treturn imoNumber === VesselHelper.getIMO(vessel) && mmsiNumber === VesselHelper.getMMSI(vessel);\n\t}\n\n\tpublic static labelForSelect(vessel:Vessel) : string {\n\t\tlet imo = VesselHelper.getIMO(vessel);\n\t\tlet mmsi = VesselHelper.getMMSI(vessel);\n\t\treturn vessel.name + \", IMO:\" + (imo.length == 0 ? ' - ' : imo) + \", MMSI:\" + (mmsi.length == 0 ? ' - ' : mmsi);\n\t}\n\n\t// Returns empty string if no IMO exists for the vessel\n\tpublic static getIMO(vessel:Vessel) : string  {\n\t\tvar imo = '';\n\t\tvessel.attributes.forEach(att => {\n\t\t\tif (att.attributeName === AttributeNameEnum.ImoNumber) {\n\t\t\t\timo = att.attributeValue;\n\t\t\t}\n\t\t});\n\t\treturn imo;\n\t}\n\n\t// Returns empty string if no MMSI exists for the vessel\n\tpublic static getMMSI(vessel:Vessel) : string  {\n\t\tvar mmsi = '';\n\t\tvessel.attributes.forEach(att => {\n\t\t\tif (att.attributeName === AttributeNameEnum.MmsiNumber) {\n\t\t\t\tmmsi = att.attributeValue;\n\t\t\t}\n\t\t});\n\t\treturn mmsi;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/vessel-helper.ts","import { NgModule }      from '@angular/core';\nimport { CommonModule }  from '@angular/common';\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\nimport {NgaModule} from \"../../theme/nga.module\";\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\nimport {ServiceDetailsViewComponent} from \"./components/service-details-view/service-details-view.component\";\nimport {CertificateRevokeComponent} from \"./components/certificate-revoke/certificate-revoke.component\";\nimport {ServiceRegistrySearchComponent} from \"./components/service-registry-search/service-registry-search.component\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {SrSearchRequestsService} from \"../org-service-registry/shared/services/sr-search-requests.service\";\nimport {EndorsedByListComponent} from \"./components/endorsed-by-list/endorsed-by-list.component\";\nimport {ServicesTableComponent} from \"./components/services-table/services-table.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgaModule,\n\t  ReactiveFormsModule\n  ],\n  declarations: [\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    OrganizationDetailsTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent\n  ],\n  exports: [\n    OrganizationDetailsTableComponent,\n    DesignsTableComponent,\n    InstancesTableComponent,\n    SpecificationsTableComponent,\n    CertificatesTableComponent,\n    CertificateIssueNewComponent,\n\t  CertificateRevokeComponent,\n\t  ServiceDetailsViewComponent,\n\t  ServiceRegistrySearchComponent,\n\t  EndorsedByListComponent,\n\t  ServicesTableComponent,\n  ],\n  providers: [\n    SrViewModelService,\n    CertificateHelperService,\n    OrganizationViewModelService,\n\t  SrSearchRequestsService\n  ]\n})\nexport class SharedModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[//n//r]//s*//.|//.)import//((.+)//)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts"],"mappings":";;;;;;AAAA;;;;;;;;;;AAUA;;AA0CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AC1DA;;;;;;;;;;AAUA;;AAgEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;AChFA;;;;;;;;;;AAUA;;AAwBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AApFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgFA;;AAAA;AA/EA;;;;;;;;ACvBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAAA;AACA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACrBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AClBA;AAMA;AACA;AAAA;AALA;AAAA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;;AClCA;AAIA;AACA;AACA;AACA;AACA;AACA;AAWA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5FA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwFA;;AAAA;AAvFA;;;;;;;;ACpBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAQA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoFA;;AAAA;AAnFA;;;;;;;;ACrBA;;;;;;;;;ACAA;AAEA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AASA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7GA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyGA;;AAAA;AAxGA;;;;;;;;ACzBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AAMA;AAQA;AAguIA;;AAAA;AAtIA;;;;;;;;AC1BA;;;;;;;;;ACAA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAQA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAtFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkFA;;AAAA;AAjFA;;;;;;;;ACnBA;;;;;;;;;ACAA;AACA;AAKA;AACA;AAGA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7EA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyEA;;AAAA;AAxEA;;;;;;;;ACpBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAxGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoGA;;AAAA;AAnGA;;;;;;;;ACnBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAtFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkFA;;AAAA;AAjFA;;;;;;;;ACnBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrDA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AACA;AAlBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACjCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA1FA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsFA;;AAAA;AArFA;;;;;;;;ACrBA;;;;;;;;;ACAA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAQA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACpBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAMA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAGA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjHA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6GA;;AAAA;AA5GA;;;;;;;;AC5BA;;;;;;;;;ACAA;AAQA;AACA;AACA;AAMA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAQA;AAapIA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgIA;;AAAA;AA/HA;;;;;;;;ACnCA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACpCA;AACA;AACA;AAOA;AAAA;AAiEA;AAhEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjEA;;;;;;;;;;ACTA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AA7DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyDA;;AAAA;AAxDA;;;;;;;;ACdA;;;;;;;;;ACAA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA1EA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsEA;;AAAA;AArEA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtpSA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgSA;;AAAA;AA/RA;;;;;;;;AC5BA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5SA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwSA;;AAAA;AAvSA;;;;;;;;AC3BA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AACA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrDA;AACA;AACA;AAOA;AAAA;AA6CA;AA1CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7CA;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAxGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoGA;;AAAA;AAnGA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AArFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAiFA;;AAAA;AAhFA;;;;;;;;ACrBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AApHA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgHA;;AAAA;AA/GA;;;;;;;;ACpBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAWA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8FA;;AAAA;AA7FA;;;;;;;;ACpBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACrDA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAQA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAMA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AA5JA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwJA;;AAAA;AAvJA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAnFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA+EA;;AAAA;AA9EA;;;;;;;;ACrBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAchIA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4HA;;AAAA;AA3HA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA9IA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA0IA;;AAAA;AAzIA;;;;;;;;ACnBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACpDA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA9FA;;;;;;;;;;ACVA;AAQA;AAEA;AADA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAbA;AAAA;;AAAA;AAcA;AAAA;AAbA;;;;;;;;;;ACRA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;;AAAA;AAyDA;AAAA;AAxDA;;;;;;;;;;ACTA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuDA;;AAAA;AAtDA;;;;;;;;ACnBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAWA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8FA;;AAAA;AA7FA;;;;;;;;ACvBA;;;;;;;;;ACAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AASA;AASA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3BA;AADA;AAAA;;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnIA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsIA;;AAAA;AArIA;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;;;ACAA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACZA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAxEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4EA;;AAAA;AA3EA;;;;;;;;ACfA;;;;;;;;;ACAA;AAGA;AACA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAlFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAqFA;;AAAA;AApFA;;;;;;;;ACbA;;;;;;;;;ACAA;AASA;AACA;AACA;AACA;AACA;AAWA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6DA;;AAAA;AA5DA;;;;;;;;ACxBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjpKA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuKA;;AAAA;AAtKA;;;;;;;;ACtBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA/JA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkKA;;AAAA;AAjKA;;;;;;;;ACrBA;;;;;;;ACAA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA1FA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6FA;;AAAA;AA5FA;;;;;;;;AChBA;;;;;;;;;ACAA;AAIA;AACA;AAQA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AArEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACbA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AAyBA;AAAA;AAxBA;;;;;;;;;;ACJA;AACA;AAEA;AAAA;AAmCA;AAjCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnCA;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;AAAA;AACA;AAxCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;","sourceRoot":""}